
hall_error_emulator_nucleo-G431RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d88  08006d88  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08006d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200001a0  08006f30  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08006f30  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001733c  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b8  00000000  00000000  0003754f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed8  00000000  00000000  0003be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3a9  00000000  00000000  0003cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019403  00000000  00000000  0005c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c879d  00000000  00000000  000754dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f30  00000000  00000000  0013dc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d3  00000000  00000000  00142bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006290 	.word	0x08006290

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	08006290 	.word	0x08006290

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2230      	movs	r2, #48	; 0x30
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fe73 	bl	800620c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_DAC1_Init+0x80>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <MX_DAC1_Init+0x84>)
 800052a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800052c:	4819      	ldr	r0, [pc, #100]	; (8000594 <MX_DAC1_Init+0x80>)
 800052e:	f001 fada 	bl	8001ae6 <HAL_DAC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000538:	f000 faeb 	bl	8000b12 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800053c:	2302      	movs	r3, #2
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800054c:	2306      	movs	r3, #6
 800054e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_DAC1_Init+0x80>)
 8000568:	f001 fc18 	bl	8001d9c <HAL_DAC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000572:	f000 face 	bl	8000b12 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	2210      	movs	r2, #16
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_DAC1_Init+0x80>)
 800057e:	f001 fc0d 	bl	8001d9c <HAL_DAC_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000588:	f000 fac3 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	3730      	adds	r7, #48	; 0x30
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200001bc 	.word	0x200001bc
 8000598:	50000800 	.word	0x50000800

0800059c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a41      	ldr	r2, [pc, #260]	; (80006c0 <HAL_DAC_MspInit+0x124>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d17c      	bne.n	80006b8 <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a40      	ldr	r2, [pc, #256]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a3a      	ldr	r2, [pc, #232]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005ee:	2330      	movs	r3, #48	; 0x30
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f002 f93a 	bl	800287c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_DAC_MspInit+0x130>)
 800060c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000610:	2206      	movs	r2, #6
 8000612:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000616:	2210      	movs	r2, #16
 8000618:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000634:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000638:	2220      	movs	r2, #32
 800063a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800063e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000644:	4820      	ldr	r0, [pc, #128]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000646:	f001 fddb 	bl	8002200 <HAL_DMA_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000650:	f000 fa5f 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <HAL_DAC_MspInit+0x138>)
 8000664:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000668:	2207      	movs	r2, #7
 800066a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 800066e:	2210      	movs	r2, #16
 8000670:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000690:	2220      	movs	r2, #32
 8000692:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000696:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800069a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 800069e:	f001 fdaf 	bl	8002200 <HAL_DMA_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80006a8:	f000 fa33 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	50000800 	.word	0x50000800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	200001d0 	.word	0x200001d0
 80006cc:	40020030 	.word	0x40020030
 80006d0:	20000230 	.word	0x20000230
 80006d4:	40020044 	.word	0x40020044

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_DMA_Init+0x80>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <MX_DMA_Init+0x80>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_DMA_Init+0x80>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_DMA_Init+0x80>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_DMA_Init+0x80>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6493      	str	r3, [r2, #72]	; 0x48
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_DMA_Init+0x80>)
 8000704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	200b      	movs	r0, #11
 8000714:	f001 f9b3 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000718:	200b      	movs	r0, #11
 800071a:	f001 f9ca 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	200c      	movs	r0, #12
 8000724:	f001 f9ab 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000728:	200c      	movs	r0, #12
 800072a:	f001 f9c2 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200d      	movs	r0, #13
 8000734:	f001 f9a3 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000738:	200d      	movs	r0, #13
 800073a:	f001 f9ba 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200e      	movs	r0, #14
 8000744:	f001 f99b 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000748:	200e      	movs	r0, #14
 800074a:	f001 f9b2 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_GPIO_Init+0x100>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a39      	ldr	r2, [pc, #228]	; (800085c <MX_GPIO_Init+0x100>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_GPIO_Init+0x100>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <MX_GPIO_Init+0x100>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <MX_GPIO_Init+0x100>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <MX_GPIO_Init+0x100>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MX_GPIO_Init+0x100>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <MX_GPIO_Init+0x100>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_GPIO_Init+0x100>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_GPIO_Init+0x100>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a27      	ldr	r2, [pc, #156]	; (800085c <MX_GPIO_Init+0x100>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <MX_GPIO_Init+0x100>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, output_HALLC_Pin|output_HALLA_Pin|output_HALLB_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2138      	movs	r1, #56	; 0x38
 80007d6:	4822      	ldr	r0, [pc, #136]	; (8000860 <MX_GPIO_Init+0x104>)
 80007d8:	f002 f9ea 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <MX_GPIO_Init+0x104>)
 80007e4:	f002 f9e4 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = bluepushbutton_Pin|input_HALLC_Pin|input_HALLB_Pin;
 80007e8:	f242 0303 	movw	r3, #8195	; 0x2003
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4819      	ldr	r0, [pc, #100]	; (8000864 <MX_GPIO_Init+0x108>)
 80007fe:	f002 f83d 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_HALLA_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(input_HALLA_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_GPIO_Init+0x104>)
 8000816:	f002 f831 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = output_HALLC_Pin|output_HALLA_Pin|output_HALLB_Pin;
 800081a:	2338      	movs	r3, #56	; 0x38
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x104>)
 8000832:	f002 f823 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_TARGET_BOARD_Pin;
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_TARGET_BOARD_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x104>)
 8000850:	f002 f814 	bl	800287c <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400
 8000864:	48000800 	.word	0x48000800

08000868 <hall_swapper_twentyKHzinterruptionIRQ>:

/**
* \brief does the hall swapping and polarizing thing
*   this function should be called inside a 20Khz TIM interruption, in our case inside TIM8_UP_IRQHandler(void)
*/
void hall_swapper_twentyKHzinterruptionIRQ( void ){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	if(emulator_enabled==0){
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <hall_swapper_twentyKHzinterruptionIRQ+0x44>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <hall_swapper_twentyKHzinterruptionIRQ+0x12>
		read_input_signals();		//read all gpio inputs into signal_inputs
 8000874:	f000 f81c 	bl	80008b0 <read_input_signals>
 8000878:	e001      	b.n	800087e <hall_swapper_twentyKHzinterruptionIRQ+0x16>
	}else{
		emulated_read_input_signals();
 800087a:	f000 f83b 	bl	80008f4 <emulated_read_input_signals>
	}

	polarice_signals(hall_A);	//apply signal inversions, polarice should come first
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f868 	bl	8000954 <polarice_signals>
	polarice_signals(hall_B);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 f865 	bl	8000954 <polarice_signals>
	polarice_signals(hall_C);
 800088a:	2002      	movs	r0, #2
 800088c:	f000 f862 	bl	8000954 <polarice_signals>
	swap_signals(hall_A);		//apply signal order swapping, swapping should come second
 8000890:	2000      	movs	r0, #0
 8000892:	f000 f883 	bl	800099c <swap_signals>
	swap_signals(hall_B);
 8000896:	2001      	movs	r0, #1
 8000898:	f000 f880 	bl	800099c <swap_signals>
	swap_signals(hall_C);
 800089c:	2002      	movs	r0, #2
 800089e:	f000 f87d 	bl	800099c <swap_signals>

	write_output_signals();		//write signal outputs into signal_outputs
 80008a2:	f000 f8af 	bl	8000a04 <write_output_signals>

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200005d4 	.word	0x200005d4

080008b0 <read_input_signals>:

/**
* \brief simple GPIO read of all halll signals, stores readings into signal_inputs
*/
void read_input_signals(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	signal_inputs[hall_A]=HAL_GPIO_ReadPin(input_HALLA_GPIO_Port, input_HALLA_Pin);
 80008b4:	2101      	movs	r1, #1
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <read_input_signals+0x38>)
 80008b8:	f002 f962 	bl	8002b80 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <read_input_signals+0x3c>)
 80008c2:	701a      	strb	r2, [r3, #0]
	signal_inputs[hall_B]=HAL_GPIO_ReadPin(input_HALLB_GPIO_Port, input_HALLB_Pin);
 80008c4:	2102      	movs	r1, #2
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <read_input_signals+0x40>)
 80008c8:	f002 f95a 	bl	8002b80 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <read_input_signals+0x3c>)
 80008d2:	705a      	strb	r2, [r3, #1]
	signal_inputs[hall_C]=HAL_GPIO_ReadPin(input_HALLC_GPIO_Port, input_HALLC_Pin);
 80008d4:	2101      	movs	r1, #1
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <read_input_signals+0x40>)
 80008d8:	f002 f952 	bl	8002b80 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <read_input_signals+0x3c>)
 80008e2:	709a      	strb	r2, [r3, #2]
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	48000400 	.word	0x48000400
 80008ec:	20000298 	.word	0x20000298
 80008f0:	48000800 	.word	0x48000800

080008f4 <emulated_read_input_signals>:

/**
* \brief simple GPIO read of all halll signals, stores readings into signal_inputs
*/
void emulated_read_input_signals(void){
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	signal_inputs[hall_A]=HALL_A[dma_index];
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <emulated_read_input_signals+0x4c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a11      	ldr	r2, [pc, #68]	; (8000944 <emulated_read_input_signals+0x50>)
 80008fe:	5cd2      	ldrb	r2, [r2, r3]
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <emulated_read_input_signals+0x54>)
 8000902:	701a      	strb	r2, [r3, #0]
	signal_inputs[hall_B]=HALL_B[dma_index];
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a10      	ldr	r2, [pc, #64]	; (800094c <emulated_read_input_signals+0x58>)
 800090a:	5cd2      	ldrb	r2, [r2, r3]
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <emulated_read_input_signals+0x54>)
 800090e:	705a      	strb	r2, [r3, #1]
	signal_inputs[hall_C]=HALL_C[dma_index];
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <emulated_read_input_signals+0x5c>)
 8000916:	5cd2      	ldrb	r2, [r2, r3]
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <emulated_read_input_signals+0x54>)
 800091a:	709a      	strb	r2, [r3, #2]

	if(dma_index>=(sizeof(HALL_A)/sizeof(HALL_A[0]))-1){//taking care of the circular buffer index reset
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <emulated_read_input_signals+0x4c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b82      	cmp	r3, #130	; 0x82
 8000922:	d903      	bls.n	800092c <emulated_read_input_signals+0x38>
		dma_index=0;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
	}else{
		dma_index++;
	}
}
 800092a:	e004      	b.n	8000936 <emulated_read_input_signals+0x42>
		dma_index++;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <emulated_read_input_signals+0x4c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	4a03      	ldr	r2, [pc, #12]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000934:	6013      	str	r3, [r2, #0]
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	200002a0 	.word	0x200002a0
 8000944:	20000008 	.word	0x20000008
 8000948:	20000298 	.word	0x20000298
 800094c:	2000008c 	.word	0x2000008c
 8000950:	20000110 	.word	0x20000110

08000954 <polarice_signals>:
/**
* \brief For a single hall_x signal: apply to signal_inputs the polarization noted by signal_polarity, direct or inverse.
* polarizing should come before swapping.
* \param hall_signals_order hall_x , reffers to the hall signal, could be hall_A/B/C
*/
void polarice_signals(hall_signals_order hall_x){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]

	if(signal_polarity[hall_x]==hall_inverse){		//check for inverse polarity flag
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <polarice_signals+0x40>)
 8000962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10d      	bne.n	8000986 <polarice_signals+0x32>
		if( signal_inputs[hall_x]==GPIO_PIN_RESET){	//inverted signal
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <polarice_signals+0x44>)
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <polarice_signals+0x2a>
			signal_inputs[hall_x]=GPIO_PIN_SET;
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <polarice_signals+0x44>)
 8000978:	2101      	movs	r1, #1
 800097a:	54d1      	strb	r1, [r2, r3]
		}
	}else{											//polarity is not inverted
		//not inverted signal
	}

}
 800097c:	e003      	b.n	8000986 <polarice_signals+0x32>
			signal_inputs[hall_x]=GPIO_PIN_RESET;
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <polarice_signals+0x44>)
 8000982:	2100      	movs	r1, #0
 8000984:	54d1      	strb	r1, [r2, r3]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000290 	.word	0x20000290
 8000998:	20000298 	.word	0x20000298

0800099c <swap_signals>:
/**
* \brief For a single hall_x signal: load signal_outputs with  signal_inputs values in the order noted by signal_order
* swapping should come after polarizing
* \param hall_signals_order hall_x , reffers to the hall signal, could be hall_A/B/C
*/
void swap_signals(hall_signals_order hall_x){
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
	if(signal_order[hall_x]==hall_A){
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <swap_signals+0x5c>)
 80009aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <swap_signals+0x22>
		signal_outputs[hall_x]=signal_inputs[hall_A];
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4a11      	ldr	r2, [pc, #68]	; (80009fc <swap_signals+0x60>)
 80009b6:	7811      	ldrb	r1, [r2, #0]
 80009b8:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <swap_signals+0x64>)
 80009ba:	54d1      	strb	r1, [r2, r3]
	}else if(signal_order[hall_x]==hall_B){
		signal_outputs[hall_x]=signal_inputs[hall_B];
	}else if(signal_order[hall_x]==hall_C){
		signal_outputs[hall_x]=signal_inputs[hall_C];
	}
}
 80009bc:	e016      	b.n	80009ec <swap_signals+0x50>
	}else if(signal_order[hall_x]==hall_B){
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <swap_signals+0x5c>)
 80009c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d105      	bne.n	80009d6 <swap_signals+0x3a>
		signal_outputs[hall_x]=signal_inputs[hall_B];
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <swap_signals+0x60>)
 80009ce:	7851      	ldrb	r1, [r2, #1]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <swap_signals+0x64>)
 80009d2:	54d1      	strb	r1, [r2, r3]
}
 80009d4:	e00a      	b.n	80009ec <swap_signals+0x50>
	}else if(signal_order[hall_x]==hall_C){
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <swap_signals+0x5c>)
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d104      	bne.n	80009ec <swap_signals+0x50>
		signal_outputs[hall_x]=signal_inputs[hall_C];
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <swap_signals+0x60>)
 80009e6:	7891      	ldrb	r1, [r2, #2]
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <swap_signals+0x64>)
 80009ea:	54d1      	strb	r1, [r2, r3]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000298 	.word	0x20000298
 8000a00:	2000029c 	.word	0x2000029c

08000a04 <write_output_signals>:

/**
* \brief simple GPIO write of all hall signals, writes gpios with signal_outputs values
*/
void write_output_signals(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(output_HALLA_GPIO_Port, output_HALLA_Pin, signal_outputs[hall_A]);
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <write_output_signals+0x34>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2110      	movs	r1, #16
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <write_output_signals+0x38>)
 8000a12:	f002 f8cd 	bl	8002bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(output_HALLB_GPIO_Port, output_HALLB_Pin, signal_outputs[hall_B]);
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <write_output_signals+0x34>)
 8000a18:	785b      	ldrb	r3, [r3, #1]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <write_output_signals+0x38>)
 8000a20:	f002 f8c6 	bl	8002bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(output_HALLC_GPIO_Port, output_HALLC_Pin, signal_outputs[hall_C]);
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <write_output_signals+0x34>)
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <write_output_signals+0x38>)
 8000a2e:	f002 f8bf 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000029c 	.word	0x2000029c
 8000a3c:	48000400 	.word	0x48000400

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fead 	bl	80017a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f818 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f7ff fe86 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a50:	f7ff fe42 	bl	80006d8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a54:	f7ff fd5e 	bl	8000514 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000a58:	f000 f976 	bl	8000d48 <MX_LPUART1_UART_Init>
  MX_TIM8_Init();
 8000a5c:	f000 f8fc 	bl	8000c58 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a60:	f000 f9bc 	bl	8000ddc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ui_uart_init();
 8000a64:	f000 fb00 	bl	8001068 <ui_uart_init>
  HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <main+0x38>)
 8000a6a:	f003 f8e9 	bl	8003c40 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ui_uart_listen();
 8000a6e:	f000 fb25 	bl	80010bc <ui_uart_listen>
	emulation();
 8000a72:	f000 fe11 	bl	8001698 <emulation>
	ui_uart_listen();
 8000a76:	e7fa      	b.n	8000a6e <main+0x2e>
 8000a78:	200002a4 	.word	0x200002a4

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2238      	movs	r2, #56	; 0x38
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f005 fbbe 	bl	800620c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f002 f89e 	bl	8002be0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000abe:	2355      	movs	r3, #85	; 0x55
 8000ac0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f938 	bl	8002d48 <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ade:	f000 f818 	bl	8000b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2104      	movs	r1, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fc3c 	bl	8003378 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b06:	f000 f804 	bl	8000b12 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b16:	b672      	cpsid	i
}
 8000b18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b52:	f002 f8e9 	bl	8002d28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 fe4a 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bbe:	f001 fd02 	bl	80025c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000410 	.word	0x20000410

08000bcc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA1_Channel2_IRQHandler+0x10>)
 8000bd2:	f001 fcf8 	bl	80025c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000470 	.word	0x20000470

08000be0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <DMA1_Channel3_IRQHandler+0x10>)
 8000be6:	f001 fcee 	bl	80025c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001d0 	.word	0x200001d0

08000bf4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA1_Channel4_IRQHandler+0x10>)
 8000bfa:	f001 fce4 	bl	80025c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000230 	.word	0x20000230

08000c08 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */
  hall_swapper_twentyKHzinterruptionIRQ();
 8000c0c:	f7ff fe2c 	bl	8000868 <hall_swapper_twentyKHzinterruptionIRQ>
  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM8_UP_IRQHandler+0x14>)
 8000c12:	f003 f8ae 	bl	8003d72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200002a4 	.word	0x200002a4

08000c20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <LPUART1_IRQHandler+0x10>)
 8000c26:	f003 fed7 	bl	80049d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200002f0 	.word	0x200002f0

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c78:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <MX_TIM8_Init+0xa0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = PREESCALER_TIM8;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c7e:	22a9      	movs	r2, #169	; 0xa9
 8000c80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c8a:	2231      	movs	r2, #49	; 0x31
 8000c8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000ca2:	f002 ff75 	bl	8003b90 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000cac:	f7ff ff31 	bl	8000b12 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000cbe:	f003 f9d7 	bl	8004070 <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000cc8:	f7ff ff23 	bl	8000b12 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000cde:	f003 fc1f 	bl	8004520 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000ce8:	f7ff ff13 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200002a4 	.word	0x200002a4
 8000cf8:	40013400 	.word	0x40013400

08000cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d113      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	202c      	movs	r0, #44	; 0x2c
 8000d2c:	f000 fea7 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000d30:	202c      	movs	r0, #44	; 0x2c
 8000d32:	f000 febe 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013400 	.word	0x40013400
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <MX_LPUART1_UART_Init+0x90>)
 8000d50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d8c:	f003 fc90 	bl	80046b0 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f7ff febc 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d9e:	f005 f90e 	bl	8005fbe <HAL_UARTEx_SetTxFifoThreshold>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000da8:	f7ff feb3 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000db0:	f005 f943 	bl	800603a <HAL_UARTEx_SetRxFifoThreshold>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000dba:	f7ff feaa 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000dc0:	f005 f8c4 	bl	8005f4c <HAL_UARTEx_DisableFifoMode>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000dca:	f7ff fea2 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200002f0 	.word	0x200002f0
 8000dd8:	40008000 	.word	0x40008000

08000ddc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000de2:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_USART1_UART_Init+0x94>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e26:	f003 fc43 	bl	80046b0 <HAL_UART_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e30:	f7ff fe6f 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e38:	f005 f8c1 	bl	8005fbe <HAL_UARTEx_SetTxFifoThreshold>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e42:	f7ff fe66 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e4a:	f005 f8f6 	bl	800603a <HAL_UARTEx_SetRxFifoThreshold>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f7ff fe5d 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e5a:	f005 f877 	bl	8005f4c <HAL_UARTEx_DisableFifoMode>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f7ff fe55 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000380 	.word	0x20000380
 8000e70:	40013800 	.word	0x40013800

08000e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b09c      	sub	sp, #112	; 0x70
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	2244      	movs	r2, #68	; 0x44
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 f9b9 	bl	800620c <memset>
  if(uartHandle->Instance==LPUART1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <HAL_UART_MspInit+0x1d4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	f040 8092 	bne.w	8000fca <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fc7c 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff fe28 	bl	8000b12 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec2:	4b62      	ldr	r3, [pc, #392]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec6:	4a61      	ldr	r2, [pc, #388]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a5b      	ldr	r2, [pc, #364]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f02:	230c      	movs	r3, #12
 8000f04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f001 fcb4 	bl	800287c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000f14:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f16:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <HAL_UART_MspInit+0x1e0>)
 8000f18:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f1c:	2222      	movs	r2, #34	; 0x22
 8000f1e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f26:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f38:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f40:	2220      	movs	r2, #32
 8000f42:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f4a:	4841      	ldr	r0, [pc, #260]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f4c:	f001 f958 	bl	8002200 <HAL_DMA_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f56:	f7ff fddc 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a3c      	ldr	r2, [pc, #240]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f5e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f60:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f68:	4a3c      	ldr	r2, [pc, #240]	; (800105c <HAL_UART_MspInit+0x1e8>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f6e:	2223      	movs	r2, #35	; 0x23
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f74:	2210      	movs	r2, #16
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f90:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f9c:	482e      	ldr	r0, [pc, #184]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f9e:	f001 f92f 	bl	8002200 <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000fa8:	f7ff fdb3 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000fb0:	679a      	str	r2, [r3, #120]	; 0x78
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	205b      	movs	r0, #91	; 0x5b
 8000fbe:	f000 fd5e 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000fc2:	205b      	movs	r0, #91	; 0x5b
 8000fc4:	f000 fd75 	bl	8001ab2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fc8:	e03a      	b.n	8001040 <HAL_UART_MspInit+0x1cc>
  else if(uartHandle->Instance==USART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <HAL_UART_MspInit+0x1ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d135      	bne.n	8001040 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fbe5 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8000fec:	f7ff fd91 	bl	8000b12 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_UART_MspInit+0x1d8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_UART_MspInit+0x1d8>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001030:	2307      	movs	r3, #7
 8001032:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001038:	4619      	mov	r1, r3
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <HAL_UART_MspInit+0x1f0>)
 800103c:	f001 fc1e 	bl	800287c <HAL_GPIO_Init>
}
 8001040:	bf00      	nop
 8001042:	3770      	adds	r7, #112	; 0x70
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40008000 	.word	0x40008000
 800104c:	40021000 	.word	0x40021000
 8001050:	20000410 	.word	0x20000410
 8001054:	40020008 	.word	0x40020008
 8001058:	20000470 	.word	0x20000470
 800105c:	4002001c 	.word	0x4002001c
 8001060:	40013800 	.word	0x40013800
 8001064:	48000800 	.word	0x48000800

08001068 <ui_uart_init>:
hall_signals_order decode_char_to_hall_signals_order(uint8_t *pData);
hall_signals_polarity decode_char_to_hall_signals_polarity(uint8_t *pData);
void reset_or_start_uart_DMA_communications();


void ui_uart_init(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_tx,DMA_IT_HT);						//disable DMA half transfer interruption
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <ui_uart_init+0x30>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <ui_uart_init+0x30>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0204 	bic.w	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx,DMA_IT_HT);						//disable DMA half transfer interruption
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <ui_uart_init+0x34>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <ui_uart_init+0x34>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
	reset_or_start_uart_DMA_communications();
 800108c:	f000 fad0 	bl	8001630 <reset_or_start_uart_DMA_communications>
	ui_uart_transmit_initial_message();
 8001090:	f000 f806 	bl	80010a0 <ui_uart_transmit_initial_message>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000470 	.word	0x20000470
 800109c:	20000410 	.word	0x20000410

080010a0 <ui_uart_transmit_initial_message>:

void ui_uart_transmit_initial_message(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&hlpuart1, initialmessage, sizeof(initialmessage));	//just order the DMA to spit out initialmessage trough uart
 80010a4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80010a8:	4902      	ldr	r1, [pc, #8]	; (80010b4 <ui_uart_transmit_initial_message+0x14>)
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <ui_uart_transmit_initial_message+0x18>)
 80010ac:	f003 fb50 	bl	8004750 <HAL_UART_Transmit_DMA>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	080066e8 	.word	0x080066e8
 80010b8:	200002f0 	.word	0x200002f0

080010bc <ui_uart_listen>:

void ui_uart_listen(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if(ui_uart_echo_and_breaklinedetect_rx()==1){
 80010c0:	f000 f824 	bl	800110c <ui_uart_echo_and_breaklinedetect_rx>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d118      	bne.n	80010fc <ui_uart_listen+0x40>

		if(decode_othercommands(rx_buffer, echoed_size)!=1){
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <ui_uart_listen+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <ui_uart_listen+0x48>)
 80010d4:	f000 f95c 	bl	8001390 <decode_othercommands>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d006      	beq.n	80010ec <ui_uart_listen+0x30>
			decode_ABCcommands(rx_buffer, echoed_size);
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <ui_uart_listen+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <ui_uart_listen+0x48>)
 80010e8:	f000 f888 	bl	80011fc <decode_ABCcommands>
		}
		rx_size=0;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <ui_uart_listen+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		echoed_size=0;
 80010f2:	4b03      	ldr	r3, [pc, #12]	; (8001100 <ui_uart_listen+0x44>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		reset_or_start_uart_DMA_communications();
 80010f8:	f000 fa9a 	bl	8001630 <reset_or_start_uart_DMA_communications>
	}
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200005d2 	.word	0x200005d2
 8001104:	200004d0 	.word	0x200004d0
 8001108:	200005d1 	.word	0x200005d1

0800110c <ui_uart_echo_and_breaklinedetect_rx>:

uint32_t ui_uart_echo_and_breaklinedetect_rx(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint32_t linejumpdetected_flag=0;//1= we detected a line jump
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]

	if(rx_flag==1){											//uart received something
 8001116:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <ui_uart_echo_and_breaklinedetect_rx+0xdc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d15e      	bne.n	80011dc <ui_uart_echo_and_breaklinedetect_rx+0xd0>
		if((rx_size-echoed_size)>0){						//check only that new something not the whole RX buffer each time
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	dd4f      	ble.n	80011ce <ui_uart_echo_and_breaklinedetect_rx+0xc2>
			for(uint32_t i=0;i<rx_size-echoed_size;i++){
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	e00e      	b.n	8001152 <ui_uart_echo_and_breaklinedetect_rx+0x46>
				if(rx_buffer[echoed_size+i]=='\r'){			//detect a breakline from the user, that means start decoding
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001140:	5cd3      	ldrb	r3, [r2, r3]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d102      	bne.n	800114c <ui_uart_echo_and_breaklinedetect_rx+0x40>
					linejumpdetected_flag=1;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
					break;
 800114a:	e00c      	b.n	8001166 <ui_uart_echo_and_breaklinedetect_rx+0x5a>
			for(uint32_t i=0;i<rx_size-echoed_size;i++){
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	461a      	mov	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4293      	cmp	r3, r2
 8001164:	d3e6      	bcc.n	8001134 <ui_uart_echo_and_breaklinedetect_rx+0x28>
				}
			}

			if(linejumpdetected_flag==1){
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d11c      	bne.n	80011a6 <ui_uart_echo_and_breaklinedetect_rx+0x9a>
				rx_buffer[rx_size]='\n';
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001174:	210a      	movs	r1, #10
 8001176:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit_DMA(&hlpuart1, &rx_buffer[echoed_size], (rx_size-echoed_size)+1);	//the line jump from putty is actually only '/r', for readability we will add also a '/n'
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001180:	18d1      	adds	r1, r2, r3
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b29b      	uxth	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <ui_uart_echo_and_breaklinedetect_rx+0xec>)
 800119a:	f003 fad9 	bl	8004750 <HAL_UART_Transmit_DMA>
				HAL_Delay(25);
 800119e:	2019      	movs	r0, #25
 80011a0:	f000 fb70 	bl	8001884 <HAL_Delay>
 80011a4:	e013      	b.n	80011ce <ui_uart_echo_and_breaklinedetect_rx+0xc2>
			}else{
				HAL_UART_Transmit_DMA(&hlpuart1, &rx_buffer[echoed_size], (rx_size-echoed_size));
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 80011ae:	18d1      	adds	r1, r2, r3
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <ui_uart_echo_and_breaklinedetect_rx+0xec>)
 80011c4:	f003 fac4 	bl	8004750 <HAL_UART_Transmit_DMA>
				HAL_Delay(25);
 80011c8:	2019      	movs	r0, #25
 80011ca:	f000 fb5b 	bl	8001884 <HAL_Delay>
			}
		}
		echoed_size+=rx_size-echoed_size;				//actualise already echoed and checked for breakline buffer.
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80011d4:	701a      	strb	r2, [r3, #0]
		rx_flag=0;										//reset the uart received flag
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <ui_uart_echo_and_breaklinedetect_rx+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	}

	return linejumpdetected_flag;
 80011dc:	687b      	ldr	r3, [r7, #4]

}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200005d0 	.word	0x200005d0
 80011ec:	200005d1 	.word	0x200005d1
 80011f0:	200005d2 	.word	0x200005d2
 80011f4:	200004d0 	.word	0x200004d0
 80011f8:	200002f0 	.word	0x200002f0

080011fc <decode_ABCcommands>:

uint32_t decode_ABCcommands(uint8_t *pData, uint16_t Size){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]

	hall_signals_order aux_signal_order[3]={hall_order_unknown, hall_order_unknown, hall_order_unknown};
 8001208:	4a5b      	ldr	r2, [pc, #364]	; (8001378 <decode_ABCcommands+0x17c>)
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001212:	6018      	str	r0, [r3, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	8019      	strh	r1, [r3, #0]
	hall_signals_polarity aux_signal_polarity[3]={hall_polarity_unknown, hall_polarity_unknown, hall_polarity_unknown};
 8001218:	4a57      	ldr	r2, [pc, #348]	; (8001378 <decode_ABCcommands+0x17c>)
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	8019      	strh	r1, [r3, #0]
	uint32_t number_of_identified_phases=0;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t hall_order_unknown_flag=0;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t hall_polarity_unknown_flag=0;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t newSize_after_all_deletions=apply_delete_character_to_buffer(pData,Size);
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f923 	bl	8001484 <apply_delete_character_to_buffer>
 800123e:	4603      	mov	r3, r0
 8001240:	83fb      	strh	r3, [r7, #30]


	for (uint32_t i = 0; i < newSize_after_all_deletions; ++i) {
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
 8001246:	e033      	b.n	80012b0 <decode_ABCcommands+0xb4>
		hall_signals_order just_identified_hall_order=decode_char_to_hall_signals_order((uint8_t *)&pData[i]);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	4413      	add	r3, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f96c 	bl	800152c <decode_char_to_hall_signals_order>
 8001254:	4603      	mov	r3, r0
 8001256:	83bb      	strh	r3, [r7, #28]
		if(just_identified_hall_order!=hall_order_unknown){//we got a phase character match!
 8001258:	8bbb      	ldrh	r3, [r7, #28]
 800125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125e:	4293      	cmp	r3, r2
 8001260:	d023      	beq.n	80012aa <decode_ABCcommands+0xae>
			aux_signal_order[number_of_identified_phases]=just_identified_hall_order;
 8001262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	3338      	adds	r3, #56	; 0x38
 8001268:	443b      	add	r3, r7
 800126a:	8bba      	ldrh	r2, [r7, #28]
 800126c:	f823 2c24 	strh.w	r2, [r3, #-36]
			if(i==0){//take care of the 0 index, we dont want to access the array out of bounds
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	2b00      	cmp	r3, #0
 8001274:	d107      	bne.n	8001286 <decode_ABCcommands+0x8a>
				aux_signal_polarity[number_of_identified_phases]=hall_direct;
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3338      	adds	r3, #56	; 0x38
 800127c:	443b      	add	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8001284:	e00e      	b.n	80012a4 <decode_ABCcommands+0xa8>
			}else{
				aux_signal_polarity[number_of_identified_phases]=decode_char_to_hall_signals_polarity((uint8_t *)&pData[i-1]);
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	3b01      	subs	r3, #1
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f9b6 	bl	8001600 <decode_char_to_hall_signals_polarity>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	3338      	adds	r3, #56	; 0x38
 800129e:	443b      	add	r3, r7
 80012a0:	f823 2c2c 	strh.w	r2, [r3, #-44]
			}

			number_of_identified_phases++;
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	3301      	adds	r3, #1
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint32_t i = 0; i < newSize_after_all_deletions; ++i) {
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	3301      	adds	r3, #1
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b0:	8bfb      	ldrh	r3, [r7, #30]
 80012b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d3c7      	bcc.n	8001248 <decode_ABCcommands+0x4c>
		}
	}

	for (uint32_t i = 0; i < 3; ++i) {//check if all values are acceptable
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	e01c      	b.n	80012f8 <decode_ABCcommands+0xfc>
		if(aux_signal_order[i]==hall_order_unknown){
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3338      	adds	r3, #56	; 0x38
 80012c4:	443b      	add	r3, r7
 80012c6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d102      	bne.n	80012d8 <decode_ABCcommands+0xdc>
			hall_order_unknown_flag=1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
			break;			//we found an unacceptable value, early break
 80012d6:	e012      	b.n	80012fe <decode_ABCcommands+0x102>
		}

		if(aux_signal_polarity[i]==hall_polarity_unknown){
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	3338      	adds	r3, #56	; 0x38
 80012de:	443b      	add	r3, r7
 80012e0:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80012e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d102      	bne.n	80012f2 <decode_ABCcommands+0xf6>
			hall_polarity_unknown_flag=1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;			//we found an unacceptable value, early break
 80012f0:	e005      	b.n	80012fe <decode_ABCcommands+0x102>
	for (uint32_t i = 0; i < 3; ++i) {//check if all values are acceptable
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d9df      	bls.n	80012be <decode_ABCcommands+0xc2>
		}
	}

	if(number_of_identified_phases==3 && hall_order_unknown_flag==0 && hall_polarity_unknown_flag==0){
 80012fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001300:	2b03      	cmp	r3, #3
 8001302:	d12c      	bne.n	800135e <decode_ABCcommands+0x162>
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	2b00      	cmp	r3, #0
 8001308:	d129      	bne.n	800135e <decode_ABCcommands+0x162>
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d126      	bne.n	800135e <decode_ABCcommands+0x162>
		//everything went well, unload out new values into the real order and polarity arrays
		for(uint32_t i = 0; i < 3; ++i){
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	e016      	b.n	8001344 <decode_ABCcommands+0x148>
			signal_order[i]=aux_signal_order[i];
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3338      	adds	r3, #56	; 0x38
 800131c:	443b      	add	r3, r7
 800131e:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <decode_ABCcommands+0x180>)
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			signal_polarity[i]=aux_signal_polarity[i];
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	3338      	adds	r3, #56	; 0x38
 8001330:	443b      	add	r3, r7
 8001332:	f833 1c2c 	ldrh.w	r1, [r3, #-44]
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <decode_ABCcommands+0x184>)
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint32_t i = 0; i < 3; ++i){
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	3301      	adds	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d9e5      	bls.n	8001316 <decode_ABCcommands+0x11a>
		}
		HAL_Delay(50);
 800134a:	2032      	movs	r0, #50	; 0x32
 800134c:	f000 fa9a 	bl	8001884 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, okmessage, sizeof(okmessage));
 8001350:	220b      	movs	r2, #11
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <decode_ABCcommands+0x188>)
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <decode_ABCcommands+0x18c>)
 8001356:	f003 f9fb 	bl	8004750 <HAL_UART_Transmit_DMA>
		return 1;
 800135a:	2301      	movs	r3, #1
 800135c:	e008      	b.n	8001370 <decode_ABCcommands+0x174>
	}else{
		HAL_Delay(50);
 800135e:	2032      	movs	r0, #50	; 0x32
 8001360:	f000 fa90 	bl	8001884 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, notokmessage, sizeof(notokmessage));
 8001364:	2222      	movs	r2, #34	; 0x22
 8001366:	4909      	ldr	r1, [pc, #36]	; (800138c <decode_ABCcommands+0x190>)
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <decode_ABCcommands+0x18c>)
 800136a:	f003 f9f1 	bl	8004750 <HAL_UART_Transmit_DMA>
		return 0;
 800136e:	2300      	movs	r3, #0
	}

}
 8001370:	4618      	mov	r0, r3
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	080062a8 	.word	0x080062a8
 800137c:	20000000 	.word	0x20000000
 8001380:	20000290 	.word	0x20000290
 8001384:	08006d28 	.word	0x08006d28
 8001388:	200002f0 	.word	0x200002f0
 800138c:	08006d34 	.word	0x08006d34

08001390 <decode_othercommands>:

uint32_t decode_othercommands(uint8_t *pData, uint16_t Size){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
	char* aux_variable_searching_strings=NULL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	//check for the help command
	aux_variable_searching_strings=strstr((char *)pData, (char *)helpcommand);
 80013a0:	492e      	ldr	r1, [pc, #184]	; (800145c <decode_othercommands+0xcc>)
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f004 ff3a 	bl	800621c <strstr>
 80013a8:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <decode_othercommands+0x36>
		HAL_Delay(50);
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f000 fa67 	bl	8001884 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, helpmessage, sizeof(helpmessage));
 80013b6:	f240 2253 	movw	r2, #595	; 0x253
 80013ba:	4929      	ldr	r1, [pc, #164]	; (8001460 <decode_othercommands+0xd0>)
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <decode_othercommands+0xd4>)
 80013be:	f003 f9c7 	bl	8004750 <HAL_UART_Transmit_DMA>
		return 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e046      	b.n	8001454 <decode_othercommands+0xc4>
	}

	aux_variable_searching_strings=strstr((char *)pData, (char *)resetcommand);
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <decode_othercommands+0xd8>)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f004 ff27 	bl	800621c <strstr>
 80013ce:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d018      	beq.n	8001408 <decode_othercommands+0x78>
		HAL_Delay(50);
 80013d6:	2032      	movs	r0, #50	; 0x32
 80013d8:	f000 fa54 	bl	8001884 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, resetmessage, sizeof(resetmessage));
 80013dc:	2217      	movs	r2, #23
 80013de:	4923      	ldr	r1, [pc, #140]	; (800146c <decode_othercommands+0xdc>)
 80013e0:	4820      	ldr	r0, [pc, #128]	; (8001464 <decode_othercommands+0xd4>)
 80013e2:	f003 f9b5 	bl	8004750 <HAL_UART_Transmit_DMA>
		HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin,GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ec:	4820      	ldr	r0, [pc, #128]	; (8001470 <decode_othercommands+0xe0>)
 80013ee:	f001 fbdf 	bl	8002bb0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f000 fa46 	bl	8001884 <HAL_Delay>
		HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin,GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <decode_othercommands+0xe0>)
 8001400:	f001 fbd6 	bl	8002bb0 <HAL_GPIO_WritePin>
		return 1;
 8001404:	2301      	movs	r3, #1
 8001406:	e025      	b.n	8001454 <decode_othercommands+0xc4>
	}

	aux_variable_searching_strings=strstr((char *)pData, (char *)emulationcommand);
 8001408:	491a      	ldr	r1, [pc, #104]	; (8001474 <decode_othercommands+0xe4>)
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f004 ff06 	bl	800621c <strstr>
 8001410:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01c      	beq.n	8001452 <decode_othercommands+0xc2>
		if(emulator_enabled==0){
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <decode_othercommands+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <decode_othercommands+0xa8>
			emulator_enabled=1;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <decode_othercommands+0xe8>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001426:	2032      	movs	r0, #50	; 0x32
 8001428:	f000 fa2c 	bl	8001884 <HAL_Delay>
			HAL_UART_Transmit_DMA(&hlpuart1, on_emulationmessage, sizeof(on_emulationmessage));
 800142c:	2215      	movs	r2, #21
 800142e:	4913      	ldr	r1, [pc, #76]	; (800147c <decode_othercommands+0xec>)
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <decode_othercommands+0xd4>)
 8001432:	f003 f98d 	bl	8004750 <HAL_UART_Transmit_DMA>
 8001436:	e00a      	b.n	800144e <decode_othercommands+0xbe>
		}else{
			emulator_enabled=0;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <decode_othercommands+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 fa20 	bl	8001884 <HAL_Delay>
			HAL_UART_Transmit_DMA(&hlpuart1, off_emulationmessage, sizeof(off_emulationmessage));
 8001444:	2216      	movs	r2, #22
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <decode_othercommands+0xf0>)
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <decode_othercommands+0xd4>)
 800144a:	f003 f981 	bl	8004750 <HAL_UART_Transmit_DMA>
		}
		return 1;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <decode_othercommands+0xc4>
	}

	return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	08006a68 	.word	0x08006a68
 8001460:	08006a70 	.word	0x08006a70
 8001464:	200002f0 	.word	0x200002f0
 8001468:	08006d00 	.word	0x08006d00
 800146c:	08006d10 	.word	0x08006d10
 8001470:	48000400 	.word	0x48000400
 8001474:	08006cc4 	.word	0x08006cc4
 8001478:	200005d4 	.word	0x200005d4
 800147c:	08006cd0 	.word	0x08006cd0
 8001480:	08006ce8 	.word	0x08006ce8

08001484 <apply_delete_character_to_buffer>:


uint16_t apply_delete_character_to_buffer(uint8_t *pData, uint16_t Size){
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
	uint16_t newSize_after_all_deletions=Size;
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	82fb      	strh	r3, [r7, #22]
	for (uint32_t i = 0; i < Size; ++i) { //apply the "delete"=='/127' characters to received buffer
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e03c      	b.n	8001514 <apply_delete_character_to_buffer+0x90>
		if(pData[i]=='\177'){		//delete found
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b7f      	cmp	r3, #127	; 0x7f
 80014a4:	d133      	bne.n	800150e <apply_delete_character_to_buffer+0x8a>
			if(i==0){				//if the delete was right at the start of the buffer
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d119      	bne.n	80014e0 <apply_delete_character_to_buffer+0x5c>
				newSize_after_all_deletions-=1;
 80014ac:	8afb      	ldrh	r3, [r7, #22]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	82fb      	strh	r3, [r7, #22]
				for (uint32_t j = i; j < Size; ++j) {
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00b      	b.n	80014d0 <apply_delete_character_to_buffer+0x4c>
					pData[j]=pData[j+1]; //just shift the entire buffer effectively deleting the 'delete' character
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3301      	adds	r3, #1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	441a      	add	r2, r3
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	440b      	add	r3, r1
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	701a      	strb	r2, [r3, #0]
				for (uint32_t j = i; j < Size; ++j) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3ef      	bcc.n	80014b8 <apply_delete_character_to_buffer+0x34>
				}
				i--;					 //recheck this index, it might have yet another 'del'
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	3b01      	subs	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	e016      	b.n	800150e <apply_delete_character_to_buffer+0x8a>
			}else{					//if the delete was NOT at the start of the buffer
				newSize_after_all_deletions-=2;
 80014e0:	8afb      	ldrh	r3, [r7, #22]
 80014e2:	3b02      	subs	r3, #2
 80014e4:	82fb      	strh	r3, [r7, #22]
				for (uint32_t j = i; j < Size; ++j) {
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	e00c      	b.n	8001506 <apply_delete_character_to_buffer+0x82>
					pData[j-1]=pData[j+1]; //shift the entire buffer effectively deleting the 'delete' character and the previous one
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3301      	adds	r3, #1
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	441a      	add	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	440b      	add	r3, r1
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	701a      	strb	r2, [r3, #0]
				for (uint32_t j = i; j < Size; ++j) {
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3301      	adds	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3ee      	bcc.n	80014ec <apply_delete_character_to_buffer+0x68>
	for (uint32_t i = 0; i < Size; ++i) { //apply the "delete"=='/127' characters to received buffer
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	3301      	adds	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d3be      	bcc.n	800149a <apply_delete_character_to_buffer+0x16>
				}
			}
		}
	}
	return newSize_after_all_deletions;
 800151c:	8afb      	ldrh	r3, [r7, #22]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <decode_char_to_hall_signals_order>:

hall_signals_order decode_char_to_hall_signals_order(uint8_t *pData){
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	hall_signals_order returning_hallx=hall_order_unknown;
 8001534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001538:	81fb      	strh	r3, [r7, #14]

	switch (*pData) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3b41      	subs	r3, #65	; 0x41
 8001540:	2b22      	cmp	r3, #34	; 0x22
 8001542:	d852      	bhi.n	80015ea <decode_char_to_hall_signals_order+0xbe>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <decode_char_to_hall_signals_order+0x20>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	080015d9 	.word	0x080015d9
 8001550:	080015df 	.word	0x080015df
 8001554:	080015e5 	.word	0x080015e5
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	080015eb 	.word	0x080015eb
 8001584:	080015eb 	.word	0x080015eb
 8001588:	080015eb 	.word	0x080015eb
 800158c:	080015eb 	.word	0x080015eb
 8001590:	080015eb 	.word	0x080015eb
 8001594:	080015eb 	.word	0x080015eb
 8001598:	080015eb 	.word	0x080015eb
 800159c:	080015eb 	.word	0x080015eb
 80015a0:	080015eb 	.word	0x080015eb
 80015a4:	080015eb 	.word	0x080015eb
 80015a8:	080015eb 	.word	0x080015eb
 80015ac:	080015eb 	.word	0x080015eb
 80015b0:	080015eb 	.word	0x080015eb
 80015b4:	080015eb 	.word	0x080015eb
 80015b8:	080015eb 	.word	0x080015eb
 80015bc:	080015eb 	.word	0x080015eb
 80015c0:	080015eb 	.word	0x080015eb
 80015c4:	080015eb 	.word	0x080015eb
 80015c8:	080015eb 	.word	0x080015eb
 80015cc:	080015d9 	.word	0x080015d9
 80015d0:	080015df 	.word	0x080015df
 80015d4:	080015e5 	.word	0x080015e5
		case 'a':
		case 'A':
			returning_hallx=hall_A;
 80015d8:	2300      	movs	r3, #0
 80015da:	81fb      	strh	r3, [r7, #14]
			break;
 80015dc:	e009      	b.n	80015f2 <decode_char_to_hall_signals_order+0xc6>
		case 'b':
		case 'B':
			returning_hallx=hall_B;
 80015de:	2301      	movs	r3, #1
 80015e0:	81fb      	strh	r3, [r7, #14]
			break;
 80015e2:	e006      	b.n	80015f2 <decode_char_to_hall_signals_order+0xc6>
		case 'c':
		case 'C':
			returning_hallx=hall_C;
 80015e4:	2302      	movs	r3, #2
 80015e6:	81fb      	strh	r3, [r7, #14]
			break;
 80015e8:	e003      	b.n	80015f2 <decode_char_to_hall_signals_order+0xc6>
		default:
			returning_hallx=hall_order_unknown;
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	81fb      	strh	r3, [r7, #14]
			break;
 80015f0:	bf00      	nop
	}

	return returning_hallx;
 80015f2:	89fb      	ldrh	r3, [r7, #14]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <decode_char_to_hall_signals_polarity>:

hall_signals_polarity decode_char_to_hall_signals_polarity(uint8_t *pData){
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	hall_signals_polarity returning_hall_polarity=hall_polarity_unknown;
 8001608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160c:	81fb      	strh	r3, [r7, #14]

	switch (*pData) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b21      	cmp	r3, #33	; 0x21
 8001614:	d102      	bne.n	800161c <decode_char_to_hall_signals_polarity+0x1c>
		case '!':
			returning_hall_polarity=hall_inverse;
 8001616:	2301      	movs	r3, #1
 8001618:	81fb      	strh	r3, [r7, #14]
			break;
 800161a:	e002      	b.n	8001622 <decode_char_to_hall_signals_polarity+0x22>
		default:
			returning_hall_polarity=hall_direct;
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
			break;
 8001620:	bf00      	nop
	}

	return returning_hall_polarity;
 8001622:	89fb      	ldrh	r3, [r7, #14]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <reset_or_start_uart_DMA_communications>:

void reset_or_start_uart_DMA_communications(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive(&hlpuart1);
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <reset_or_start_uart_DMA_communications+0x1c>)
 8001636:	f003 f91d 	bl	8004874 <HAL_UART_AbortReceive>
	HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, rx_buffer, sizeof (rx_buffer));	//assign the dma+uart with the reception buffer
 800163a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163e:	4904      	ldr	r1, [pc, #16]	; (8001650 <reset_or_start_uart_DMA_communications+0x20>)
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <reset_or_start_uart_DMA_communications+0x1c>)
 8001642:	f004 fd38 	bl	80060b6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200002f0 	.word	0x200002f0
 8001650:	200004d0 	.word	0x200004d0

08001654 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
	rx_flag=1;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_UARTEx_RxEventCallback+0x28>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
	rx_size=Size;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_UARTEx_RxEventCallback+0x2c>)
 8001680:	701a      	strb	r2, [r3, #0]

}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200005d0 	.word	0x200005d0
 8001694:	200005d1 	.word	0x200005d1

08001698 <emulation>:

/**
* \brief to be placed in main() superloop, constanly on the lookout for changes in emulator_enabled.
* manages the enable/disable function logic.
*/
void emulation(){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	if(emulator_enabled!=old_emulator_enabled){	//there is a change in emulator_enabled
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <emulation+0x30>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <emulation+0x34>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d00c      	beq.n	80016c2 <emulation+0x2a>
		if(emulator_enabled==0){
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <emulation+0x30>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <emulation+0x1e>
			disable_emulator();
 80016b0:	f000 f838 	bl	8001724 <disable_emulator>
 80016b4:	e001      	b.n	80016ba <emulation+0x22>
		}else{
			enable_emulator();
 80016b6:	f000 f80b 	bl	80016d0 <enable_emulator>
		}
		old_emulator_enabled=emulator_enabled;	//update old_emulator_enabled
 80016ba:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <emulation+0x30>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <emulation+0x34>)
 80016c0:	6013      	str	r3, [r2, #0]
	}
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200005d4 	.word	0x200005d4
 80016cc:	200005d8 	.word	0x200005d8

080016d0 <enable_emulator>:

/**
* \brief disables tim8 , configures DAC+DMA in circular mode, reenables tim8
*/
void enable_emulator(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af02      	add	r7, sp, #8
	    dma_index=0;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <enable_emulator+0x40>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim8);
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <enable_emulator+0x44>)
 80016de:	f002 fb19 	bl	8003d14 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)&current_A, sizeof(current_A)/sizeof(current_A[0]), DAC_ALIGN_12B_R);
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2384      	movs	r3, #132	; 0x84
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <enable_emulator+0x48>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <enable_emulator+0x4c>)
 80016ee:	f000 fa1d 	bl	8001b2c <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)&current_B, sizeof(current_B)/sizeof(current_B[0]), DAC_ALIGN_12B_R);
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2384      	movs	r3, #132	; 0x84
 80016f8:	4a09      	ldr	r2, [pc, #36]	; (8001720 <enable_emulator+0x50>)
 80016fa:	2110      	movs	r1, #16
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <enable_emulator+0x4c>)
 80016fe:	f000 fa15 	bl	8001b2c <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption (DAC+DMA trigger)
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <enable_emulator+0x44>)
 8001704:	f002 fa9c 	bl	8003c40 <HAL_TIM_Base_Start_IT>

}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002a0 	.word	0x200002a0
 8001714:	200002a4 	.word	0x200002a4
 8001718:	080062b0 	.word	0x080062b0
 800171c:	200001bc 	.word	0x200001bc
 8001720:	080064c0 	.word	0x080064c0

08001724 <disable_emulator>:

/**
* \brief stops DAC+DMA in circular mode
*/
void disable_emulator(){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	    HAL_TIM_Base_Stop_IT(&htim8);
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <disable_emulator+0x24>)
 800172a:	f002 faf3 	bl	8003d14 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800172e:	2100      	movs	r1, #0
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <disable_emulator+0x28>)
 8001732:	f000 fac9 	bl	8001cc8 <HAL_DAC_Stop_DMA>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 8001736:	2110      	movs	r1, #16
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <disable_emulator+0x28>)
 800173a:	f000 fac5 	bl	8001cc8 <HAL_DAC_Stop_DMA>
		HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption (DAC+DMA trigger)
 800173e:	4802      	ldr	r0, [pc, #8]	; (8001748 <disable_emulator+0x24>)
 8001740:	f002 fa7e 	bl	8003c40 <HAL_TIM_Base_Start_IT>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002a4 	.word	0x200002a4
 800174c:	200001bc 	.word	0x200001bc

08001750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800176c:	4c0b      	ldr	r4, [pc, #44]	; (800179c <LoopForever+0x16>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177a:	f7ff fa5b 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f004 fd63 	bl	8006248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001782:	f7ff f95d 	bl	8000a40 <main>

08001786 <LoopForever>:

LoopForever:
    b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   r0, =_estack
 8001788:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001794:	08006d90 	.word	0x08006d90
  ldr r2, =_sbss
 8001798:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800179c:	200005e0 	.word	0x200005e0

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>

080017a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f95b 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f80e 	bl	80017d4 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	e001      	b.n	80017c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c4:	f7ff f9aa 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c8:	79fb      	ldrb	r3, [r7, #7]

}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_InitTick+0x68>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d022      	beq.n	800182e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_InitTick+0x6c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <HAL_InitTick+0x68>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f966 	bl	8001ace <HAL_SYSTICK_Config>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10f      	bne.n	8001828 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b0f      	cmp	r3, #15
 800180c:	d809      	bhi.n	8001822 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180e:	2200      	movs	r2, #0
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	f04f 30ff 	mov.w	r0, #4294967295
 8001816:	f000 f932 	bl	8001a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_InitTick+0x70>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e007      	b.n	8001832 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
 8001826:	e004      	b.n	8001832 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e001      	b.n	8001832 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000019c 	.word	0x2000019c
 8001840:	20000194 	.word	0x20000194
 8001844:	20000198 	.word	0x20000198

08001848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x1c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x20>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4413      	add	r3, r2
 8001856:	4a03      	ldr	r2, [pc, #12]	; (8001864 <HAL_IncTick+0x1c>)
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	200005dc 	.word	0x200005dc
 8001868:	2000019c 	.word	0x2000019c

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200005dc 	.word	0x200005dc

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d004      	beq.n	80018a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_Delay+0x40>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a8:	bf00      	nop
 80018aa:	f7ff ffdf 	bl	800186c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d8f7      	bhi.n	80018aa <HAL_Delay+0x26>
  {
  }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000019c 	.word	0x2000019c

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff40 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff90 	bl	80019bc <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5f 	bl	8001968 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff33 	bl	800192c <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa4 	bl	8001a24 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e014      	b.n	8001b22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	791b      	ldrb	r3, [r3, #4]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7fe fd47 	bl	800059c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	795b      	ldrb	r3, [r3, #5]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_DAC_Start_DMA+0x1e>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e0ae      	b.n	8001ca8 <HAL_DAC_Start_DMA+0x17c>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2202      	movs	r2, #2
 8001b54:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d12f      	bne.n	8001bbc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <HAL_DAC_Start_DMA+0x184>)
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_DAC_Start_DMA+0x188>)
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_DAC_Start_DMA+0x18c>)
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b82:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d013      	beq.n	8001bb2 <HAL_DAC_Start_DMA+0x86>
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d845      	bhi.n	8001c1c <HAL_DAC_Start_DMA+0xf0>
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_DAC_Start_DMA+0x72>
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001b9c:	e03e      	b.n	8001c1c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	613b      	str	r3, [r7, #16]
        break;
 8001ba6:	e03c      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	330c      	adds	r3, #12
 8001bae:	613b      	str	r3, [r7, #16]
        break;
 8001bb0:	e037      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	613b      	str	r3, [r7, #16]
        break;
 8001bba:	e032      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <HAL_DAC_Start_DMA+0x190>)
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_DAC_Start_DMA+0x194>)
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <HAL_DAC_Start_DMA+0x198>)
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d013      	beq.n	8001c12 <HAL_DAC_Start_DMA+0xe6>
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d817      	bhi.n	8001c20 <HAL_DAC_Start_DMA+0xf4>
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DAC_Start_DMA+0xd2>
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d005      	beq.n	8001c08 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001bfc:	e010      	b.n	8001c20 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3314      	adds	r3, #20
 8001c04:	613b      	str	r3, [r7, #16]
        break;
 8001c06:	e00c      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	613b      	str	r3, [r7, #16]
        break;
 8001c10:	e007      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	331c      	adds	r3, #28
 8001c18:	613b      	str	r3, [r7, #16]
        break;
 8001c1a:	e002      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c1c:	bf00      	nop
 8001c1e:	e000      	b.n	8001c22 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c20:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d111      	bne.n	8001c4c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	f000 fb85 	bl	8002350 <HAL_DMA_Start_IT>
 8001c46:	4603      	mov	r3, r0
 8001c48:	75fb      	strb	r3, [r7, #23]
 8001c4a:	e010      	b.n	8001c6e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68d8      	ldr	r0, [r3, #12]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	f000 fb73 	bl	8002350 <HAL_DMA_Start_IT>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10f      	bne.n	8001c9a <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2201      	movs	r2, #1
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff fdf6 	bl	8001884 <HAL_Delay>
 8001c98:	e005      	b.n	8001ca6 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f043 0204 	orr.w	r2, r3, #4
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	080020ed 	.word	0x080020ed
 8001cb4:	0800210f 	.word	0x0800210f
 8001cb8:	0800212b 	.word	0x0800212b
 8001cbc:	08002195 	.word	0x08002195
 8001cc0:	080021b7 	.word	0x080021b7
 8001cc4:	080021d3 	.word	0x080021d3

08001cc8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fdb9 	bl	8001884 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fb92 	bl	8002446 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e00c      	b.n	8001d4e <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fb84 	bl	8002446 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001d4c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	795b      	ldrb	r3, [r3, #5]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_DAC_ConfigChannel+0x18>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e192      	b.n	80020da <HAL_DAC_ConfigChannel+0x33e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d174      	bne.n	8001eb2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fd50 	bl	800186c <HAL_GetTick>
 8001dcc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d134      	bne.n	8001e3e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001dd4:	e011      	b.n	8001dfa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001dd6:	f7ff fd49 	bl	800186c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d90a      	bls.n	8001dfa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f043 0208 	orr.w	r2, r3, #8
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2203      	movs	r2, #3
 8001df4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e16f      	b.n	80020da <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e6      	bne.n	8001dd6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff fd3b 	bl	8001884 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
 8001e18:	e01e      	b.n	8001e58 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e1a:	f7ff fd27 	bl	800186c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d90a      	bls.n	8001e3e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f043 0208 	orr.w	r2, r3, #8
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2203      	movs	r2, #3
 8001e38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e14d      	b.n	80020da <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dbe8      	blt.n	8001e1a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff fd1b 	bl	8001884 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	ea02 0103 	and.w	r1, r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	21ff      	movs	r1, #255	; 0xff
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	ea02 0103 	and.w	r1, r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d11d      	bne.n	8001ef6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	4313      	orrs	r3, r2
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2207      	movs	r2, #7
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0e:	4013      	ands	r3, r2
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	e00f      	b.n	8001f40 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d102      	bne.n	8001f2e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	e008      	b.n	8001f40 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001f36:	2301      	movs	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	e001      	b.n	8001f40 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f62:	4013      	ands	r3, r2
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	791b      	ldrb	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_DAC_ConfigChannel+0x1d8>
 8001f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f72:	e000      	b.n	8001f76 <HAL_DAC_ConfigChannel+0x1da>
 8001f74:	2300      	movs	r3, #0
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	4013      	ands	r3, r2
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	795b      	ldrb	r3, [r3, #5]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_DAC_ConfigChannel+0x204>
 8001f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9e:	e000      	b.n	8001fa2 <HAL_DAC_ConfigChannel+0x206>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d114      	bne.n	8001fe2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001fb8:	f001 fb7c 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 8001fbc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_DAC_ConfigChannel+0x348>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d904      	bls.n	8001fd0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e00f      	b.n	8001ff0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_DAC_ConfigChannel+0x34c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d90a      	bls.n	8001fee <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	e006      	b.n	8001ff0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	e000      	b.n	8001ff0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001fee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	4313      	orrs	r3, r2
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	f640 72fe 	movw	r2, #4094	; 0xffe
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	4013      	ands	r3, r2
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	4313      	orrs	r3, r2
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002064:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	22c0      	movs	r2, #192	; 0xc0
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43da      	mvns	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	400a      	ands	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	f640 710f 	movw	r1, #3855	; 0xf0f
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	ea02 0103 	and.w	r1, r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	09896800 	.word	0x09896800
 80020e8:	04c4b400 	.word	0x04c4b400

080020ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7ff fe2f 	bl	8001d5e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	711a      	strb	r2, [r3, #4]
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fe28 	bl	8001d72 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f043 0204 	orr.w	r2, r3, #4
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff fe1e 	bl	8001d86 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	711a      	strb	r2, [r3, #4]
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ffd8 	bl	8002158 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	711a      	strb	r2, [r3, #4]
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff ffd1 	bl	800216c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ffc7 	bl	8002180 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	711a      	strb	r2, [r3, #4]
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e08d      	b.n	800232e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_DMA_Init+0x138>)
 800221a:	429a      	cmp	r2, r3
 800221c:	d80f      	bhi.n	800223e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b45      	ldr	r3, [pc, #276]	; (800233c <HAL_DMA_Init+0x13c>)
 8002226:	4413      	add	r3, r2
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <HAL_DMA_Init+0x140>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a42      	ldr	r2, [pc, #264]	; (8002344 <HAL_DMA_Init+0x144>)
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
 800223c:	e00e      	b.n	800225c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_DMA_Init+0x148>)
 8002246:	4413      	add	r3, r2
 8002248:	4a3d      	ldr	r2, [pc, #244]	; (8002340 <HAL_DMA_Init+0x140>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	009a      	lsls	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a3c      	ldr	r2, [pc, #240]	; (800234c <HAL_DMA_Init+0x14c>)
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa82 	bl	80027b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022bc:	d102      	bne.n	80022c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_DMA_Init+0x104>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d80c      	bhi.n	8002304 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 faa2 	bl	8002834 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e008      	b.n	8002316 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40020407 	.word	0x40020407
 800233c:	bffdfff8 	.word	0xbffdfff8
 8002340:	cccccccd 	.word	0xcccccccd
 8002344:	40020000 	.word	0x40020000
 8002348:	bffdfbf8 	.word	0xbffdfbf8
 800234c:	40020400 	.word	0x40020400

08002350 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Start_IT+0x20>
 800236c:	2302      	movs	r3, #2
 800236e:	e066      	b.n	800243e <HAL_DMA_Start_IT+0xee>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d155      	bne.n	8002430 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f9c7 	bl	800273c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 020e 	orr.w	r2, r2, #14
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e00f      	b.n	80023e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 020a 	orr.w	r2, r2, #10
 80023e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002404:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e005      	b.n	800243c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002438:	2302      	movs	r3, #2
 800243a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d005      	beq.n	800246a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2204      	movs	r2, #4
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e037      	b.n	80024da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 020e 	bic.w	r2, r2, #14
 8002478:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002488:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2101      	movs	r1, #1
 80024a8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d00d      	beq.n	800252c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2204      	movs	r2, #4
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e047      	b.n	80025bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020e 	bic.w	r2, r2, #14
 800253a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800255a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f202 	lsl.w	r2, r1, r2
 800256e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002578:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002590:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800259a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    }
  }
  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2204      	movs	r2, #4
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d026      	beq.n	8002640 <HAL_DMA_IRQHandler+0x7a>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d021      	beq.n	8002640 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0204 	bic.w	r2, r2, #4
 8002618:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	2104      	movs	r1, #4
 8002628:	fa01 f202 	lsl.w	r2, r1, r2
 800262c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	2b00      	cmp	r3, #0
 8002634:	d071      	beq.n	800271a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800263e:	e06c      	b.n	800271a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2202      	movs	r2, #2
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02e      	beq.n	80026b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d029      	beq.n	80026b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020a 	bic.w	r2, r2, #10
 800267a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2102      	movs	r1, #2
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d038      	beq.n	800271a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80026b0:	e033      	b.n	800271a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2208      	movs	r2, #8
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d025      	beq.n	800271c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800271a:	bf00      	nop
 800271c:	bf00      	nop
}
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002752:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002764:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f003 021f 	and.w	r2, r3, #31
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d108      	bne.n	800279c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800279a:	e007      	b.n	80027ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d802      	bhi.n	80027d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	e001      	b.n	80027d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027d4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3b08      	subs	r3, #8
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	009a      	lsls	r2, r3, #2
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002802:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2201      	movs	r2, #1
 800280c:	409a      	lsls	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40020407 	.word	0x40020407
 8002824:	40020800 	.word	0x40020800
 8002828:	40020820 	.word	0x40020820
 800282c:	cccccccd 	.word	0xcccccccd
 8002830:	40020880 	.word	0x40020880

08002834 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a08      	ldr	r2, [pc, #32]	; (8002878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3b01      	subs	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2201      	movs	r2, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	1000823f 	.word	0x1000823f
 8002878:	40020940 	.word	0x40020940

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800288a:	e15a      	b.n	8002b42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 814c 	beq.w	8002b3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d005      	beq.n	80028bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d130      	bne.n	800291e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0201 	and.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b03      	cmp	r3, #3
 8002928:	d017      	beq.n	800295a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d123      	bne.n	80029ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	08da      	lsrs	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3208      	adds	r2, #8
 800296e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	6939      	ldr	r1, [r7, #16]
 80029aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0203 	and.w	r2, r3, #3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80a6 	beq.w	8002b3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f0:	4b5b      	ldr	r3, [pc, #364]	; (8002b60 <HAL_GPIO_Init+0x2e4>)
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	4a5a      	ldr	r2, [pc, #360]	; (8002b60 <HAL_GPIO_Init+0x2e4>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6613      	str	r3, [r2, #96]	; 0x60
 80029fc:	4b58      	ldr	r3, [pc, #352]	; (8002b60 <HAL_GPIO_Init+0x2e4>)
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a08:	4a56      	ldr	r2, [pc, #344]	; (8002b64 <HAL_GPIO_Init+0x2e8>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a32:	d01f      	beq.n	8002a74 <HAL_GPIO_Init+0x1f8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_GPIO_Init+0x2ec>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d019      	beq.n	8002a70 <HAL_GPIO_Init+0x1f4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <HAL_GPIO_Init+0x2f0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_GPIO_Init+0x1f0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4a      	ldr	r2, [pc, #296]	; (8002b70 <HAL_GPIO_Init+0x2f4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00d      	beq.n	8002a68 <HAL_GPIO_Init+0x1ec>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_GPIO_Init+0x2f8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <HAL_GPIO_Init+0x1e8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a48      	ldr	r2, [pc, #288]	; (8002b78 <HAL_GPIO_Init+0x2fc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_GPIO_Init+0x1e4>
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	e00a      	b.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a60:	2306      	movs	r3, #6
 8002a62:	e008      	b.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a64:	2304      	movs	r3, #4
 8002a66:	e006      	b.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e004      	b.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e002      	b.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_GPIO_Init+0x1fa>
 8002a74:	2300      	movs	r3, #0
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	f002 0203 	and.w	r2, r2, #3
 8002a7c:	0092      	lsls	r2, r2, #2
 8002a7e:	4093      	lsls	r3, r2
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a86:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_GPIO_Init+0x2e8>)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a94:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ab8:	4a30      	ldr	r2, [pc, #192]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002abe:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ae2:	4a26      	ldr	r2, [pc, #152]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b36:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_GPIO_Init+0x300>)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f ae9d 	bne.w	800288c <HAL_GPIO_Init+0x10>
  }
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	48000800 	.word	0x48000800
 8002b70:	48000c00 	.word	0x48000c00
 8002b74:	48001000 	.word	0x48001000
 8002b78:	48001400 	.word	0x48001400
 8002b7c:	40010400 	.word	0x40010400

08002b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	887b      	ldrh	r3, [r7, #2]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e001      	b.n	8002ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d141      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bee:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d131      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bfc:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c02:	4a46      	ldr	r2, [pc, #280]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0c:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c14:	4a41      	ldr	r2, [pc, #260]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2232      	movs	r2, #50	; 0x32
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	4a3f      	ldr	r2, [pc, #252]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c32:	e002      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c46:	d102      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f2      	bne.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5a:	d158      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e057      	b.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c66:	4a2d      	ldr	r2, [pc, #180]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c70:	e04d      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c78:	d141      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d131      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2232      	movs	r2, #50	; 0x32
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cbe:	e002      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d102      	bne.n	8002cda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f2      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d112      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e011      	b.n	8002d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cfc:	e007      	b.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	20000194 	.word	0x20000194
 8002d24:	431bde83 	.word	0x431bde83

08002d28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d36:	6093      	str	r3, [r2, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40007000 	.word	0x40007000

08002d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e306      	b.n	8003368 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d075      	beq.n	8002e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b97      	ldr	r3, [pc, #604]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b94      	ldr	r3, [pc, #592]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3e>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d002      	beq.n	8002d8c <HAL_RCC_OscConfig+0x44>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	4b8d      	ldr	r3, [pc, #564]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x108>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d157      	bne.n	8002e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e2e1      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x74>
 8002dae:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a84      	ldr	r2, [pc, #528]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0xb0>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x98>
 8002dc6:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7e      	ldr	r2, [pc, #504]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7b      	ldr	r2, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0xb0>
 8002de0:	4b78      	ldr	r3, [pc, #480]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a77      	ldr	r2, [pc, #476]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b75      	ldr	r3, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a74      	ldr	r2, [pc, #464]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fd34 	bl	800186c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fd30 	bl	800186c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e2a6      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1a:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xc0>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fd20 	bl	800186c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe fd1c 	bl	800186c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e292      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e42:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0xe8>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d075      	beq.n	8002f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e68:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d102      	bne.n	8002e7e <HAL_RCC_OscConfig+0x136>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_OscConfig+0x13c>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11f      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e84:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x154>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e265      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4946      	ldr	r1, [pc, #280]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fc8d 	bl	80017d4 <HAL_InitTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d043      	beq.n	8002f48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e251      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fcc8 	bl	800186c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fcc4 	bl	800186c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e23a      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
 8002f12:	e01a      	b.n	8002f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fca4 	bl	800186c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fca0 	bl	800186c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e216      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1e0>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d041      	beq.n	8002fda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fc7d 	bl	800186c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe fc79 	bl	800186c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1ef      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ef      	beq.n	8002f76 <HAL_RCC_OscConfig+0x22e>
 8002f96:	e020      	b.n	8002fda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_RCC_OscConfig+0x27c>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fc60 	bl	800186c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fae:	e00d      	b.n	8002fcc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fc5c 	bl	800186c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d906      	bls.n	8002fcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1d2      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	20000198 	.word	0x20000198
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	4b8c      	ldr	r3, [pc, #560]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ea      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a6 	beq.w	8003134 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fec:	4b84      	ldr	r3, [pc, #528]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2b4>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x2b6>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	4a7e      	ldr	r2, [pc, #504]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6593      	str	r3, [r2, #88]	; 0x58
 800300e:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301e:	4b79      	ldr	r3, [pc, #484]	; (8003204 <HAL_RCC_OscConfig+0x4bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x4bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a75      	ldr	r2, [pc, #468]	; (8003204 <HAL_RCC_OscConfig+0x4bc>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe fc19 	bl	800186c <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe fc15 	bl	800186c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e18b      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003050:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_OscConfig+0x4bc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d108      	bne.n	8003076 <HAL_RCC_OscConfig+0x32e>
 8003064:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003074:	e024      	b.n	80030c0 <HAL_RCC_OscConfig+0x378>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d110      	bne.n	80030a0 <HAL_RCC_OscConfig+0x358>
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	4a5e      	ldr	r2, [pc, #376]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308e:	4b5c      	ldr	r3, [pc, #368]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4a5a      	ldr	r2, [pc, #360]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309e:	e00f      	b.n	80030c0 <HAL_RCC_OscConfig+0x378>
 80030a0:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a56      	ldr	r2, [pc, #344]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fbd0 	bl	800186c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe fbcc 	bl	800186c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e140      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	4b46      	ldr	r3, [pc, #280]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ed      	beq.n	80030d0 <HAL_RCC_OscConfig+0x388>
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe fbb9 	bl	800186c <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fbb5 	bl	800186c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e129      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ed      	bne.n	80030fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	4a34      	ldr	r2, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03c      	beq.n	80031ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800314a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800314e:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fb88 	bl	800186c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003160:	f7fe fb84 	bl	800186c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0fa      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCC_OscConfig+0x418>
 8003180:	e01b      	b.n	80031ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 8003184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe fb6b 	bl	800186c <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319a:	f7fe fb67 	bl	800186c <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0dd      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031ac:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ef      	bne.n	800319a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80d1 	beq.w	8003366 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	f000 808b 	beq.w	80032e8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d15e      	bne.n	8003298 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fb41 	bl	800186c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	e00c      	b.n	8003208 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fb3d 	bl	800186c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d905      	bls.n	8003208 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0b3      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ec      	bne.n	80031ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x62c>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6a11      	ldr	r1, [r2, #32]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003224:	3a01      	subs	r2, #1
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800322e:	0212      	lsls	r2, r2, #8
 8003230:	4311      	orrs	r1, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003236:	0852      	lsrs	r2, r2, #1
 8003238:	3a01      	subs	r2, #1
 800323a:	0552      	lsls	r2, r2, #21
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003242:	0852      	lsrs	r2, r2, #1
 8003244:	3a01      	subs	r2, #1
 8003246:	0652      	lsls	r2, r2, #25
 8003248:	4311      	orrs	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800324e:	06d2      	lsls	r2, r2, #27
 8003250:	430a      	orrs	r2, r1
 8003252:	4947      	ldr	r1, [pc, #284]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 8003254:	4313      	orrs	r3, r2
 8003256:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003258:	4b45      	ldr	r3, [pc, #276]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a44      	ldr	r2, [pc, #272]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800326a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fafc 	bl	800186c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe faf8 	bl	800186c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e06e      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	4b39      	ldr	r3, [pc, #228]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x530>
 8003296:	e066      	b.n	8003366 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 800329e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a2e      	ldr	r2, [pc, #184]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 80032b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fad4 	bl	800186c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fad0 	bl	800186c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e046      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x580>
 80032e6:	e03e      	b.n	8003366 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e039      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_RCC_OscConfig+0x628>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	429a      	cmp	r2, r3
 8003306:	d12c      	bne.n	8003362 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	3b01      	subs	r3, #1
 8003314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d123      	bne.n	8003362 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d11b      	bne.n	8003362 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d113      	bne.n	8003362 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d109      	bne.n	8003362 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	019f800c 	.word	0x019f800c

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e11e      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b91      	ldr	r3, [pc, #580]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b8e      	ldr	r3, [pc, #568]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 020f 	bic.w	r2, r3, #15
 80033a6:	498c      	ldr	r1, [pc, #560]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b8a      	ldr	r3, [pc, #552]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e106      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d073      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d129      	bne.n	8003428 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0f4      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033e4:	f000 f99e 	bl	8003724 <RCC_GetSysClockFreqFromPLLSource>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4a7c      	ldr	r2, [pc, #496]	; (80035e0 <HAL_RCC_ClockConfig+0x268>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d93f      	bls.n	8003472 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033f2:	4b7a      	ldr	r3, [pc, #488]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003406:	2b00      	cmp	r3, #0
 8003408:	d033      	beq.n	8003472 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d12f      	bne.n	8003472 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003412:	4b72      	ldr	r3, [pc, #456]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341a:	4a70      	ldr	r2, [pc, #448]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e024      	b.n	8003472 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003430:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0c6      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003440:	4b66      	ldr	r3, [pc, #408]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0be      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003450:	f000 f8ce 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 8003454:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_RCC_ClockConfig+0x268>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d909      	bls.n	8003472 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003466:	4a5d      	ldr	r2, [pc, #372]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003472:	4b5a      	ldr	r3, [pc, #360]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4957      	ldr	r1, [pc, #348]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003484:	f7fe f9f2 	bl	800186c <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348c:	f7fe f9ee 	bl	800186c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e095      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 020c 	and.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1eb      	bne.n	800348c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d023      	beq.n	8003508 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034cc:	4b43      	ldr	r3, [pc, #268]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a42      	ldr	r2, [pc, #264]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80034d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034ec:	4a3b      	ldr	r2, [pc, #236]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80034ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4936      	ldr	r1, [pc, #216]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
 8003506:	e008      	b.n	800351a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d105      	bne.n	800351a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4a32      	ldr	r2, [pc, #200]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003518:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351a:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d21d      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 020f 	bic.w	r2, r3, #15
 8003530:	4929      	ldr	r1, [pc, #164]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003538:	f7fe f998 	bl	800186c <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe f994 	bl	800186c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e03b      	b.n	80035ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_ClockConfig+0x260>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d1ed      	bne.n	8003540 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4917      	ldr	r1, [pc, #92]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490f      	ldr	r1, [pc, #60]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a2:	f000 f825 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_RCC_ClockConfig+0x264>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490c      	ldr	r1, [pc, #48]	; (80035e4 <HAL_RCC_ClockConfig+0x26c>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x270>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe f904 	bl	80017d4 <HAL_InitTick>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40021000 	.word	0x40021000
 80035e0:	04c4b400 	.word	0x04c4b400
 80035e4:	080066d0 	.word	0x080066d0
 80035e8:	20000194 	.word	0x20000194
 80035ec:	20000198 	.word	0x20000198

080035f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035f6:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d102      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003602:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	e047      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d102      	bne.n	800361a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e03e      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d136      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d10c      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	0a12      	lsrs	r2, r2, #8
 8003652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	617b      	str	r3, [r7, #20]
      break;
 800365c:	e00c      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800365e:	4a13      	ldr	r2, [pc, #76]	; (80036ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003668:	68d2      	ldr	r2, [r2, #12]
 800366a:	0a12      	lsrs	r2, r2, #8
 800366c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
      break;
 8003676:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	0e5b      	lsrs	r3, r3, #25
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	3301      	adds	r3, #1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e001      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003698:	693b      	ldr	r3, [r7, #16]
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	016e3600 	.word	0x016e3600

080036b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000194 	.word	0x20000194

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4904      	ldr	r1, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	080066e0 	.word	0x080066e0

080036f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036fc:	f7ff ffda 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0adb      	lsrs	r3, r3, #11
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4904      	ldr	r1, [pc, #16]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	080066e0 	.word	0x080066e0

08003724 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d10c      	bne.n	8003762 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003752:	68d2      	ldr	r2, [r2, #12]
 8003754:	0a12      	lsrs	r2, r2, #8
 8003756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	617b      	str	r3, [r7, #20]
    break;
 8003760:	e00c      	b.n	800377c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800376c:	68d2      	ldr	r2, [r2, #12]
 800376e:	0a12      	lsrs	r2, r2, #8
 8003770:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    break;
 800377a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0e5b      	lsrs	r3, r3, #25
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	3301      	adds	r3, #1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003796:	687b      	ldr	r3, [r7, #4]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40021000 	.word	0x40021000
 80037a8:	016e3600 	.word	0x016e3600
 80037ac:	00f42400 	.word	0x00f42400

080037b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b8:	2300      	movs	r3, #0
 80037ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037bc:	2300      	movs	r3, #0
 80037be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8098 	beq.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10d      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	4a3f      	ldr	r2, [pc, #252]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ea:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f6:	2301      	movs	r3, #1
 80037f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fa:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a39      	ldr	r2, [pc, #228]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003806:	f7fe f831 	bl	800186c <HAL_GetTick>
 800380a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800380c:	e009      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fe f82d 	bl	800186c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d902      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	74fb      	strb	r3, [r7, #19]
        break;
 8003820:	e005      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003822:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0ef      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d159      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	429a      	cmp	r2, r3
 800384e:	d019      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d016      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fd ffed 	bl	800186c <HAL_GetTick>
 8003892:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003894:	e00b      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fd ffe9 	bl	800186c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d902      	bls.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	74fb      	strb	r3, [r7, #19]
            break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ec      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038d8:	e008      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	74bb      	strb	r3, [r7, #18]
 80038de:	e005      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ec:	7c7b      	ldrb	r3, [r7, #17]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f2:	4ba6      	ldr	r3, [pc, #664]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	4aa5      	ldr	r2, [pc, #660]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800390a:	4ba0      	ldr	r3, [pc, #640]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f023 0203 	bic.w	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	499c      	ldr	r1, [pc, #624]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800392c:	4b97      	ldr	r3, [pc, #604]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f023 020c 	bic.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4994      	ldr	r1, [pc, #592]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800394e:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	498b      	ldr	r1, [pc, #556]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4983      	ldr	r1, [pc, #524]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003992:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	497a      	ldr	r1, [pc, #488]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b4:	4b75      	ldr	r3, [pc, #468]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	4972      	ldr	r1, [pc, #456]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4969      	ldr	r1, [pc, #420]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f8:	4b64      	ldr	r3, [pc, #400]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4961      	ldr	r1, [pc, #388]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	4958      	ldr	r1, [pc, #352]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d015      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	4950      	ldr	r1, [pc, #320]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a74:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4942      	ldr	r1, [pc, #264]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a94:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a3c      	ldr	r2, [pc, #240]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aac:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	4934      	ldr	r1, [pc, #208]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003acc:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a2e      	ldr	r2, [pc, #184]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ad6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	4926      	ldr	r1, [pc, #152]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d105      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	4918      	ldr	r1, [pc, #96]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b80:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e049      	b.n	8003c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd f8a0 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f000 fb7a 	bl	80042c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e04a      	b.n	8003cee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d013      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x6c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d115      	bne.n	8003cd8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d015      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0xaa>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d011      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	e008      	b.n	8003cea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	00010007 	.word	0x00010007

08003d14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10f      	bne.n	8003d5c <HAL_TIM_Base_Stop_IT+0x48>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	f244 4344 	movw	r3, #17476	; 0x4444
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_TIM_Base_Stop_IT+0x48>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d122      	bne.n	8003dce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d11b      	bne.n	8003dce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0202 	mvn.w	r2, #2
 8003d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa69 	bl	800428c <HAL_TIM_IC_CaptureCallback>
 8003dba:	e005      	b.n	8003dc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa5b 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa6c 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d122      	bne.n	8003e22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d11b      	bne.n	8003e22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f06f 0204 	mvn.w	r2, #4
 8003df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa3f 	bl	800428c <HAL_TIM_IC_CaptureCallback>
 8003e0e:	e005      	b.n	8003e1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fa31 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa42 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d122      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d11b      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f06f 0208 	mvn.w	r2, #8
 8003e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fa15 	bl	800428c <HAL_TIM_IC_CaptureCallback>
 8003e62:	e005      	b.n	8003e70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fa07 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa18 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d122      	bne.n	8003eca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d11b      	bne.n	8003eca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0210 	mvn.w	r2, #16
 8003e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f9eb 	bl	800428c <HAL_TIM_IC_CaptureCallback>
 8003eb6:	e005      	b.n	8003ec4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9dd 	bl	8004278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9ee 	bl	80042a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0201 	mvn.w	r2, #1
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f9b7 	bl	8004264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb8b 	bl	8004638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fb7e 	bl	800464c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d10e      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	d107      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f99c 	bl	80042b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d10e      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d107      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0220 	mvn.w	r2, #32
 8003fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fb3e 	bl	8004624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb6:	d10f      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fb44 	bl	8004660 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe6:	d10f      	bne.n	8004008 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fb36 	bl	8004674 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004016:	d10f      	bne.n	8004038 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fb28 	bl	8004688 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004046:	d10f      	bne.n	8004068 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fb1a 	bl	800469c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIM_ConfigClockSource+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e0de      	b.n	800424a <HAL_TIM_ConfigClockSource+0x1da>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80040aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a63      	ldr	r2, [pc, #396]	; (8004254 <HAL_TIM_ConfigClockSource+0x1e4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	f000 80a9 	beq.w	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 80040cc:	4a61      	ldr	r2, [pc, #388]	; (8004254 <HAL_TIM_ConfigClockSource+0x1e4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	f200 80ae 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 80040d4:	4a60      	ldr	r2, [pc, #384]	; (8004258 <HAL_TIM_ConfigClockSource+0x1e8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	f000 80a1 	beq.w	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 80040dc:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_TIM_ConfigClockSource+0x1e8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	f200 80a6 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 80040e4:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_TIM_ConfigClockSource+0x1ec>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	f000 8099 	beq.w	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 80040ec:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_TIM_ConfigClockSource+0x1ec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f200 809e 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 80040f4:	4a5a      	ldr	r2, [pc, #360]	; (8004260 <HAL_TIM_ConfigClockSource+0x1f0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	f000 8091 	beq.w	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 80040fc:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_TIM_ConfigClockSource+0x1f0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	f200 8096 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004104:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004108:	f000 8089 	beq.w	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 800410c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004110:	f200 808e 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004118:	d03e      	beq.n	8004198 <HAL_TIM_ConfigClockSource+0x128>
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	f200 8087 	bhi.w	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	f000 8086 	beq.w	8004236 <HAL_TIM_ConfigClockSource+0x1c6>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d87f      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004130:	2b70      	cmp	r3, #112	; 0x70
 8004132:	d01a      	beq.n	800416a <HAL_TIM_ConfigClockSource+0xfa>
 8004134:	2b70      	cmp	r3, #112	; 0x70
 8004136:	d87b      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004138:	2b60      	cmp	r3, #96	; 0x60
 800413a:	d050      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x16e>
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d877      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004140:	2b50      	cmp	r3, #80	; 0x50
 8004142:	d03c      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x14e>
 8004144:	2b50      	cmp	r3, #80	; 0x50
 8004146:	d873      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d058      	beq.n	80041fe <HAL_TIM_ConfigClockSource+0x18e>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d86f      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004150:	2b30      	cmp	r3, #48	; 0x30
 8004152:	d064      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d86b      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004158:	2b20      	cmp	r3, #32
 800415a:	d060      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d867      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05c      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 8004164:	2b10      	cmp	r3, #16
 8004166:	d05a      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1ae>
 8004168:	e062      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f000 f9b1 	bl	80044e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800418c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	609a      	str	r2, [r3, #8]
      break;
 8004196:	e04f      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6899      	ldr	r1, [r3, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f000 f99a 	bl	80044e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ba:	609a      	str	r2, [r3, #8]
      break;
 80041bc:	e03c      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 f90c 	bl	80043e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2150      	movs	r1, #80	; 0x50
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f965 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 80041dc:	e02c      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f000 f92b 	bl	8004446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2160      	movs	r1, #96	; 0x60
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f955 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 80041fc:	e01c      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6859      	ldr	r1, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	461a      	mov	r2, r3
 800420c:	f000 f8ec 	bl	80043e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2140      	movs	r1, #64	; 0x40
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f945 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 800421c:	e00c      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 f93c 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 800422e:	e003      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
      break;
 8004234:	e000      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	00100070 	.word	0x00100070
 8004258:	00100040 	.word	0x00100040
 800425c:	00100030 	.word	0x00100030
 8004260:	00100020 	.word	0x00100020

08004264 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <TIM_Base_SetConfig+0x104>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a39      	ldr	r2, [pc, #228]	; (80043d0 <TIM_Base_SetConfig+0x108>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a38      	ldr	r2, [pc, #224]	; (80043d4 <TIM_Base_SetConfig+0x10c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x38>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a37      	ldr	r2, [pc, #220]	; (80043d8 <TIM_Base_SetConfig+0x110>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2d      	ldr	r2, [pc, #180]	; (80043cc <TIM_Base_SetConfig+0x104>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01b      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d017      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <TIM_Base_SetConfig+0x108>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <TIM_Base_SetConfig+0x10c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00f      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <TIM_Base_SetConfig+0x110>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <TIM_Base_SetConfig+0x114>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <TIM_Base_SetConfig+0x118>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <TIM_Base_SetConfig+0x11c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <TIM_Base_SetConfig+0x104>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00f      	beq.n	80043b0 <TIM_Base_SetConfig+0xe8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <TIM_Base_SetConfig+0x110>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00b      	beq.n	80043b0 <TIM_Base_SetConfig+0xe8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <TIM_Base_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_Base_SetConfig+0xe8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a0f      	ldr	r2, [pc, #60]	; (80043e0 <TIM_Base_SetConfig+0x118>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0xe8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <TIM_Base_SetConfig+0x11c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40013400 	.word	0x40013400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800

080043e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 030a 	bic.w	r3, r3, #10
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0210 	bic.w	r2, r3, #16
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f043 0307 	orr.w	r3, r3, #7
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	431a      	orrs	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004534:	2302      	movs	r3, #2
 8004536:	e065      	b.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d013      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a12      	ldr	r2, [pc, #72]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a13      	ldr	r2, [pc, #76]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10c      	bne.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40013400 	.word	0x40013400
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40014000 	.word	0x40014000

08004624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e042      	b.n	8004748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc fbcd 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2224      	movs	r2, #36	; 0x24
 80046de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fcb0 	bl	8005058 <UART_SetConfig>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e022      	b.n	8004748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 ff70 	bl	80055f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800471e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800472e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fff7 	bl	8005734 <UART_CheckIdleState>
 8004746:	4603      	mov	r3, r0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004764:	2b20      	cmp	r3, #32
 8004766:	d17a      	bne.n	800485e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Transmit_DMA+0x24>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e073      	b.n	8004860 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_UART_Transmit_DMA+0x36>
 8004782:	2302      	movs	r3, #2
 8004784:	e06c      	b.n	8004860 <HAL_UART_Transmit_DMA+0x110>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2221      	movs	r2, #33	; 0x21
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02c      	beq.n	8004816 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c0:	4a29      	ldr	r2, [pc, #164]	; (8004868 <HAL_UART_Transmit_DMA+0x118>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c8:	4a28      	ldr	r2, [pc, #160]	; (800486c <HAL_UART_Transmit_DMA+0x11c>)
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d0:	4a27      	ldr	r2, [pc, #156]	; (8004870 <HAL_UART_Transmit_DMA+0x120>)
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d8:	2200      	movs	r2, #0
 80047da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	4619      	mov	r1, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3328      	adds	r3, #40	; 0x28
 80047ec:	461a      	mov	r2, r3
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	f7fd fdae 	bl	8002350 <HAL_DMA_Start_IT>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2210      	movs	r2, #16
 80047fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e024      	b.n	8004860 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2240      	movs	r2, #64	; 0x40
 800481c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3308      	adds	r3, #8
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	623a      	str	r2, [r7, #32]
 8004848:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	69f9      	ldr	r1, [r7, #28]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	61bb      	str	r3, [r7, #24]
   return(result);
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e5      	bne.n	8004826 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3728      	adds	r7, #40	; 0x28
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	08005bfb 	.word	0x08005bfb
 800486c:	08005c95 	.word	0x08005c95
 8004870:	08005e0f 	.word	0x08005e0f

08004874 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b09a      	sub	sp, #104	; 0x68
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004890:	667b      	str	r3, [r7, #100]	; 0x64
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489a:	657b      	str	r3, [r7, #84]	; 0x54
 800489c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e6      	bne.n	800487c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	663b      	str	r3, [r7, #96]	; 0x60
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048d2:	643a      	str	r2, [r7, #64]	; 0x40
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e3      	bne.n	80048ae <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d118      	bne.n	8004920 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d137      	bne.n	800499e <HAL_UART_AbortReceive+0x12a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3308      	adds	r3, #8
 8004934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	60bb      	str	r3, [r7, #8]
   return(result);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	65bb      	str	r3, [r7, #88]	; 0x58
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3308      	adds	r3, #8
 800494c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494e:	61ba      	str	r2, [r7, #24]
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d019      	beq.n	800499e <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496e:	2200      	movs	r2, #0
 8004970:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004976:	4618      	mov	r0, r3
 8004978:	f7fd fd65 	bl	8002446 <HAL_DMA_Abort>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004986:	4618      	mov	r0, r3
 8004988:	f7fd fecc 	bl	8002724 <HAL_DMA_GetError>
 800498c:	4603      	mov	r3, r0
 800498e:	2b20      	cmp	r3, #32
 8004990:	d105      	bne.n	800499e <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2210      	movs	r2, #16
 8004996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e017      	b.n	80049ce <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	220f      	movs	r2, #15
 80049ac:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0208 	orr.w	r2, r2, #8
 80049bc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3768      	adds	r7, #104	; 0x68
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b0ba      	sub	sp, #232	; 0xe8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a02:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a06:	4013      	ands	r3, r2
 8004a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11b      	bne.n	8004a4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 82d6 	beq.w	8004fee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
      }
      return;
 8004a4a:	e2d0      	b.n	8004fee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 811f 	beq.w	8004c94 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a5a:	4b8b      	ldr	r3, [pc, #556]	; (8004c88 <HAL_UART_IRQHandler+0x2b0>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a66:	4b89      	ldr	r3, [pc, #548]	; (8004c8c <HAL_UART_IRQHandler+0x2b4>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8112 	beq.w	8004c94 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d011      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xc8>
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a96:	f043 0201 	orr.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d011      	beq.n	8004ad0 <HAL_UART_IRQHandler+0xf8>
 8004aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2202      	movs	r2, #2
 8004abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac6:	f043 0204 	orr.w	r2, r3, #4
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d011      	beq.n	8004b00 <HAL_UART_IRQHandler+0x128>
 8004adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2204      	movs	r2, #4
 8004aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af6:	f043 0202 	orr.w	r2, r3, #2
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d017      	beq.n	8004b3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b1c:	4b5a      	ldr	r3, [pc, #360]	; (8004c88 <HAL_UART_IRQHandler+0x2b0>)
 8004b1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2208      	movs	r2, #8
 8004b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b32:	f043 0208 	orr.w	r2, r3, #8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <HAL_UART_IRQHandler+0x196>
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00c      	beq.n	8004b6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 823c 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d013      	beq.n	8004bae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04f      	beq.n	8004c72 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 ffab 	bl	8005b2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d141      	bne.n	8004c6a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1d9      	bne.n	8004be6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d013      	beq.n	8004c62 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3e:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <HAL_UART_IRQHandler+0x2b8>)
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd fc56 	bl	80024f8 <HAL_DMA_Abort_IT>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d017      	beq.n	8004c82 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e00f      	b.n	8004c82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f9ee 	bl	8005044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	e00b      	b.n	8004c82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9ea 	bl	8005044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	e007      	b.n	8004c82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9e6 	bl	8005044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c80:	e1b7      	b.n	8004ff2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c82:	bf00      	nop
    return;
 8004c84:	e1b5      	b.n	8004ff2 <HAL_UART_IRQHandler+0x61a>
 8004c86:	bf00      	nop
 8004c88:	10000001 	.word	0x10000001
 8004c8c:	04000120 	.word	0x04000120
 8004c90:	08005e8f 	.word	0x08005e8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 814a 	bne.w	8004f32 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8143 	beq.w	8004f32 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 813c 	beq.w	8004f32 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	f040 80b5 	bne.w	8004e3c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8187 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f080 817f 	bcs.w	8004ff6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 8086 	bne.w	8004e20 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1da      	bne.n	8004d14 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e1      	bne.n	8004d5e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e3      	bne.n	8004d9a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e4      	bne.n	8004de0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd fb13 	bl	8002446 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc fc17 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e3a:	e0dc      	b.n	8004ff6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80ce 	beq.w	8004ffa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004e5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80c9 	beq.w	8004ffa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e4      	bne.n	8004e68 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	623b      	str	r3, [r7, #32]
   return(result);
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e1      	bne.n	8004e9e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e4      	bne.n	8004eee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fb9c 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f30:	e063      	b.n	8004ffa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <HAL_UART_IRQHandler+0x584>
 8004f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 ffdb 	bl	8005f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f5a:	e051      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d014      	beq.n	8004f92 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d03a      	beq.n	8004ffe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
    }
    return;
 8004f90:	e035      	b.n	8004ffe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x5da>
 8004f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 ff85 	bl	8005eba <UART_EndTransmit_IT>
    return;
 8004fb0:	e026      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x5fa>
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 ffb4 	bl	8005f38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fd0:	e016      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d010      	beq.n	8005000 <HAL_UART_IRQHandler+0x628>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da0c      	bge.n	8005000 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 ff9c 	bl	8005f24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fec:	e008      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
      return;
 8004fee:	bf00      	nop
 8004ff0:	e006      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
    return;
 8004ff2:	bf00      	nop
 8004ff4:	e004      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
      return;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
      return;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <HAL_UART_IRQHandler+0x628>
    return;
 8004ffe:	bf00      	nop
  }
}
 8005000:	37e8      	adds	r7, #232	; 0xe8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop

08005008 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b08c      	sub	sp, #48	; 0x30
 800505e:	af00      	add	r7, sp, #0
 8005060:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	431a      	orrs	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	431a      	orrs	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4313      	orrs	r3, r2
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4bab      	ldr	r3, [pc, #684]	; (8005334 <UART_SetConfig+0x2dc>)
 8005088:	4013      	ands	r3, r2
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005090:	430b      	orrs	r3, r1
 8005092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4aa0      	ldr	r2, [pc, #640]	; (8005338 <UART_SetConfig+0x2e0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c0:	4313      	orrs	r3, r2
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d8:	430b      	orrs	r3, r1
 80050da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	f023 010f 	bic.w	r1, r3, #15
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a91      	ldr	r2, [pc, #580]	; (800533c <UART_SetConfig+0x2e4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d125      	bne.n	8005148 <UART_SetConfig+0xf0>
 80050fc:	4b90      	ldr	r3, [pc, #576]	; (8005340 <UART_SetConfig+0x2e8>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b03      	cmp	r3, #3
 8005108:	d81a      	bhi.n	8005140 <UART_SetConfig+0xe8>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0xb8>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005121 	.word	0x08005121
 8005114:	08005131 	.word	0x08005131
 8005118:	08005129 	.word	0x08005129
 800511c:	08005139 	.word	0x08005139
 8005120:	2301      	movs	r3, #1
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e0d6      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005128:	2302      	movs	r3, #2
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e0d2      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005130:	2304      	movs	r3, #4
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005136:	e0ce      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005138:	2308      	movs	r3, #8
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513e:	e0ca      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005140:	2310      	movs	r3, #16
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005146:	e0c6      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a7d      	ldr	r2, [pc, #500]	; (8005344 <UART_SetConfig+0x2ec>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d138      	bne.n	80051c4 <UART_SetConfig+0x16c>
 8005152:	4b7b      	ldr	r3, [pc, #492]	; (8005340 <UART_SetConfig+0x2e8>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d82d      	bhi.n	80051bc <UART_SetConfig+0x164>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <UART_SetConfig+0x110>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	0800519d 	.word	0x0800519d
 800516c:	080051bd 	.word	0x080051bd
 8005170:	080051bd 	.word	0x080051bd
 8005174:	080051bd 	.word	0x080051bd
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051bd 	.word	0x080051bd
 8005180:	080051bd 	.word	0x080051bd
 8005184:	080051bd 	.word	0x080051bd
 8005188:	080051a5 	.word	0x080051a5
 800518c:	080051bd 	.word	0x080051bd
 8005190:	080051bd 	.word	0x080051bd
 8005194:	080051bd 	.word	0x080051bd
 8005198:	080051b5 	.word	0x080051b5
 800519c:	2300      	movs	r3, #0
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e098      	b.n	80052d6 <UART_SetConfig+0x27e>
 80051a4:	2302      	movs	r3, #2
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e094      	b.n	80052d6 <UART_SetConfig+0x27e>
 80051ac:	2304      	movs	r3, #4
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b2:	e090      	b.n	80052d6 <UART_SetConfig+0x27e>
 80051b4:	2308      	movs	r3, #8
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ba:	e08c      	b.n	80052d6 <UART_SetConfig+0x27e>
 80051bc:	2310      	movs	r3, #16
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c2:	e088      	b.n	80052d6 <UART_SetConfig+0x27e>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a5f      	ldr	r2, [pc, #380]	; (8005348 <UART_SetConfig+0x2f0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d125      	bne.n	800521a <UART_SetConfig+0x1c2>
 80051ce:	4b5c      	ldr	r3, [pc, #368]	; (8005340 <UART_SetConfig+0x2e8>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	d016      	beq.n	800520a <UART_SetConfig+0x1b2>
 80051dc:	2b30      	cmp	r3, #48	; 0x30
 80051de:	d818      	bhi.n	8005212 <UART_SetConfig+0x1ba>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d00a      	beq.n	80051fa <UART_SetConfig+0x1a2>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d814      	bhi.n	8005212 <UART_SetConfig+0x1ba>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <UART_SetConfig+0x19a>
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d008      	beq.n	8005202 <UART_SetConfig+0x1aa>
 80051f0:	e00f      	b.n	8005212 <UART_SetConfig+0x1ba>
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f8:	e06d      	b.n	80052d6 <UART_SetConfig+0x27e>
 80051fa:	2302      	movs	r3, #2
 80051fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005200:	e069      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005202:	2304      	movs	r3, #4
 8005204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005208:	e065      	b.n	80052d6 <UART_SetConfig+0x27e>
 800520a:	2308      	movs	r3, #8
 800520c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005210:	e061      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005212:	2310      	movs	r3, #16
 8005214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005218:	e05d      	b.n	80052d6 <UART_SetConfig+0x27e>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4b      	ldr	r2, [pc, #300]	; (800534c <UART_SetConfig+0x2f4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d125      	bne.n	8005270 <UART_SetConfig+0x218>
 8005224:	4b46      	ldr	r3, [pc, #280]	; (8005340 <UART_SetConfig+0x2e8>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800522e:	2bc0      	cmp	r3, #192	; 0xc0
 8005230:	d016      	beq.n	8005260 <UART_SetConfig+0x208>
 8005232:	2bc0      	cmp	r3, #192	; 0xc0
 8005234:	d818      	bhi.n	8005268 <UART_SetConfig+0x210>
 8005236:	2b80      	cmp	r3, #128	; 0x80
 8005238:	d00a      	beq.n	8005250 <UART_SetConfig+0x1f8>
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d814      	bhi.n	8005268 <UART_SetConfig+0x210>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <UART_SetConfig+0x1f0>
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d008      	beq.n	8005258 <UART_SetConfig+0x200>
 8005246:	e00f      	b.n	8005268 <UART_SetConfig+0x210>
 8005248:	2300      	movs	r3, #0
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800524e:	e042      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005250:	2302      	movs	r3, #2
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e03e      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005258:	2304      	movs	r3, #4
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e03a      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005260:	2308      	movs	r3, #8
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e036      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005268:	2310      	movs	r3, #16
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e032      	b.n	80052d6 <UART_SetConfig+0x27e>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a30      	ldr	r2, [pc, #192]	; (8005338 <UART_SetConfig+0x2e0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d12a      	bne.n	80052d0 <UART_SetConfig+0x278>
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <UART_SetConfig+0x2e8>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005288:	d01a      	beq.n	80052c0 <UART_SetConfig+0x268>
 800528a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800528e:	d81b      	bhi.n	80052c8 <UART_SetConfig+0x270>
 8005290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005294:	d00c      	beq.n	80052b0 <UART_SetConfig+0x258>
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529a:	d815      	bhi.n	80052c8 <UART_SetConfig+0x270>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <UART_SetConfig+0x250>
 80052a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a4:	d008      	beq.n	80052b8 <UART_SetConfig+0x260>
 80052a6:	e00f      	b.n	80052c8 <UART_SetConfig+0x270>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ae:	e012      	b.n	80052d6 <UART_SetConfig+0x27e>
 80052b0:	2302      	movs	r3, #2
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e00e      	b.n	80052d6 <UART_SetConfig+0x27e>
 80052b8:	2304      	movs	r3, #4
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e00a      	b.n	80052d6 <UART_SetConfig+0x27e>
 80052c0:	2308      	movs	r3, #8
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e006      	b.n	80052d6 <UART_SetConfig+0x27e>
 80052c8:	2310      	movs	r3, #16
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e002      	b.n	80052d6 <UART_SetConfig+0x27e>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <UART_SetConfig+0x2e0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	f040 80a8 	bne.w	8005432 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d834      	bhi.n	8005354 <UART_SetConfig+0x2fc>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0x298>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005315 	.word	0x08005315
 80052f4:	08005355 	.word	0x08005355
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005355 	.word	0x08005355
 8005300:	08005323 	.word	0x08005323
 8005304:	08005355 	.word	0x08005355
 8005308:	08005355 	.word	0x08005355
 800530c:	08005355 	.word	0x08005355
 8005310:	0800532b 	.word	0x0800532b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe f9da 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800531a:	e021      	b.n	8005360 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <UART_SetConfig+0x2f8>)
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005320:	e01e      	b.n	8005360 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005322:	f7fe f965 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 8005326:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005328:	e01a      	b.n	8005360 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005330:	e016      	b.n	8005360 <UART_SetConfig+0x308>
 8005332:	bf00      	nop
 8005334:	cfff69f3 	.word	0xcfff69f3
 8005338:	40008000 	.word	0x40008000
 800533c:	40013800 	.word	0x40013800
 8005340:	40021000 	.word	0x40021000
 8005344:	40004400 	.word	0x40004400
 8005348:	40004800 	.word	0x40004800
 800534c:	40004c00 	.word	0x40004c00
 8005350:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800535e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 812a 	beq.w	80055bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	4a9e      	ldr	r2, [pc, #632]	; (80055e8 <UART_SetConfig+0x590>)
 800536e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005372:	461a      	mov	r2, r3
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	fbb3 f3f2 	udiv	r3, r3, r2
 800537a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	429a      	cmp	r2, r3
 800538a:	d305      	bcc.n	8005398 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	429a      	cmp	r2, r3
 8005396:	d903      	bls.n	80053a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800539e:	e10d      	b.n	80055bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	2200      	movs	r2, #0
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	60fa      	str	r2, [r7, #12]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	4a8e      	ldr	r2, [pc, #568]	; (80055e8 <UART_SetConfig+0x590>)
 80053ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2200      	movs	r2, #0
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053c2:	f7fa ff29 	bl	8000218 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	020b      	lsls	r3, r1, #8
 80053d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053dc:	0202      	lsls	r2, r0, #8
 80053de:	6979      	ldr	r1, [r7, #20]
 80053e0:	6849      	ldr	r1, [r1, #4]
 80053e2:	0849      	lsrs	r1, r1, #1
 80053e4:	2000      	movs	r0, #0
 80053e6:	460c      	mov	r4, r1
 80053e8:	4605      	mov	r5, r0
 80053ea:	eb12 0804 	adds.w	r8, r2, r4
 80053ee:	eb43 0905 	adc.w	r9, r3, r5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	469a      	mov	sl, r3
 80053fa:	4693      	mov	fp, r2
 80053fc:	4652      	mov	r2, sl
 80053fe:	465b      	mov	r3, fp
 8005400:	4640      	mov	r0, r8
 8005402:	4649      	mov	r1, r9
 8005404:	f7fa ff08 	bl	8000218 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005416:	d308      	bcc.n	800542a <UART_SetConfig+0x3d2>
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541e:	d204      	bcs.n	800542a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e0c8      	b.n	80055bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005430:	e0c4      	b.n	80055bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543a:	d167      	bne.n	800550c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800543c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005440:	2b08      	cmp	r3, #8
 8005442:	d828      	bhi.n	8005496 <UART_SetConfig+0x43e>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x3f4>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	08005471 	.word	0x08005471
 8005450:	08005479 	.word	0x08005479
 8005454:	08005481 	.word	0x08005481
 8005458:	08005497 	.word	0x08005497
 800545c:	08005487 	.word	0x08005487
 8005460:	08005497 	.word	0x08005497
 8005464:	08005497 	.word	0x08005497
 8005468:	08005497 	.word	0x08005497
 800546c:	0800548f 	.word	0x0800548f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005470:	f7fe f92c 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8005474:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005476:	e014      	b.n	80054a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005478:	f7fe f93e 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 800547c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800547e:	e010      	b.n	80054a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005480:	4b5a      	ldr	r3, [pc, #360]	; (80055ec <UART_SetConfig+0x594>)
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005484:	e00d      	b.n	80054a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005486:	f7fe f8b3 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800548c:	e009      	b.n	80054a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005494:	e005      	b.n	80054a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8089 	beq.w	80055bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	4a4e      	ldr	r2, [pc, #312]	; (80055e8 <UART_SetConfig+0x590>)
 80054b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054bc:	005a      	lsls	r2, r3, #1
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	441a      	add	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	d916      	bls.n	8005504 <UART_SetConfig+0x4ac>
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054dc:	d212      	bcs.n	8005504 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f023 030f 	bic.w	r3, r3, #15
 80054e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	8bfb      	ldrh	r3, [r7, #30]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	8bfa      	ldrh	r2, [r7, #30]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	e05b      	b.n	80055bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800550a:	e057      	b.n	80055bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800550c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005510:	2b08      	cmp	r3, #8
 8005512:	d828      	bhi.n	8005566 <UART_SetConfig+0x50e>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <UART_SetConfig+0x4c4>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005541 	.word	0x08005541
 8005520:	08005549 	.word	0x08005549
 8005524:	08005551 	.word	0x08005551
 8005528:	08005567 	.word	0x08005567
 800552c:	08005557 	.word	0x08005557
 8005530:	08005567 	.word	0x08005567
 8005534:	08005567 	.word	0x08005567
 8005538:	08005567 	.word	0x08005567
 800553c:	0800555f 	.word	0x0800555f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005540:	f7fe f8c4 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8005544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005546:	e014      	b.n	8005572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005548:	f7fe f8d6 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 800554c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800554e:	e010      	b.n	8005572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005550:	4b26      	ldr	r3, [pc, #152]	; (80055ec <UART_SetConfig+0x594>)
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005554:	e00d      	b.n	8005572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005556:	f7fe f84b 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 800555a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800555c:	e009      	b.n	8005572 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005564:	e005      	b.n	8005572 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005570:	bf00      	nop
    }

    if (pclk != 0U)
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d021      	beq.n	80055bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <UART_SetConfig+0x590>)
 800557e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005582:	461a      	mov	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	fbb3 f2f2 	udiv	r2, r3, r2
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	441a      	add	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d909      	bls.n	80055b6 <UART_SetConfig+0x55e>
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d205      	bcs.n	80055b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e002      	b.n	80055bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2201      	movs	r2, #1
 80055c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2200      	movs	r2, #0
 80055d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3730      	adds	r7, #48	; 0x30
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	08006d58 	.word	0x08006d58
 80055ec:	00f42400 	.word	0x00f42400

080055f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ee:	d10a      	bne.n	8005706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	605a      	str	r2, [r3, #4]
  }
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005744:	f7fc f892 	bl	800186c <HAL_GetTick>
 8005748:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d10e      	bne.n	8005776 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f82f 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e025      	b.n	80057c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b04      	cmp	r3, #4
 8005782:	d10e      	bne.n	80057a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f819 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e00f      	b.n	80057c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b09c      	sub	sp, #112	; 0x70
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	e0a9      	b.n	8005930 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	f000 80a5 	beq.w	8005930 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e6:	f7fc f841 	bl	800186c <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <UART_WaitOnFlagUntilTimeout+0x32>
 80057f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d140      	bne.n	800587e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800580a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005810:	667b      	str	r3, [r7, #100]	; 0x64
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e6      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3308      	adds	r3, #8
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	663b      	str	r3, [r7, #96]	; 0x60
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800584e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800585c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e069      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d051      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589a:	d149      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e6      	bne.n	80058a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	613b      	str	r3, [r7, #16]
   return(result);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058f8:	623a      	str	r2, [r7, #32]
 80058fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	61bb      	str	r3, [r7, #24]
   return(result);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e010      	b.n	8005952 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	429a      	cmp	r2, r3
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	f43f af46 	beq.w	80057dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3770      	adds	r7, #112	; 0x70
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b096      	sub	sp, #88	; 0x58
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2222      	movs	r2, #34	; 0x22
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02c      	beq.n	80059ea <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	4a42      	ldr	r2, [pc, #264]	; (8005aa0 <UART_Start_Receive_DMA+0x144>)
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599c:	4a41      	ldr	r2, [pc, #260]	; (8005aa4 <UART_Start_Receive_DMA+0x148>)
 800599e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a4:	4a40      	ldr	r2, [pc, #256]	; (8005aa8 <UART_Start_Receive_DMA+0x14c>)
 80059a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ac:	2200      	movs	r2, #0
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3324      	adds	r3, #36	; 0x24
 80059ba:	4619      	mov	r1, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	461a      	mov	r2, r3
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	f7fc fcc4 	bl	8002350 <HAL_DMA_Start_IT>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2210      	movs	r2, #16
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e055      	b.n	8005a96 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a1a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e6      	bne.n	80059fa <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	653b      	str	r3, [r7, #80]	; 0x50
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a80:	623a      	str	r2, [r7, #32]
 8005a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3758      	adds	r7, #88	; 0x58
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08005cb1 	.word	0x08005cb1
 8005aa4:	08005dd7 	.word	0x08005dd7
 8005aa8:	08005e0f 	.word	0x08005e0f

08005aac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b08f      	sub	sp, #60	; 0x3c
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e6      	bne.n	8005ab4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b06:	61ba      	str	r2, [r7, #24]
 8005b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	613b      	str	r3, [r7, #16]
   return(result);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005b22:	bf00      	nop
 8005b24:	373c      	adds	r7, #60	; 0x3c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b095      	sub	sp, #84	; 0x54
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40
 8005b56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e6      	bne.n	8005b36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d118      	bne.n	8005bda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f023 0310 	bic.w	r3, r3, #16
 8005bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	; 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b090      	sub	sp, #64	; 0x40
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d137      	bne.n	8005c86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e6      	bne.n	8005c52 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c84:	e002      	b.n	8005c8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005c86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005c88:	f7fb fce4 	bl	8001654 <HAL_UART_TxCpltCallback>
}
 8005c8c:	bf00      	nop
 8005c8e:	3740      	adds	r7, #64	; 0x40
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff f9b0 	bl	8005008 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b09c      	sub	sp, #112	; 0x70
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d171      	bne.n	8005db0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e6      	bne.n	8005cd4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3308      	adds	r3, #8
 8005d24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d26:	647a      	str	r2, [r7, #68]	; 0x44
 8005d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e5      	bne.n	8005d06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	663b      	str	r3, [r7, #96]	; 0x60
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d5a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e5      	bne.n	8005d3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	2220      	movs	r2, #32
 8005d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d118      	bne.n	8005db0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	69b9      	ldr	r1, [r7, #24]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	617b      	str	r3, [r7, #20]
   return(result);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e6      	bne.n	8005d7e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dc2:	f7fb fc51 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dc6:	e002      	b.n	8005dce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005dc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dca:	f7ff f927 	bl	800501c <HAL_UART_RxCpltCallback>
}
 8005dce:	bf00      	nop
 8005dd0:	3770      	adds	r7, #112	; 0x70
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d109      	bne.n	8005e00 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4619      	mov	r1, r3
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7fb fc35 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dfe:	e002      	b.n	8005e06 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff f915 	bl	8005030 <HAL_UART_RxHalfCpltCallback>
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b086      	sub	sp, #24
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e22:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b80      	cmp	r3, #128	; 0x80
 8005e38:	d109      	bne.n	8005e4e <UART_DMAError+0x40>
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b21      	cmp	r3, #33	; 0x21
 8005e3e:	d106      	bne.n	8005e4e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005e48:	6978      	ldr	r0, [r7, #20]
 8005e4a:	f7ff fe2f 	bl	8005aac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d109      	bne.n	8005e70 <UART_DMAError+0x62>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b22      	cmp	r3, #34	; 0x22
 8005e60:	d106      	bne.n	8005e70 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f7ff fe5f 	bl	8005b2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e76:	f043 0210 	orr.w	r2, r3, #16
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e80:	6978      	ldr	r0, [r7, #20]
 8005e82:	f7ff f8df 	bl	8005044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff f8c9 	bl	8005044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	613b      	str	r3, [r7, #16]
   return(result);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e6      	bne.n	8005ec2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb fba6 	bl	8001654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f08:	bf00      	nop
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e027      	b.n	8005fb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2224      	movs	r2, #36	; 0x24
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e02d      	b.n	8006032 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2224      	movs	r2, #36	; 0x24
 8005fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8ac 	bl	8006170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800604e:	2302      	movs	r3, #2
 8006050:	e02d      	b.n	80060ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2224      	movs	r2, #36	; 0x24
 800605e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f86e 	bl	8006170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08c      	sub	sp, #48	; 0x30
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d14a      	bne.n	8006164 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e043      	b.n	8006166 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e03c      	b.n	8006166 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	461a      	mov	r2, r3
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff fc2b 	bl	800595c <UART_Start_Receive_DMA>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800610c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006110:	2b00      	cmp	r3, #0
 8006112:	d124      	bne.n	800615e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d11d      	bne.n	8006158 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2210      	movs	r2, #16
 8006122:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	617b      	str	r3, [r7, #20]
   return(result);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f043 0310 	orr.w	r3, r3, #16
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6a39      	ldr	r1, [r7, #32]
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e6      	bne.n	8006124 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006156:	e002      	b.n	800615e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800615e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006162:	e000      	b.n	8006166 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006164:	2302      	movs	r3, #2
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	3730      	adds	r7, #48	; 0x30
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617c:	2b00      	cmp	r3, #0
 800617e:	d108      	bne.n	8006192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006190:	e031      	b.n	80061f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006192:	2308      	movs	r3, #8
 8006194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006196:	2308      	movs	r3, #8
 8006198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	0e5b      	lsrs	r3, r3, #25
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	0f5b      	lsrs	r3, r3, #29
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	7b3a      	ldrb	r2, [r7, #12]
 80061be:	4911      	ldr	r1, [pc, #68]	; (8006204 <UARTEx_SetNbDataToProcess+0x94>)
 80061c0:	5c8a      	ldrb	r2, [r1, r2]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061c6:	7b3a      	ldrb	r2, [r7, #12]
 80061c8:	490f      	ldr	r1, [pc, #60]	; (8006208 <UARTEx_SetNbDataToProcess+0x98>)
 80061ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	7b7a      	ldrb	r2, [r7, #13]
 80061dc:	4909      	ldr	r1, [pc, #36]	; (8006204 <UARTEx_SetNbDataToProcess+0x94>)
 80061de:	5c8a      	ldrb	r2, [r1, r2]
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061e4:	7b7a      	ldrb	r2, [r7, #13]
 80061e6:	4908      	ldr	r1, [pc, #32]	; (8006208 <UARTEx_SetNbDataToProcess+0x98>)
 80061e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	08006d70 	.word	0x08006d70
 8006208:	08006d78 	.word	0x08006d78

0800620c <memset>:
 800620c:	4402      	add	r2, r0
 800620e:	4603      	mov	r3, r0
 8006210:	4293      	cmp	r3, r2
 8006212:	d100      	bne.n	8006216 <memset+0xa>
 8006214:	4770      	bx	lr
 8006216:	f803 1b01 	strb.w	r1, [r3], #1
 800621a:	e7f9      	b.n	8006210 <memset+0x4>

0800621c <strstr>:
 800621c:	780a      	ldrb	r2, [r1, #0]
 800621e:	b570      	push	{r4, r5, r6, lr}
 8006220:	b96a      	cbnz	r2, 800623e <strstr+0x22>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	429a      	cmp	r2, r3
 8006226:	d109      	bne.n	800623c <strstr+0x20>
 8006228:	460c      	mov	r4, r1
 800622a:	4605      	mov	r5, r0
 800622c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f6      	beq.n	8006222 <strstr+0x6>
 8006234:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006238:	429e      	cmp	r6, r3
 800623a:	d0f7      	beq.n	800622c <strstr+0x10>
 800623c:	3001      	adds	r0, #1
 800623e:	7803      	ldrb	r3, [r0, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1ef      	bne.n	8006224 <strstr+0x8>
 8006244:	4618      	mov	r0, r3
 8006246:	e7ec      	b.n	8006222 <strstr+0x6>

08006248 <__libc_init_array>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	4d0d      	ldr	r5, [pc, #52]	; (8006280 <__libc_init_array+0x38>)
 800624c:	4c0d      	ldr	r4, [pc, #52]	; (8006284 <__libc_init_array+0x3c>)
 800624e:	1b64      	subs	r4, r4, r5
 8006250:	10a4      	asrs	r4, r4, #2
 8006252:	2600      	movs	r6, #0
 8006254:	42a6      	cmp	r6, r4
 8006256:	d109      	bne.n	800626c <__libc_init_array+0x24>
 8006258:	4d0b      	ldr	r5, [pc, #44]	; (8006288 <__libc_init_array+0x40>)
 800625a:	4c0c      	ldr	r4, [pc, #48]	; (800628c <__libc_init_array+0x44>)
 800625c:	f000 f818 	bl	8006290 <_init>
 8006260:	1b64      	subs	r4, r4, r5
 8006262:	10a4      	asrs	r4, r4, #2
 8006264:	2600      	movs	r6, #0
 8006266:	42a6      	cmp	r6, r4
 8006268:	d105      	bne.n	8006276 <__libc_init_array+0x2e>
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006270:	4798      	blx	r3
 8006272:	3601      	adds	r6, #1
 8006274:	e7ee      	b.n	8006254 <__libc_init_array+0xc>
 8006276:	f855 3b04 	ldr.w	r3, [r5], #4
 800627a:	4798      	blx	r3
 800627c:	3601      	adds	r6, #1
 800627e:	e7f2      	b.n	8006266 <__libc_init_array+0x1e>
 8006280:	08006d88 	.word	0x08006d88
 8006284:	08006d88 	.word	0x08006d88
 8006288:	08006d88 	.word	0x08006d88
 800628c:	08006d8c 	.word	0x08006d8c

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

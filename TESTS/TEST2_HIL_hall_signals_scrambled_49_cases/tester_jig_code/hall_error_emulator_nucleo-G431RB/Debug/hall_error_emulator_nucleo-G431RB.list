
hall_error_emulator_nucleo-G431RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008478  08008478  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008480  08008480  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08008488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200001a4  0800862c  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800862c  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c887  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dcb  00000000  00000000  0003ca9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00040870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121f  00000000  00000000  00042008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021964  00000000  00000000  00043227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd73  00000000  00000000  00064b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc5a  00000000  00000000  000828fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062d0  00000000  00000000  00160558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d3  00000000  00000000  00166828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a4 	.word	0x200001a4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007984 	.word	0x08007984

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a8 	.word	0x200001a8
 8000214:	08007984 	.word	0x08007984

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800051a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2220      	movs	r2, #32
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f007 f9e7 	bl	8007900 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000532:	4b41      	ldr	r3, [pc, #260]	; (8000638 <MX_ADC1_Init+0x124>)
 8000534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000538:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800053a:	4b3f      	ldr	r3, [pc, #252]	; (8000638 <MX_ADC1_Init+0x124>)
 800053c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000540:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000542:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <MX_ADC1_Init+0x124>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <MX_ADC1_Init+0x124>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800054e:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <MX_ADC1_Init+0x124>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000554:	4b38      	ldr	r3, [pc, #224]	; (8000638 <MX_ADC1_Init+0x124>)
 8000556:	2201      	movs	r2, #1
 8000558:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b37      	ldr	r3, [pc, #220]	; (8000638 <MX_ADC1_Init+0x124>)
 800055c:	2204      	movs	r2, #4
 800055e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000560:	4b35      	ldr	r3, [pc, #212]	; (8000638 <MX_ADC1_Init+0x124>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000566:	4b34      	ldr	r3, [pc, #208]	; (8000638 <MX_ADC1_Init+0x124>)
 8000568:	2201      	movs	r2, #1
 800056a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800056c:	4b32      	ldr	r3, [pc, #200]	; (8000638 <MX_ADC1_Init+0x124>)
 800056e:	2203      	movs	r2, #3
 8000570:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_ADC1_Init+0x124>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <MX_ADC1_Init+0x124>)
 800057c:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <MX_ADC1_Init+0x124>)
 8000584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_ADC1_Init+0x124>)
 800058c:	2201      	movs	r2, #1
 800058e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_ADC1_Init+0x124>)
 8000594:	2200      	movs	r2, #0
 8000596:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_ADC1_Init+0x124>)
 800059a:	2200      	movs	r2, #0
 800059c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a0:	4825      	ldr	r0, [pc, #148]	; (8000638 <MX_ADC1_Init+0x124>)
 80005a2:	f001 fd17 	bl	8001fd4 <HAL_ADC_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005ac:	f000 fc09 	bl	8000dc2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b8:	4619      	mov	r1, r3
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <MX_ADC1_Init+0x124>)
 80005bc:	f002 fc72 	bl	8002ea4 <HAL_ADCEx_MultiModeConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005c6:	f000 fbfc 	bl	8000dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x128>)
 80005cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	2306      	movs	r3, #6
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d6:	237f      	movs	r3, #127	; 0x7f
 80005d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005da:	2304      	movs	r3, #4
 80005dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_ADC1_Init+0x124>)
 80005e8:	f001 ff50 	bl	800248c <HAL_ADC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005f2:	f000 fbe6 	bl	8000dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x12c>)
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005fa:	230c      	movs	r3, #12
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_ADC1_Init+0x124>)
 8000604:	f001 ff42 	bl	800248c <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800060e:	f000 fbd8 	bl	8000dc2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_ADC1_Init+0x130>)
 8000614:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000616:	2312      	movs	r3, #18
 8000618:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_ADC1_Init+0x124>)
 8000620:	f001 ff34 	bl	800248c <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800062a:	f000 fbca 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001c0 	.word	0x200001c0
 800063c:	3ef08000 	.word	0x3ef08000
 8000640:	1d500080 	.word	0x1d500080
 8000644:	19200040 	.word	0x19200040

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	f107 0318 	add.w	r3, r7, #24
 8000664:	2244      	movs	r2, #68	; 0x44
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f007 f949 	bl	8007900 <memset>
  if(adcHandle->Instance==ADC1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000676:	d176      	bne.n	8000766 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800067c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800067e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fc0b 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000694:	f000 fb95 	bl	8000dc2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000698:	4b35      	ldr	r3, [pc, #212]	; (8000770 <HAL_ADC_MspInit+0x128>)
 800069a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069c:	4a34      	ldr	r2, [pc, #208]	; (8000770 <HAL_ADC_MspInit+0x128>)
 800069e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a4:	4b32      	ldr	r3, [pc, #200]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b4:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006cc:	4a28      	ldr	r2, [pc, #160]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <HAL_ADC_MspInit+0x128>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC6_hallC_Pin|ADC77_hallB_Pin;
 80006e0:	2303      	movs	r3, #3
 80006e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e4:	2303      	movs	r3, #3
 80006e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f0:	4619      	mov	r1, r3
 80006f2:	4820      	ldr	r0, [pc, #128]	; (8000774 <HAL_ADC_MspInit+0x12c>)
 80006f4:	f003 fc54 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACD15_hallA_Pin;
 80006f8:	2301      	movs	r3, #1
 80006fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	2303      	movs	r3, #3
 80006fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ACD15_hallA_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000708:	4619      	mov	r1, r3
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <HAL_ADC_MspInit+0x130>)
 800070c:	f003 fc48 	bl	8003fa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <HAL_ADC_MspInit+0x138>)
 8000714:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000718:	2205      	movs	r2, #5
 800071a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_ADC_MspInit+0x134>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_ADC_MspInit+0x134>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800073c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000740:	2220      	movs	r2, #32
 8000742:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <HAL_ADC_MspInit+0x134>)
 800074c:	f003 f8ea 	bl	8003924 <HAL_DMA_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8000756:	f000 fb34 	bl	8000dc2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_ADC_MspInit+0x134>)
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_ADC_MspInit+0x134>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000766:	bf00      	nop
 8000768:	3770      	adds	r7, #112	; 0x70
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800
 8000778:	48000400 	.word	0x48000400
 800077c:	2000022c 	.word	0x2000022c
 8000780:	40020058 	.word	0x40020058

08000784 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2230      	movs	r2, #48	; 0x30
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f007 f8b5 	bl	8007900 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_DAC1_Init+0x80>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_DAC1_Init+0x84>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800079c:	4819      	ldr	r0, [pc, #100]	; (8000804 <MX_DAC1_Init+0x80>)
 800079e:	f002 fd34 	bl	800320a <HAL_DAC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007a8:	f000 fb0b 	bl	8000dc2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007ac:	2302      	movs	r3, #2
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80007bc:	2306      	movs	r3, #6
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_DAC1_Init+0x80>)
 80007d8:	f002 fe72 	bl	80034c0 <HAL_DAC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007e2:	f000 faee 	bl	8000dc2 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	2210      	movs	r2, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_DAC1_Init+0x80>)
 80007ee:	f002 fe67 	bl	80034c0 <HAL_DAC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80007f8:	f000 fae3 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3730      	adds	r7, #48	; 0x30
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000028c 	.word	0x2000028c
 8000808:	50000800 	.word	0x50000800

0800080c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a41      	ldr	r2, [pc, #260]	; (8000930 <HAL_DAC_MspInit+0x124>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d17c      	bne.n	8000928 <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <HAL_DAC_MspInit+0x128>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a40      	ldr	r2, [pc, #256]	; (8000934 <HAL_DAC_MspInit+0x128>)
 8000834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <HAL_DAC_MspInit+0x128>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <HAL_DAC_MspInit+0x128>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a3a      	ldr	r2, [pc, #232]	; (8000934 <HAL_DAC_MspInit+0x128>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <HAL_DAC_MspInit+0x128>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800085e:	2330      	movs	r3, #48	; 0x30
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f003 fb94 	bl	8003fa0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 800087a:	4a30      	ldr	r2, [pc, #192]	; (800093c <HAL_DAC_MspInit+0x130>)
 800087c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 8000880:	2206      	movs	r2, #6
 8000882:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 8000886:	2210      	movs	r2, #16
 8000888:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 80008a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 80008ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80008b4:	4820      	ldr	r0, [pc, #128]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 80008b6:	f003 f835 	bl	8003924 <HAL_DMA_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80008c0:	f000 fa7f 	bl	8000dc2 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <HAL_DAC_MspInit+0x12c>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_DAC_MspInit+0x138>)
 80008d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008d8:	2207      	movs	r2, #7
 80008da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008de:	2210      	movs	r2, #16
 80008e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_DAC_MspInit+0x134>)
 80008f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008fc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_DAC_MspInit+0x134>)
 8000900:	2220      	movs	r2, #32
 8000902:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_DAC_MspInit+0x134>)
 8000906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800090a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <HAL_DAC_MspInit+0x134>)
 800090e:	f003 f809 	bl	8003924 <HAL_DMA_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 8000918:	f000 fa53 	bl	8000dc2 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_DAC_MspInit+0x134>)
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_DAC_MspInit+0x134>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	50000800 	.word	0x50000800
 8000934:	40021000 	.word	0x40021000
 8000938:	200002a0 	.word	0x200002a0
 800093c:	40020030 	.word	0x40020030
 8000940:	20000300 	.word	0x20000300
 8000944:	40020044 	.word	0x40020044

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_DMA_Init+0x90>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000952:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <MX_DMA_Init+0x90>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6493      	str	r3, [r2, #72]	; 0x48
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_DMA_Init+0x90>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_DMA_Init+0x90>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096a:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_DMA_Init+0x90>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6493      	str	r3, [r2, #72]	; 0x48
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_DMA_Init+0x90>)
 8000974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	200b      	movs	r0, #11
 8000984:	f002 fc0d 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000988:	200b      	movs	r0, #11
 800098a:	f002 fc24 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	200c      	movs	r0, #12
 8000994:	f002 fc05 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000998:	200c      	movs	r0, #12
 800099a:	f002 fc1c 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	200d      	movs	r0, #13
 80009a4:	f002 fbfd 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009a8:	200d      	movs	r0, #13
 80009aa:	f002 fc14 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	200e      	movs	r0, #14
 80009b4:	f002 fbf5 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009b8:	200e      	movs	r0, #14
 80009ba:	f002 fc0c 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	200f      	movs	r0, #15
 80009c4:	f002 fbed 	bl	80031a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80009c8:	200f      	movs	r0, #15
 80009ca:	f002 fc04 	bl	80031d6 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a33      	ldr	r2, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a2d      	ldr	r2, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_GPIO_Init+0xe8>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, output_HALLC_Pin|output_HALLA_Pin|output_HALLB_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2138      	movs	r1, #56	; 0x38
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a58:	f003 fc24 	bl	80042a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a64:	f003 fc1e 	bl	80042a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = bluepushbutton_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(bluepushbutton_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <MX_GPIO_Init+0xf0>)
 8000a7e:	f003 fa8f 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = output_HALLC_Pin|output_HALLA_Pin|output_HALLB_Pin;
 8000a82:	2338      	movs	r3, #56	; 0x38
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a9a:	f003 fa81 	bl	8003fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_TARGET_BOARD_Pin;
 8000a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_TARGET_BOARD_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000ab8:	f003 fa72 	bl	8003fa0 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	48000800 	.word	0x48000800

08000ad0 <startADCs>:
void write_output_signals();

/**
* \brief if instead of GPIOs we read hall inputs with ADCs, due to logic levels being too damm low
*/
void startADCs(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
#ifdef hallinputsareADC
	  HAL_ADC_Start_DMA(&hadc1, signal_inputs_ADC, 3);
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	4903      	ldr	r1, [pc, #12]	; (8000ae4 <startADCs+0x14>)
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <startADCs+0x18>)
 8000ada:	f001 fc05 	bl	80022e8 <HAL_ADC_Start_DMA>
#endif
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000370 	.word	0x20000370
 8000ae8:	200001c0 	.word	0x200001c0

08000aec <hall_swapper_twentyKHzinterruptionIRQ>:

/**
* \brief does the hall swapping and polarizing thing
*   this function should be called inside a 20Khz TIM interruption, in our case inside TIM8_UP_IRQHandler(void)
*/
void hall_swapper_twentyKHzinterruptionIRQ( void ){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	if(emulator_enabled==0){
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <hall_swapper_twentyKHzinterruptionIRQ+0x44>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <hall_swapper_twentyKHzinterruptionIRQ+0x12>
		read_input_signals();		//read all gpio inputs into signal_inputs
 8000af8:	f000 f81c 	bl	8000b34 <read_input_signals>
 8000afc:	e001      	b.n	8000b02 <hall_swapper_twentyKHzinterruptionIRQ+0x16>
	}else{
		emulated_read_input_signals();
 8000afe:	f000 f84d 	bl	8000b9c <emulated_read_input_signals>
	}

	polarice_signals(hall_A);	//apply signal inversions, polarice should come first
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f87a 	bl	8000bfc <polarice_signals>
	polarice_signals(hall_B);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f000 f877 	bl	8000bfc <polarice_signals>
	polarice_signals(hall_C);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f000 f874 	bl	8000bfc <polarice_signals>
	swap_signals(hall_A);		//apply signal order swapping, swapping should come second
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 f895 	bl	8000c44 <swap_signals>
	swap_signals(hall_B);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 f892 	bl	8000c44 <swap_signals>
	swap_signals(hall_C);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f000 f88f 	bl	8000c44 <swap_signals>

	write_output_signals();		//write signal outputs into signal_outputs
 8000b26:	f000 f8c1 	bl	8000cac <write_output_signals>

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200006b0 	.word	0x200006b0

08000b34 <read_input_signals>:

/**
* \brief simple GPIO read or ADC read of all hall signals, stores readings into signal_inputs
*/
void read_input_signals(void){
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	signal_inputs[hall_A]=HAL_GPIO_ReadPin(input_HALLA_GPIO_Port, input_HALLA_Pin);
	signal_inputs[hall_B]=HAL_GPIO_ReadPin(input_HALLB_GPIO_Port, input_HALLB_Pin);
	signal_inputs[hall_C]=HAL_GPIO_ReadPin(input_HALLC_GPIO_Port, input_HALLC_Pin);
#endif
#ifdef hallinputsareADC
	if(signal_inputs_ADC[hall_A]>adc_low_level_threshold){
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <read_input_signals+0x5c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <read_input_signals+0x60>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d903      	bls.n	8000b4c <read_input_signals+0x18>
		signal_inputs[hall_A]=GPIO_PIN_SET;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <read_input_signals+0x64>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e002      	b.n	8000b52 <read_input_signals+0x1e>
	}else{
		signal_inputs[hall_A]=GPIO_PIN_RESET;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <read_input_signals+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
	}

	if(signal_inputs_ADC[hall_B]>adc_low_level_threshold){
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <read_input_signals+0x5c>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <read_input_signals+0x60>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d903      	bls.n	8000b66 <read_input_signals+0x32>
		signal_inputs[hall_B]=GPIO_PIN_SET;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <read_input_signals+0x64>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	705a      	strb	r2, [r3, #1]
 8000b64:	e002      	b.n	8000b6c <read_input_signals+0x38>
	}else{
		signal_inputs[hall_B]=GPIO_PIN_RESET;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <read_input_signals+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	705a      	strb	r2, [r3, #1]
	}

	if(signal_inputs_ADC[hall_C]>adc_low_level_threshold){
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <read_input_signals+0x5c>)
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <read_input_signals+0x60>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d903      	bls.n	8000b80 <read_input_signals+0x4c>
		signal_inputs[hall_C]=GPIO_PIN_SET;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <read_input_signals+0x64>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	709a      	strb	r2, [r3, #2]
	}else{
		signal_inputs[hall_C]=GPIO_PIN_RESET;
	}
#endif
}
 8000b7e:	e002      	b.n	8000b86 <read_input_signals+0x52>
		signal_inputs[hall_C]=GPIO_PIN_RESET;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <read_input_signals+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	709a      	strb	r2, [r3, #2]
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	20000370 	.word	0x20000370
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000368 	.word	0x20000368

08000b9c <emulated_read_input_signals>:

/**
* \brief simple GPIO read of all halll signals, stores readings into signal_inputs
*/
void emulated_read_input_signals(void){
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	signal_inputs[hall_A]=HALL_A[dma_index];
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <emulated_read_input_signals+0x50>)
 8000ba6:	5cd2      	ldrb	r2, [r2, r3]
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <emulated_read_input_signals+0x54>)
 8000baa:	701a      	strb	r2, [r3, #0]
	signal_inputs[hall_B]=HALL_B[dma_index];
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <emulated_read_input_signals+0x58>)
 8000bb2:	5cd2      	ldrb	r2, [r2, r3]
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <emulated_read_input_signals+0x54>)
 8000bb6:	705a      	strb	r2, [r3, #1]
	signal_inputs[hall_C]=HALL_C[dma_index];
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <emulated_read_input_signals+0x5c>)
 8000bbe:	5cd2      	ldrb	r2, [r2, r3]
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <emulated_read_input_signals+0x54>)
 8000bc2:	709a      	strb	r2, [r3, #2]

	if(dma_index>=(sizeof(HALL_A)/sizeof(HALL_A[0]))-1){//taking care of the circular buffer index reset
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b82      	cmp	r3, #130	; 0x82
 8000bca:	d903      	bls.n	8000bd4 <emulated_read_input_signals+0x38>
		dma_index=0;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
	}else{
		dma_index++;
	}
}
 8000bd2:	e004      	b.n	8000bde <emulated_read_input_signals+0x42>
		dma_index++;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <emulated_read_input_signals+0x4c>)
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	2000037c 	.word	0x2000037c
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	20000368 	.word	0x20000368
 8000bf4:	20000090 	.word	0x20000090
 8000bf8:	20000114 	.word	0x20000114

08000bfc <polarice_signals>:
/**
* \brief For a single hall_x signal: apply to signal_inputs the polarization noted by signal_polarity, direct or inverse.
* polarizing should come before swapping.
* \param hall_signals_order hall_x , reffers to the hall signal, could be hall_A/B/C
*/
void polarice_signals(hall_signals_order hall_x){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]

	if(signal_polarity[hall_x]==hall_inverse){		//check for inverse polarity flag
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <polarice_signals+0x40>)
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10d      	bne.n	8000c2e <polarice_signals+0x32>
		if( signal_inputs[hall_x]==GPIO_PIN_RESET){	//inverted signal
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <polarice_signals+0x44>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <polarice_signals+0x2a>
			signal_inputs[hall_x]=GPIO_PIN_SET;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <polarice_signals+0x44>)
 8000c20:	2101      	movs	r1, #1
 8000c22:	54d1      	strb	r1, [r2, r3]
		}
	}else{											//polarity is not inverted
		//not inverted signal
	}

}
 8000c24:	e003      	b.n	8000c2e <polarice_signals+0x32>
			signal_inputs[hall_x]=GPIO_PIN_RESET;
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <polarice_signals+0x44>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	54d1      	strb	r1, [r2, r3]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000360 	.word	0x20000360
 8000c40:	20000368 	.word	0x20000368

08000c44 <swap_signals>:
/**
* \brief For a single hall_x signal: load signal_outputs with  signal_inputs values in the order noted by signal_order
* swapping should come after polarizing
* \param hall_signals_order hall_x , reffers to the hall signal, could be hall_A/B/C
*/
void swap_signals(hall_signals_order hall_x){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
	if(signal_order[hall_x]==hall_A){
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <swap_signals+0x5c>)
 8000c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d105      	bne.n	8000c66 <swap_signals+0x22>
		signal_outputs[hall_x]=signal_inputs[hall_A];
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	4a11      	ldr	r2, [pc, #68]	; (8000ca4 <swap_signals+0x60>)
 8000c5e:	7811      	ldrb	r1, [r2, #0]
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <swap_signals+0x64>)
 8000c62:	54d1      	strb	r1, [r2, r3]
	}else if(signal_order[hall_x]==hall_B){
		signal_outputs[hall_x]=signal_inputs[hall_B];
	}else if(signal_order[hall_x]==hall_C){
		signal_outputs[hall_x]=signal_inputs[hall_C];
	}
}
 8000c64:	e016      	b.n	8000c94 <swap_signals+0x50>
	}else if(signal_order[hall_x]==hall_B){
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <swap_signals+0x5c>)
 8000c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d105      	bne.n	8000c7e <swap_signals+0x3a>
		signal_outputs[hall_x]=signal_inputs[hall_B];
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <swap_signals+0x60>)
 8000c76:	7851      	ldrb	r1, [r2, #1]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <swap_signals+0x64>)
 8000c7a:	54d1      	strb	r1, [r2, r3]
}
 8000c7c:	e00a      	b.n	8000c94 <swap_signals+0x50>
	}else if(signal_order[hall_x]==hall_C){
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <swap_signals+0x5c>)
 8000c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d104      	bne.n	8000c94 <swap_signals+0x50>
		signal_outputs[hall_x]=signal_inputs[hall_C];
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <swap_signals+0x60>)
 8000c8e:	7891      	ldrb	r1, [r2, #2]
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <swap_signals+0x64>)
 8000c92:	54d1      	strb	r1, [r2, r3]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000368 	.word	0x20000368
 8000ca8:	2000036c 	.word	0x2000036c

08000cac <write_output_signals>:

/**
* \brief simple GPIO write of all hall signals, writes gpios with signal_outputs values
*/
void write_output_signals(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(output_HALLA_GPIO_Port, output_HALLA_Pin, signal_outputs[hall_A]);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <write_output_signals+0x34>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <write_output_signals+0x38>)
 8000cba:	f003 faf3 	bl	80042a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(output_HALLB_GPIO_Port, output_HALLB_Pin, signal_outputs[hall_B]);
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <write_output_signals+0x34>)
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <write_output_signals+0x38>)
 8000cc8:	f003 faec 	bl	80042a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(output_HALLC_GPIO_Port, output_HALLC_Pin, signal_outputs[hall_C]);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <write_output_signals+0x34>)
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <write_output_signals+0x38>)
 8000cd6:	f003 fae5 	bl	80042a4 <HAL_GPIO_WritePin>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000036c 	.word	0x2000036c
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 febd 	bl	8001a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f81c 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f7ff fe72 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf8:	f7ff fe26 	bl	8000948 <MX_DMA_Init>
  MX_DAC1_Init();
 8000cfc:	f7ff fd42 	bl	8000784 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000d00:	f000 f984 	bl	800100c <MX_LPUART1_UART_Init>
  MX_TIM8_Init();
 8000d04:	f000 f90a 	bl	8000f1c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000d08:	f000 f9ca 	bl	80010a0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d0c:	f7ff fc02 	bl	8000514 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ui_uart_init();
 8000d10:	f000 fb0c 	bl	800132c <ui_uart_init>
  startADCs();
 8000d14:	f7ff fedc 	bl	8000ad0 <startADCs>
  HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <main+0x40>)
 8000d1a:	f004 fb0b 	bl	8005334 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ui_uart_listen();
 8000d1e:	f000 fb2f 	bl	8001380 <ui_uart_listen>
	emulation();
 8000d22:	f000 fe1d 	bl	8001960 <emulation>
	ui_uart_listen();
 8000d26:	e7fa      	b.n	8000d1e <main+0x36>
 8000d28:	20000380 	.word	0x20000380

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	; 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2238      	movs	r2, #56	; 0x38
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f006 fde0 	bl	8007900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f003 fac0 	bl	80042d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d6e:	2355      	movs	r3, #85	; 0x55
 8000d70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fb5a 	bl	800443c <HAL_RCC_OscConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d8e:	f000 f818 	bl	8000dc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d92:	230f      	movs	r3, #15
 8000d94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d96:	2303      	movs	r3, #3
 8000d98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2104      	movs	r1, #4
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fe5e 	bl	8004a6c <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000db6:	f000 f804 	bl	8000dc2 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3750      	adds	r7, #80	; 0x50
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc6:	b672      	cpsid	i
}
 8000dc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dca:	e7fe      	b.n	8000dca <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6593      	str	r3, [r2, #88]	; 0x58
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e02:	f003 fb0b 	bl	800441c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 fe56 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA1_Channel1_IRQHandler+0x10>)
 8000e6e:	f002 ff3c 	bl	8003cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200004ec 	.word	0x200004ec

08000e7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Channel2_IRQHandler+0x10>)
 8000e82:	f002 ff32 	bl	8003cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000054c 	.word	0x2000054c

08000e90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA1_Channel3_IRQHandler+0x10>)
 8000e96:	f002 ff28 	bl	8003cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002a0 	.word	0x200002a0

08000ea4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Channel4_IRQHandler+0x10>)
 8000eaa:	f002 ff1e 	bl	8003cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000300 	.word	0x20000300

08000eb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA1_Channel5_IRQHandler+0x10>)
 8000ebe:	f002 ff14 	bl	8003cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000022c 	.word	0x2000022c

08000ecc <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */
  hall_swapper_twentyKHzinterruptionIRQ();
 8000ed0:	f7ff fe0c 	bl	8000aec <hall_swapper_twentyKHzinterruptionIRQ>
  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM8_UP_IRQHandler+0x14>)
 8000ed6:	f004 fac6 	bl	8005466 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000380 	.word	0x20000380

08000ee4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <LPUART1_IRQHandler+0x10>)
 8000eea:	f005 f8ef 	bl	80060cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200003cc 	.word	0x200003cc

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <MX_TIM8_Init+0xa0>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = PREESCALER_TIM8;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f42:	22a9      	movs	r2, #169	; 0xa9
 8000f44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f4e:	2231      	movs	r2, #49	; 0x31
 8000f50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f66:	f004 f98d 	bl	8005284 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000f70:	f7ff ff27 	bl	8000dc2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000f82:	f004 fbef 	bl	8005764 <HAL_TIM_ConfigClockSource>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000f8c:	f7ff ff19 	bl	8000dc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f90:	2320      	movs	r3, #32
 8000f92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM8_Init+0x9c>)
 8000fa2:	f004 fe37 	bl	8005c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000fac:	f7ff ff09 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000380 	.word	0x20000380
 8000fbc:	40013400 	.word	0x40013400

08000fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_TIM_Base_MspInit+0x44>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d113      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_Base_MspInit+0x48>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_TIM_Base_MspInit+0x48>)
 8000fd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x48>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	202c      	movs	r0, #44	; 0x2c
 8000ff0:	f002 f8d7 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000ff4:	202c      	movs	r0, #44	; 0x2c
 8000ff6:	f002 f8ee 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40013400 	.word	0x40013400
 8001008:	40021000 	.word	0x40021000

0800100c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <MX_LPUART1_UART_Init+0x90>)
 8001014:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001050:	f004 fea8 	bl	8005da4 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f7ff feb2 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001062:	f006 fb26 	bl	80076b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800106c:	f7ff fea9 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001074:	f006 fb5b 	bl	800772e <HAL_UARTEx_SetRxFifoThreshold>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800107e:	f7ff fea0 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_LPUART1_UART_Init+0x8c>)
 8001084:	f006 fadc 	bl	8007640 <HAL_UARTEx_DisableFifoMode>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800108e:	f7ff fe98 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200003cc 	.word	0x200003cc
 800109c:	40008000 	.word	0x40008000

080010a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <MX_USART1_UART_Init+0x94>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010ea:	f004 fe5b 	bl	8005da4 <HAL_UART_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010f4:	f7ff fe65 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010fc:	f006 fad9 	bl	80076b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001106:	f7ff fe5c 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_USART1_UART_Init+0x90>)
 800110e:	f006 fb0e 	bl	800772e <HAL_UARTEx_SetRxFifoThreshold>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001118:	f7ff fe53 	bl	8000dc2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_USART1_UART_Init+0x90>)
 800111e:	f006 fa8f 	bl	8007640 <HAL_UARTEx_DisableFifoMode>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001128:	f7ff fe4b 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000045c 	.word	0x2000045c
 8001134:	40013800 	.word	0x40013800

08001138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09c      	sub	sp, #112	; 0x70
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	2244      	movs	r2, #68	; 0x44
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f006 fbd1 	bl	8007900 <memset>
  if(uartHandle->Instance==LPUART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_UART_MspInit+0x1d4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	f040 8092 	bne.w	800128e <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800116a:	2320      	movs	r3, #32
 800116c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fe94 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001182:	f7ff fe1e 	bl	8000dc2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	4a61      	ldr	r2, [pc, #388]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a5b      	ldr	r2, [pc, #364]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011b6:	230c      	movs	r3, #12
 80011b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011c6:	230c      	movs	r3, #12
 80011c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f002 fee4 	bl	8003fa0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80011d8:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011da:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_UART_MspInit+0x1e0>)
 80011dc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80011de:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011e0:	2222      	movs	r2, #34	; 0x22
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001202:	4b44      	ldr	r3, [pc, #272]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 8001204:	2220      	movs	r2, #32
 8001206:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800120e:	4841      	ldr	r0, [pc, #260]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 8001210:	f002 fb88 	bl	8003924 <HAL_DMA_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800121a:	f7ff fdd2 	bl	8000dc2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a3c      	ldr	r2, [pc, #240]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 8001222:	67da      	str	r2, [r3, #124]	; 0x7c
 8001224:	4a3b      	ldr	r2, [pc, #236]	; (8001314 <HAL_UART_MspInit+0x1dc>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_UART_MspInit+0x1e4>)
 800122c:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <HAL_UART_MspInit+0x1e8>)
 800122e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001232:	2223      	movs	r2, #35	; 0x23
 8001234:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001238:	2210      	movs	r2, #16
 800123a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_UART_MspInit+0x1e4>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_UART_MspInit+0x1e4>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_UART_MspInit+0x1e4>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001260:	482e      	ldr	r0, [pc, #184]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001262:	f002 fb5f 	bl	8003924 <HAL_DMA_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800126c:	f7ff fda9 	bl	8000dc2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001274:	679a      	str	r2, [r3, #120]	; 0x78
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <HAL_UART_MspInit+0x1e4>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2101      	movs	r1, #1
 8001280:	205b      	movs	r0, #91	; 0x5b
 8001282:	f001 ff8e 	bl	80031a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001286:	205b      	movs	r0, #91	; 0x5b
 8001288:	f001 ffa5 	bl	80031d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800128c:	e03a      	b.n	8001304 <HAL_UART_MspInit+0x1cc>
  else if(uartHandle->Instance==USART1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a24      	ldr	r2, [pc, #144]	; (8001324 <HAL_UART_MspInit+0x1ec>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d135      	bne.n	8001304 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001298:	2301      	movs	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fdfd 	bl	8004ea4 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80012b0:	f7ff fd87 	bl	8000dc2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_UART_MspInit+0x1d8>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e4:	2330      	movs	r3, #48	; 0x30
 80012e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f4:	2307      	movs	r3, #7
 80012f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012fc:	4619      	mov	r1, r3
 80012fe:	480a      	ldr	r0, [pc, #40]	; (8001328 <HAL_UART_MspInit+0x1f0>)
 8001300:	f002 fe4e 	bl	8003fa0 <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	3770      	adds	r7, #112	; 0x70
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40008000 	.word	0x40008000
 8001310:	40021000 	.word	0x40021000
 8001314:	200004ec 	.word	0x200004ec
 8001318:	40020008 	.word	0x40020008
 800131c:	2000054c 	.word	0x2000054c
 8001320:	4002001c 	.word	0x4002001c
 8001324:	40013800 	.word	0x40013800
 8001328:	48000800 	.word	0x48000800

0800132c <ui_uart_init>:
hall_signals_order decode_char_to_hall_signals_order(uint8_t *pData);
hall_signals_polarity decode_char_to_hall_signals_polarity(uint8_t *pData);
void reset_or_start_uart_DMA_communications();


void ui_uart_init(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_tx,DMA_IT_HT);						//disable DMA half transfer interruption
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <ui_uart_init+0x30>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <ui_uart_init+0x30>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0204 	bic.w	r2, r2, #4
 800133e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx,DMA_IT_HT);						//disable DMA half transfer interruption
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <ui_uart_init+0x34>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ui_uart_init+0x34>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0204 	bic.w	r2, r2, #4
 800134e:	601a      	str	r2, [r3, #0]
	reset_or_start_uart_DMA_communications();
 8001350:	f000 fad0 	bl	80018f4 <reset_or_start_uart_DMA_communications>
	ui_uart_transmit_initial_message();
 8001354:	f000 f806 	bl	8001364 <ui_uart_transmit_initial_message>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000054c 	.word	0x2000054c
 8001360:	200004ec 	.word	0x200004ec

08001364 <ui_uart_transmit_initial_message>:

void ui_uart_transmit_initial_message(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&hlpuart1, initialmessage, sizeof(initialmessage));	//just order the DMA to spit out initialmessage trough uart
 8001368:	f44f 7260 	mov.w	r2, #896	; 0x380
 800136c:	4902      	ldr	r1, [pc, #8]	; (8001378 <ui_uart_transmit_initial_message+0x14>)
 800136e:	4803      	ldr	r0, [pc, #12]	; (800137c <ui_uart_transmit_initial_message+0x18>)
 8001370:	f004 fd68 	bl	8005e44 <HAL_UART_Transmit_DMA>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08007ddc 	.word	0x08007ddc
 800137c:	200003cc 	.word	0x200003cc

08001380 <ui_uart_listen>:

void ui_uart_listen(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	if(ui_uart_echo_and_breaklinedetect_rx()==1){
 8001384:	f000 f824 	bl	80013d0 <ui_uart_echo_and_breaklinedetect_rx>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d118      	bne.n	80013c0 <ui_uart_listen+0x40>

		if(decode_othercommands(rx_buffer, echoed_size)!=1){
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <ui_uart_listen+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <ui_uart_listen+0x48>)
 8001398:	f000 f95c 	bl	8001654 <decode_othercommands>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d006      	beq.n	80013b0 <ui_uart_listen+0x30>
			decode_ABCcommands(rx_buffer, echoed_size);
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <ui_uart_listen+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <ui_uart_listen+0x48>)
 80013ac:	f000 f888 	bl	80014c0 <decode_ABCcommands>
		}
		rx_size=0;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <ui_uart_listen+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
		echoed_size=0;
 80013b6:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <ui_uart_listen+0x44>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		reset_or_start_uart_DMA_communications();
 80013bc:	f000 fa9a 	bl	80018f4 <reset_or_start_uart_DMA_communications>
	}
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200006ae 	.word	0x200006ae
 80013c8:	200005ac 	.word	0x200005ac
 80013cc:	200006ad 	.word	0x200006ad

080013d0 <ui_uart_echo_and_breaklinedetect_rx>:

uint32_t ui_uart_echo_and_breaklinedetect_rx(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	uint32_t linejumpdetected_flag=0;//1= we detected a line jump
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]

	if(rx_flag==1){											//uart received something
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <ui_uart_echo_and_breaklinedetect_rx+0xdc>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d15e      	bne.n	80014a0 <ui_uart_echo_and_breaklinedetect_rx+0xd0>
		if((rx_size-echoed_size)>0){						//check only that new something not the whole RX buffer each time
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dd4f      	ble.n	8001492 <ui_uart_echo_and_breaklinedetect_rx+0xc2>
			for(uint32_t i=0;i<rx_size-echoed_size;i++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	e00e      	b.n	8001416 <ui_uart_echo_and_breaklinedetect_rx+0x46>
				if(rx_buffer[echoed_size+i]=='\r'){			//detect a breakline from the user, that means start decoding
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	2b0d      	cmp	r3, #13
 8001408:	d102      	bne.n	8001410 <ui_uart_echo_and_breaklinedetect_rx+0x40>
					linejumpdetected_flag=1;
 800140a:	2301      	movs	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
					break;
 800140e:	e00c      	b.n	800142a <ui_uart_echo_and_breaklinedetect_rx+0x5a>
			for(uint32_t i=0;i<rx_size-echoed_size;i++){
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	461a      	mov	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4293      	cmp	r3, r2
 8001428:	d3e6      	bcc.n	80013f8 <ui_uart_echo_and_breaklinedetect_rx+0x28>
				}
			}

			if(linejumpdetected_flag==1){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d11c      	bne.n	800146a <ui_uart_echo_and_breaklinedetect_rx+0x9a>
				rx_buffer[rx_size]='\n';
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001438:	210a      	movs	r1, #10
 800143a:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit_DMA(&hlpuart1, &rx_buffer[echoed_size], (rx_size-echoed_size)+1);	//the line jump from putty is actually only '/r', for readability we will add also a '/n'
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001444:	18d1      	adds	r1, r2, r3
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <ui_uart_echo_and_breaklinedetect_rx+0xec>)
 800145e:	f004 fcf1 	bl	8005e44 <HAL_UART_Transmit_DMA>
				HAL_Delay(25);
 8001462:	2019      	movs	r0, #25
 8001464:	f000 fb72 	bl	8001b4c <HAL_Delay>
 8001468:	e013      	b.n	8001492 <ui_uart_echo_and_breaklinedetect_rx+0xc2>
			}else{
				HAL_UART_Transmit_DMA(&hlpuart1, &rx_buffer[echoed_size], (rx_size-echoed_size));
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001472:	18d1      	adds	r1, r2, r3
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <ui_uart_echo_and_breaklinedetect_rx+0xec>)
 8001488:	f004 fcdc 	bl	8005e44 <HAL_UART_Transmit_DMA>
				HAL_Delay(25);
 800148c:	2019      	movs	r0, #25
 800148e:	f000 fb5d 	bl	8001b4c <HAL_Delay>
			}
		}
		echoed_size+=rx_size-echoed_size;				//actualise already echoed and checked for breakline buffer.
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 8001498:	701a      	strb	r2, [r3, #0]
		rx_flag=0;										//reset the uart received flag
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <ui_uart_echo_and_breaklinedetect_rx+0xdc>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	}

	return linejumpdetected_flag;
 80014a0:	687b      	ldr	r3, [r7, #4]

}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200006ac 	.word	0x200006ac
 80014b0:	200006ad 	.word	0x200006ad
 80014b4:	200006ae 	.word	0x200006ae
 80014b8:	200005ac 	.word	0x200005ac
 80014bc:	200003cc 	.word	0x200003cc

080014c0 <decode_ABCcommands>:

uint32_t decode_ABCcommands(uint8_t *pData, uint16_t Size){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]

	hall_signals_order aux_signal_order[3]={hall_order_unknown, hall_order_unknown, hall_order_unknown};
 80014cc:	4a5b      	ldr	r2, [pc, #364]	; (800163c <decode_ABCcommands+0x17c>)
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d6:	6018      	str	r0, [r3, #0]
 80014d8:	3304      	adds	r3, #4
 80014da:	8019      	strh	r1, [r3, #0]
	hall_signals_polarity aux_signal_polarity[3]={hall_polarity_unknown, hall_polarity_unknown, hall_polarity_unknown};
 80014dc:	4a57      	ldr	r2, [pc, #348]	; (800163c <decode_ABCcommands+0x17c>)
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014e6:	6018      	str	r0, [r3, #0]
 80014e8:	3304      	adds	r3, #4
 80014ea:	8019      	strh	r1, [r3, #0]
	uint32_t number_of_identified_phases=0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t hall_order_unknown_flag=0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t hall_polarity_unknown_flag=0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t newSize_after_all_deletions=apply_delete_character_to_buffer(pData,Size);
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	4619      	mov	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f923 	bl	8001748 <apply_delete_character_to_buffer>
 8001502:	4603      	mov	r3, r0
 8001504:	83fb      	strh	r3, [r7, #30]


	for (uint32_t i = 0; i < newSize_after_all_deletions; ++i) {
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
 800150a:	e033      	b.n	8001574 <decode_ABCcommands+0xb4>
		hall_signals_order just_identified_hall_order=decode_char_to_hall_signals_order((uint8_t *)&pData[i]);
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	4413      	add	r3, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f96c 	bl	80017f0 <decode_char_to_hall_signals_order>
 8001518:	4603      	mov	r3, r0
 800151a:	83bb      	strh	r3, [r7, #28]
		if(just_identified_hall_order!=hall_order_unknown){//we got a phase character match!
 800151c:	8bbb      	ldrh	r3, [r7, #28]
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	4293      	cmp	r3, r2
 8001524:	d023      	beq.n	800156e <decode_ABCcommands+0xae>
			aux_signal_order[number_of_identified_phases]=just_identified_hall_order;
 8001526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3338      	adds	r3, #56	; 0x38
 800152c:	443b      	add	r3, r7
 800152e:	8bba      	ldrh	r2, [r7, #28]
 8001530:	f823 2c24 	strh.w	r2, [r3, #-36]
			if(i==0){//take care of the 0 index, we dont want to access the array out of bounds
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	2b00      	cmp	r3, #0
 8001538:	d107      	bne.n	800154a <decode_ABCcommands+0x8a>
				aux_signal_polarity[number_of_identified_phases]=hall_direct;
 800153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	3338      	adds	r3, #56	; 0x38
 8001540:	443b      	add	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8001548:	e00e      	b.n	8001568 <decode_ABCcommands+0xa8>
			}else{
				aux_signal_polarity[number_of_identified_phases]=decode_char_to_hall_signals_polarity((uint8_t *)&pData[i-1]);
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	3b01      	subs	r3, #1
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f9b6 	bl	80018c4 <decode_char_to_hall_signals_polarity>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	3338      	adds	r3, #56	; 0x38
 8001562:	443b      	add	r3, r7
 8001564:	f823 2c2c 	strh.w	r2, [r3, #-44]
			}

			number_of_identified_phases++;
 8001568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156a:	3301      	adds	r3, #1
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint32_t i = 0; i < newSize_after_all_deletions; ++i) {
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	3301      	adds	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
 8001574:	8bfb      	ldrh	r3, [r7, #30]
 8001576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001578:	429a      	cmp	r2, r3
 800157a:	d3c7      	bcc.n	800150c <decode_ABCcommands+0x4c>
		}
	}

	for (uint32_t i = 0; i < 3; ++i) {//check if all values are acceptable
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
 8001580:	e01c      	b.n	80015bc <decode_ABCcommands+0xfc>
		if(aux_signal_order[i]==hall_order_unknown){
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	3338      	adds	r3, #56	; 0x38
 8001588:	443b      	add	r3, r7
 800158a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800158e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001592:	4293      	cmp	r3, r2
 8001594:	d102      	bne.n	800159c <decode_ABCcommands+0xdc>
			hall_order_unknown_flag=1;
 8001596:	2301      	movs	r3, #1
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
			break;			//we found an unacceptable value, early break
 800159a:	e012      	b.n	80015c2 <decode_ABCcommands+0x102>
		}

		if(aux_signal_polarity[i]==hall_polarity_unknown){
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3338      	adds	r3, #56	; 0x38
 80015a2:	443b      	add	r3, r7
 80015a4:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80015a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d102      	bne.n	80015b6 <decode_ABCcommands+0xf6>
			hall_polarity_unknown_flag=1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;			//we found an unacceptable value, early break
 80015b4:	e005      	b.n	80015c2 <decode_ABCcommands+0x102>
	for (uint32_t i = 0; i < 3; ++i) {//check if all values are acceptable
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	3301      	adds	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d9df      	bls.n	8001582 <decode_ABCcommands+0xc2>
		}
	}

	if(number_of_identified_phases==3 && hall_order_unknown_flag==0 && hall_polarity_unknown_flag==0){
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d12c      	bne.n	8001622 <decode_ABCcommands+0x162>
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d129      	bne.n	8001622 <decode_ABCcommands+0x162>
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d126      	bne.n	8001622 <decode_ABCcommands+0x162>
		//everything went well, unload out new values into the real order and polarity arrays
		for(uint32_t i = 0; i < 3; ++i){
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	e016      	b.n	8001608 <decode_ABCcommands+0x148>
			signal_order[i]=aux_signal_order[i];
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	3338      	adds	r3, #56	; 0x38
 80015e0:	443b      	add	r3, r7
 80015e2:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <decode_ABCcommands+0x180>)
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			signal_polarity[i]=aux_signal_polarity[i];
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	3338      	adds	r3, #56	; 0x38
 80015f4:	443b      	add	r3, r7
 80015f6:	f833 1c2c 	ldrh.w	r1, [r3, #-44]
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <decode_ABCcommands+0x184>)
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint32_t i = 0; i < 3; ++i){
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	3301      	adds	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d9e5      	bls.n	80015da <decode_ABCcommands+0x11a>
		}
		HAL_Delay(50);
 800160e:	2032      	movs	r0, #50	; 0x32
 8001610:	f000 fa9c 	bl	8001b4c <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, okmessage, sizeof(okmessage));
 8001614:	220b      	movs	r2, #11
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <decode_ABCcommands+0x188>)
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <decode_ABCcommands+0x18c>)
 800161a:	f004 fc13 	bl	8005e44 <HAL_UART_Transmit_DMA>
		return 1;
 800161e:	2301      	movs	r3, #1
 8001620:	e008      	b.n	8001634 <decode_ABCcommands+0x174>
	}else{
		HAL_Delay(50);
 8001622:	2032      	movs	r0, #50	; 0x32
 8001624:	f000 fa92 	bl	8001b4c <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, notokmessage, sizeof(notokmessage));
 8001628:	2222      	movs	r2, #34	; 0x22
 800162a:	4909      	ldr	r1, [pc, #36]	; (8001650 <decode_ABCcommands+0x190>)
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <decode_ABCcommands+0x18c>)
 800162e:	f004 fc09 	bl	8005e44 <HAL_UART_Transmit_DMA>
		return 0;
 8001632:	2300      	movs	r3, #0
	}

}
 8001634:	4618      	mov	r0, r3
 8001636:	3738      	adds	r7, #56	; 0x38
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800799c 	.word	0x0800799c
 8001640:	20000000 	.word	0x20000000
 8001644:	20000360 	.word	0x20000360
 8001648:	08008420 	.word	0x08008420
 800164c:	200003cc 	.word	0x200003cc
 8001650:	0800842c 	.word	0x0800842c

08001654 <decode_othercommands>:

uint32_t decode_othercommands(uint8_t *pData, uint16_t Size){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
	char* aux_variable_searching_strings=NULL;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
	//check for the help command
	aux_variable_searching_strings=strstr((char *)pData, (char *)helpcommand);
 8001664:	492e      	ldr	r1, [pc, #184]	; (8001720 <decode_othercommands+0xcc>)
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f006 f952 	bl	8007910 <strstr>
 800166c:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00a      	beq.n	800168a <decode_othercommands+0x36>
		HAL_Delay(50);
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 fa69 	bl	8001b4c <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, helpmessage, sizeof(helpmessage));
 800167a:	f240 2253 	movw	r2, #595	; 0x253
 800167e:	4929      	ldr	r1, [pc, #164]	; (8001724 <decode_othercommands+0xd0>)
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <decode_othercommands+0xd4>)
 8001682:	f004 fbdf 	bl	8005e44 <HAL_UART_Transmit_DMA>
		return 1;
 8001686:	2301      	movs	r3, #1
 8001688:	e046      	b.n	8001718 <decode_othercommands+0xc4>
	}

	aux_variable_searching_strings=strstr((char *)pData, (char *)resetcommand);
 800168a:	4928      	ldr	r1, [pc, #160]	; (800172c <decode_othercommands+0xd8>)
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f006 f93f 	bl	8007910 <strstr>
 8001692:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d018      	beq.n	80016cc <decode_othercommands+0x78>
		HAL_Delay(50);
 800169a:	2032      	movs	r0, #50	; 0x32
 800169c:	f000 fa56 	bl	8001b4c <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, resetmessage, sizeof(resetmessage));
 80016a0:	2219      	movs	r2, #25
 80016a2:	4923      	ldr	r1, [pc, #140]	; (8001730 <decode_othercommands+0xdc>)
 80016a4:	4820      	ldr	r0, [pc, #128]	; (8001728 <decode_othercommands+0xd4>)
 80016a6:	f004 fbcd 	bl	8005e44 <HAL_UART_Transmit_DMA>
		HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin,GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	4820      	ldr	r0, [pc, #128]	; (8001734 <decode_othercommands+0xe0>)
 80016b2:	f002 fdf7 	bl	80042a4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80016b6:	2064      	movs	r0, #100	; 0x64
 80016b8:	f000 fa48 	bl	8001b4c <HAL_Delay>
		HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin,GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c2:	481c      	ldr	r0, [pc, #112]	; (8001734 <decode_othercommands+0xe0>)
 80016c4:	f002 fdee 	bl	80042a4 <HAL_GPIO_WritePin>
		return 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e025      	b.n	8001718 <decode_othercommands+0xc4>
	}

	aux_variable_searching_strings=strstr((char *)pData, (char *)emulationcommand);
 80016cc:	491a      	ldr	r1, [pc, #104]	; (8001738 <decode_othercommands+0xe4>)
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f006 f91e 	bl	8007910 <strstr>
 80016d4:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01c      	beq.n	8001716 <decode_othercommands+0xc2>
		if(emulator_enabled==0){
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <decode_othercommands+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10b      	bne.n	80016fc <decode_othercommands+0xa8>
			emulator_enabled=1;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <decode_othercommands+0xe8>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80016ea:	2032      	movs	r0, #50	; 0x32
 80016ec:	f000 fa2e 	bl	8001b4c <HAL_Delay>
			HAL_UART_Transmit_DMA(&hlpuart1, on_emulationmessage, sizeof(on_emulationmessage));
 80016f0:	2215      	movs	r2, #21
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <decode_othercommands+0xec>)
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <decode_othercommands+0xd4>)
 80016f6:	f004 fba5 	bl	8005e44 <HAL_UART_Transmit_DMA>
 80016fa:	e00a      	b.n	8001712 <decode_othercommands+0xbe>
		}else{
			emulator_enabled=0;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <decode_othercommands+0xe8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001702:	2032      	movs	r0, #50	; 0x32
 8001704:	f000 fa22 	bl	8001b4c <HAL_Delay>
			HAL_UART_Transmit_DMA(&hlpuart1, off_emulationmessage, sizeof(off_emulationmessage));
 8001708:	2216      	movs	r2, #22
 800170a:	490e      	ldr	r1, [pc, #56]	; (8001744 <decode_othercommands+0xf0>)
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <decode_othercommands+0xd4>)
 800170e:	f004 fb99 	bl	8005e44 <HAL_UART_Transmit_DMA>
		}
		return 1;
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <decode_othercommands+0xc4>
	}

	return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	0800815c 	.word	0x0800815c
 8001724:	08008164 	.word	0x08008164
 8001728:	200003cc 	.word	0x200003cc
 800172c:	080083f4 	.word	0x080083f4
 8001730:	08008404 	.word	0x08008404
 8001734:	48000400 	.word	0x48000400
 8001738:	080083b8 	.word	0x080083b8
 800173c:	200006b0 	.word	0x200006b0
 8001740:	080083c4 	.word	0x080083c4
 8001744:	080083dc 	.word	0x080083dc

08001748 <apply_delete_character_to_buffer>:


uint16_t apply_delete_character_to_buffer(uint8_t *pData, uint16_t Size){
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
	uint16_t newSize_after_all_deletions=Size;
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	82fb      	strh	r3, [r7, #22]
	for (uint32_t i = 0; i < Size; ++i) { //apply the "delete"=='/127' characters to received buffer
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	e03c      	b.n	80017d8 <apply_delete_character_to_buffer+0x90>
		if(pData[i]=='\177'){		//delete found
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b7f      	cmp	r3, #127	; 0x7f
 8001768:	d133      	bne.n	80017d2 <apply_delete_character_to_buffer+0x8a>
			if(i==0){				//if the delete was right at the start of the buffer
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d119      	bne.n	80017a4 <apply_delete_character_to_buffer+0x5c>
				newSize_after_all_deletions-=1;
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	3b01      	subs	r3, #1
 8001774:	82fb      	strh	r3, [r7, #22]
				for (uint32_t j = i; j < Size; ++j) {
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e00b      	b.n	8001794 <apply_delete_character_to_buffer+0x4c>
					pData[j]=pData[j+1]; //just shift the entire buffer effectively deleting the 'delete' character
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	441a      	add	r2, r3
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	440b      	add	r3, r1
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	701a      	strb	r2, [r3, #0]
				for (uint32_t j = i; j < Size; ++j) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d3ef      	bcc.n	800177c <apply_delete_character_to_buffer+0x34>
				}
				i--;					 //recheck this index, it might have yet another 'del'
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3b01      	subs	r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	e016      	b.n	80017d2 <apply_delete_character_to_buffer+0x8a>
			}else{					//if the delete was NOT at the start of the buffer
				newSize_after_all_deletions-=2;
 80017a4:	8afb      	ldrh	r3, [r7, #22]
 80017a6:	3b02      	subs	r3, #2
 80017a8:	82fb      	strh	r3, [r7, #22]
				for (uint32_t j = i; j < Size; ++j) {
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	e00c      	b.n	80017ca <apply_delete_character_to_buffer+0x82>
					pData[j-1]=pData[j+1]; //shift the entire buffer effectively deleting the 'delete' character and the previous one
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	441a      	add	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	440b      	add	r3, r1
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
				for (uint32_t j = i; j < Size; ++j) {
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3ee      	bcc.n	80017b0 <apply_delete_character_to_buffer+0x68>
	for (uint32_t i = 0; i < Size; ++i) { //apply the "delete"=='/127' characters to received buffer
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	3301      	adds	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3be      	bcc.n	800175e <apply_delete_character_to_buffer+0x16>
				}
			}
		}
	}
	return newSize_after_all_deletions;
 80017e0:	8afb      	ldrh	r3, [r7, #22]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <decode_char_to_hall_signals_order>:

hall_signals_order decode_char_to_hall_signals_order(uint8_t *pData){
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	hall_signals_order returning_hallx=hall_order_unknown;
 80017f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fc:	81fb      	strh	r3, [r7, #14]

	switch (*pData) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3b41      	subs	r3, #65	; 0x41
 8001804:	2b22      	cmp	r3, #34	; 0x22
 8001806:	d852      	bhi.n	80018ae <decode_char_to_hall_signals_order+0xbe>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <decode_char_to_hall_signals_order+0x20>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800189d 	.word	0x0800189d
 8001814:	080018a3 	.word	0x080018a3
 8001818:	080018a9 	.word	0x080018a9
 800181c:	080018af 	.word	0x080018af
 8001820:	080018af 	.word	0x080018af
 8001824:	080018af 	.word	0x080018af
 8001828:	080018af 	.word	0x080018af
 800182c:	080018af 	.word	0x080018af
 8001830:	080018af 	.word	0x080018af
 8001834:	080018af 	.word	0x080018af
 8001838:	080018af 	.word	0x080018af
 800183c:	080018af 	.word	0x080018af
 8001840:	080018af 	.word	0x080018af
 8001844:	080018af 	.word	0x080018af
 8001848:	080018af 	.word	0x080018af
 800184c:	080018af 	.word	0x080018af
 8001850:	080018af 	.word	0x080018af
 8001854:	080018af 	.word	0x080018af
 8001858:	080018af 	.word	0x080018af
 800185c:	080018af 	.word	0x080018af
 8001860:	080018af 	.word	0x080018af
 8001864:	080018af 	.word	0x080018af
 8001868:	080018af 	.word	0x080018af
 800186c:	080018af 	.word	0x080018af
 8001870:	080018af 	.word	0x080018af
 8001874:	080018af 	.word	0x080018af
 8001878:	080018af 	.word	0x080018af
 800187c:	080018af 	.word	0x080018af
 8001880:	080018af 	.word	0x080018af
 8001884:	080018af 	.word	0x080018af
 8001888:	080018af 	.word	0x080018af
 800188c:	080018af 	.word	0x080018af
 8001890:	0800189d 	.word	0x0800189d
 8001894:	080018a3 	.word	0x080018a3
 8001898:	080018a9 	.word	0x080018a9
		case 'a':
		case 'A':
			returning_hallx=hall_A;
 800189c:	2300      	movs	r3, #0
 800189e:	81fb      	strh	r3, [r7, #14]
			break;
 80018a0:	e009      	b.n	80018b6 <decode_char_to_hall_signals_order+0xc6>
		case 'b':
		case 'B':
			returning_hallx=hall_B;
 80018a2:	2301      	movs	r3, #1
 80018a4:	81fb      	strh	r3, [r7, #14]
			break;
 80018a6:	e006      	b.n	80018b6 <decode_char_to_hall_signals_order+0xc6>
		case 'c':
		case 'C':
			returning_hallx=hall_C;
 80018a8:	2302      	movs	r3, #2
 80018aa:	81fb      	strh	r3, [r7, #14]
			break;
 80018ac:	e003      	b.n	80018b6 <decode_char_to_hall_signals_order+0xc6>
		default:
			returning_hallx=hall_order_unknown;
 80018ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b2:	81fb      	strh	r3, [r7, #14]
			break;
 80018b4:	bf00      	nop
	}

	return returning_hallx;
 80018b6:	89fb      	ldrh	r3, [r7, #14]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <decode_char_to_hall_signals_polarity>:

hall_signals_polarity decode_char_to_hall_signals_polarity(uint8_t *pData){
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	hall_signals_polarity returning_hall_polarity=hall_polarity_unknown;
 80018cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d0:	81fb      	strh	r3, [r7, #14]

	switch (*pData) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b21      	cmp	r3, #33	; 0x21
 80018d8:	d102      	bne.n	80018e0 <decode_char_to_hall_signals_polarity+0x1c>
		case '!':
			returning_hall_polarity=hall_inverse;
 80018da:	2301      	movs	r3, #1
 80018dc:	81fb      	strh	r3, [r7, #14]
			break;
 80018de:	e002      	b.n	80018e6 <decode_char_to_hall_signals_polarity+0x22>
		default:
			returning_hall_polarity=hall_direct;
 80018e0:	2300      	movs	r3, #0
 80018e2:	81fb      	strh	r3, [r7, #14]
			break;
 80018e4:	bf00      	nop
	}

	return returning_hall_polarity;
 80018e6:	89fb      	ldrh	r3, [r7, #14]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <reset_or_start_uart_DMA_communications>:

void reset_or_start_uart_DMA_communications(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive(&hlpuart1);
 80018f8:	4806      	ldr	r0, [pc, #24]	; (8001914 <reset_or_start_uart_DMA_communications+0x20>)
 80018fa:	f004 fb35 	bl	8005f68 <HAL_UART_AbortReceive>
	HAL_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 f924 	bl	8001b4c <HAL_Delay>
	HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, rx_buffer, sizeof (rx_buffer));	//assign the dma+uart with the reception buffer
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <reset_or_start_uart_DMA_communications+0x24>)
 800190a:	4802      	ldr	r0, [pc, #8]	; (8001914 <reset_or_start_uart_DMA_communications+0x20>)
 800190c:	f005 ff4d 	bl	80077aa <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200003cc 	.word	0x200003cc
 8001918:	200005ac 	.word	0x200005ac

0800191c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
	rx_flag=1;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_UARTEx_RxEventCallback+0x28>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
	rx_size=Size;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001948:	701a      	strb	r2, [r3, #0]

}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200006ac 	.word	0x200006ac
 800195c:	200006ad 	.word	0x200006ad

08001960 <emulation>:

/**
* \brief to be placed in main() superloop, constanly on the lookout for changes in emulator_enabled.
* manages the enable/disable function logic.
*/
void emulation(){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	if(emulator_enabled!=old_emulator_enabled){	//there is a change in emulator_enabled
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <emulation+0x30>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <emulation+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d00c      	beq.n	800198a <emulation+0x2a>
		if(emulator_enabled==0){
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <emulation+0x30>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <emulation+0x1e>
			disable_emulator();
 8001978:	f000 f838 	bl	80019ec <disable_emulator>
 800197c:	e001      	b.n	8001982 <emulation+0x22>
		}else{
			enable_emulator();
 800197e:	f000 f80b 	bl	8001998 <enable_emulator>
		}
		old_emulator_enabled=emulator_enabled;	//update old_emulator_enabled
 8001982:	4b03      	ldr	r3, [pc, #12]	; (8001990 <emulation+0x30>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a03      	ldr	r2, [pc, #12]	; (8001994 <emulation+0x34>)
 8001988:	6013      	str	r3, [r2, #0]
	}
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200006b0 	.word	0x200006b0
 8001994:	200006b4 	.word	0x200006b4

08001998 <enable_emulator>:

/**
* \brief disables tim8 , configures DAC+DMA in circular mode, reenables tim8
*/
void enable_emulator(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af02      	add	r7, sp, #8
	    dma_index=0;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <enable_emulator+0x40>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim8);
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <enable_emulator+0x44>)
 80019a6:	f003 fd2f 	bl	8005408 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)&current_A, sizeof(current_A)/sizeof(current_A[0]), DAC_ALIGN_12B_R);
 80019aa:	2300      	movs	r3, #0
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2384      	movs	r3, #132	; 0x84
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <enable_emulator+0x48>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <enable_emulator+0x4c>)
 80019b6:	f001 fc4b 	bl	8003250 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)&current_B, sizeof(current_B)/sizeof(current_B[0]), DAC_ALIGN_12B_R);
 80019ba:	2300      	movs	r3, #0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2384      	movs	r3, #132	; 0x84
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <enable_emulator+0x50>)
 80019c2:	2110      	movs	r1, #16
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <enable_emulator+0x4c>)
 80019c6:	f001 fc43 	bl	8003250 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption (DAC+DMA trigger)
 80019ca:	4804      	ldr	r0, [pc, #16]	; (80019dc <enable_emulator+0x44>)
 80019cc:	f003 fcb2 	bl	8005334 <HAL_TIM_Base_Start_IT>

}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000037c 	.word	0x2000037c
 80019dc:	20000380 	.word	0x20000380
 80019e0:	080079a4 	.word	0x080079a4
 80019e4:	2000028c 	.word	0x2000028c
 80019e8:	08007bb4 	.word	0x08007bb4

080019ec <disable_emulator>:

/**
* \brief stops DAC+DMA in circular mode
*/
void disable_emulator(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	    HAL_TIM_Base_Stop_IT(&htim8);
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <disable_emulator+0x24>)
 80019f2:	f003 fd09 	bl	8005408 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80019f6:	2100      	movs	r1, #0
 80019f8:	4806      	ldr	r0, [pc, #24]	; (8001a14 <disable_emulator+0x28>)
 80019fa:	f001 fcf7 	bl	80033ec <HAL_DAC_Stop_DMA>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 80019fe:	2110      	movs	r1, #16
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <disable_emulator+0x28>)
 8001a02:	f001 fcf3 	bl	80033ec <HAL_DAC_Stop_DMA>
		HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption (DAC+DMA trigger)
 8001a06:	4802      	ldr	r0, [pc, #8]	; (8001a10 <disable_emulator+0x24>)
 8001a08:	f003 fc94 	bl	8005334 <HAL_TIM_Base_Start_IT>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000380 	.word	0x20000380
 8001a14:	2000028c 	.word	0x2000028c

08001a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a42:	f7ff fa59 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f005 ff79 	bl	800793c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4a:	f7ff f94d 	bl	8000ce8 <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   r0, =_estack
 8001a50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001a5c:	08008488 	.word	0x08008488
  ldr r2, =_sbss
 8001a60:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001a64:	200006bc 	.word	0x200006bc

08001a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_2_IRQHandler>

08001a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f001 fb89 	bl	800318c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f80e 	bl	8001a9c <HAL_InitTick>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	e001      	b.n	8001a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8c:	f7ff f99e 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a90:	79fb      	ldrb	r3, [r7, #7]

}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_InitTick+0x68>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d022      	beq.n	8001af6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_InitTick+0x6c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_InitTick+0x68>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fb94 	bl	80031f2 <HAL_SYSTICK_Config>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10f      	bne.n	8001af0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	d809      	bhi.n	8001aea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295
 8001ade:	f001 fb60 	bl	80031a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_InitTick+0x70>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e007      	b.n	8001afa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e004      	b.n	8001afa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200001a0 	.word	0x200001a0
 8001b08:	20000198 	.word	0x20000198
 8001b0c:	2000019c 	.word	0x2000019c

08001b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x1c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_IncTick+0x20>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_IncTick+0x1c>)
 8001b20:	6013      	str	r3, [r2, #0]
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	200006b8 	.word	0x200006b8
 8001b30:	200001a0 	.word	0x200001a0

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200006b8 	.word	0x200006b8

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff ffee 	bl	8001b34 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d004      	beq.n	8001b70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_Delay+0x40>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b70:	bf00      	nop
 8001b72:	f7ff ffdf 	bl	8001b34 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d8f7      	bhi.n	8001b72 <HAL_Delay+0x26>
  {
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200001a0 	.word	0x200001a0

08001b90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3360      	adds	r3, #96	; 0x60
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <LL_ADC_SetOffset+0x44>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	03fff000 	.word	0x03fff000

08001c40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3360      	adds	r3, #96	; 0x60
 8001c4e:	461a      	mov	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3360      	adds	r3, #96	; 0x60
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	; 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3360      	adds	r3, #96	; 0x60
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	615a      	str	r2, [r3, #20]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3330      	adds	r3, #48	; 0x30
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	211f      	movs	r1, #31
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	f003 011f 	and.w	r1, r3, #31
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	431a      	orrs	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001da6:	bf00      	nop
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b087      	sub	sp, #28
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3314      	adds	r3, #20
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0e5b      	lsrs	r3, r3, #25
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0d1b      	lsrs	r3, r3, #20
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	2107      	movs	r1, #7
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0d1b      	lsrs	r3, r3, #20
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	431a      	orrs	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10a      	bne.n	8001e32 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001e30:	e00a      	b.n	8001e48 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	407f0000 	.word	0x407f0000

08001e58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 031f 	and.w	r3, r3, #31
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6093      	str	r3, [r2, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eac:	d101      	bne.n	8001eb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <LL_ADC_IsEnabled+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_ADC_IsEnabled+0x1a>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d101      	bne.n	8001fc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e177      	b.n	80022de <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe fb23 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff3f 	bl	8001e98 <LL_ADC_IsDeepPowerDownEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff25 	bl	8001e74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff5a 	bl	8001ee8 <LL_ADC_IsInternalRegulatorEnabled>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff3e 	bl	8001ec0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002044:	4b9c      	ldr	r3, [pc, #624]	; (80022b8 <HAL_ADC_Init+0x2e4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	4a9c      	ldr	r2, [pc, #624]	; (80022bc <HAL_ADC_Init+0x2e8>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002058:	e002      	b.n	8002060 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff3c 	bl	8001ee8 <LL_ADC_IsInternalRegulatorEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff75 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 800209c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8110 	bne.w	80022cc <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 810c 	bne.w	80022cc <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020bc:	f043 0202 	orr.w	r2, r3, #2
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff35 	bl	8001f38 <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020d8:	f7ff ff2e 	bl	8001f38 <LL_ADC_IsEnabled>
 80020dc:	4604      	mov	r4, r0
 80020de:	4878      	ldr	r0, [pc, #480]	; (80022c0 <HAL_ADC_Init+0x2ec>)
 80020e0:	f7ff ff2a 	bl	8001f38 <LL_ADC_IsEnabled>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4323      	orrs	r3, r4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4874      	ldr	r0, [pc, #464]	; (80022c4 <HAL_ADC_Init+0x2f0>)
 80020f4:	f7ff fd4c 	bl	8001b90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7f5b      	ldrb	r3, [r3, #29]
 80020fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002102:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002108:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800210e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002116:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	3b01      	subs	r3, #1
 800212c:	045b      	lsls	r3, r3, #17
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d009      	beq.n	8002150 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_ADC_Init+0x2f4>)
 8002158:	4013      	ands	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	430b      	orrs	r3, r1
 8002162:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff01 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 8002184:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff0e 	bl	8001fac <LL_ADC_INJ_IsConversionOngoing>
 8002190:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d16d      	bne.n	8002274 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d16a      	bne.n	8002274 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ba:	f023 0302 	bic.w	r3, r3, #2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d017      	beq.n	8002200 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6911      	ldr	r1, [r2, #16]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80021fe:	e013      	b.n	8002228 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800220e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002224:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800222e:	2b01      	cmp	r3, #1
 8002230:	d118      	bne.n	8002264 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800224e:	4311      	orrs	r1, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002254:	430a      	orrs	r2, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	e007      	b.n	8002274 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10c      	bne.n	8002296 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f023 010f 	bic.w	r1, r3, #15
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
 8002294:	e007      	b.n	80022a6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 020f 	bic.w	r2, r2, #15
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80022b6:	e011      	b.n	80022dc <HAL_ADC_Init+0x308>
 80022b8:	20000198 	.word	0x20000198
 80022bc:	053e2d63 	.word	0x053e2d63
 80022c0:	50000100 	.word	0x50000100
 80022c4:	50000300 	.word	0x50000300
 80022c8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}
 80022e6:	bf00      	nop

080022e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f4:	4851      	ldr	r0, [pc, #324]	; (800243c <HAL_ADC_Start_DMA+0x154>)
 80022f6:	f7ff fdaf 	bl	8001e58 <LL_ADC_GetMultimode>
 80022fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fe40 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 808f 	bne.w	800242c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADC_Start_DMA+0x34>
 8002318:	2302      	movs	r3, #2
 800231a:	e08a      	b.n	8002432 <HAL_ADC_Start_DMA+0x14a>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d002      	beq.n	8002336 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d173      	bne.n	800241e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fc98 	bl	8002c6c <ADC_Enable>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d166      	bne.n	8002414 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a38      	ldr	r2, [pc, #224]	; (8002440 <HAL_ADC_Start_DMA+0x158>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d002      	beq.n	800236a <HAL_ADC_Start_DMA+0x82>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	e001      	b.n	800236e <HAL_ADC_Start_DMA+0x86>
 800236a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4293      	cmp	r3, r2
 8002374:	d002      	beq.n	800237c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	f023 0206 	bic.w	r2, r3, #6
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	661a      	str	r2, [r3, #96]	; 0x60
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_ADC_Start_DMA+0x15c>)
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_ADC_Start_DMA+0x160>)
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	4a23      	ldr	r2, [pc, #140]	; (800244c <HAL_ADC_Start_DMA+0x164>)
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	221c      	movs	r2, #28
 80023c6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0210 	orr.w	r2, r2, #16
 80023de:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3340      	adds	r3, #64	; 0x40
 80023fa:	4619      	mov	r1, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f001 fb38 	bl	8003a74 <HAL_DMA_Start_IT>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fda6 	bl	8001f5e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002412:	e00d      	b.n	8002430 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800241c:	e008      	b.n	8002430 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800242a:	e001      	b.n	8002430 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800242c:	2302      	movs	r3, #2
 800242e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	50000300 	.word	0x50000300
 8002440:	50000100 	.word	0x50000100
 8002444:	08002d31 	.word	0x08002d31
 8002448:	08002e09 	.word	0x08002e09
 800244c:	08002e25 	.word	0x08002e25

08002450 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0b6      	sub	sp, #216	; 0xd8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x22>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e3c8      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x7b4>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fd63 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 83ad 	bne.w	8002c22 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	f7ff fc40 	bl	8001d5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fd51 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 80024e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fd5d 	bl	8001fac <LL_ADC_INJ_IsConversionOngoing>
 80024f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 81d9 	bne.w	80028b2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 81d4 	bne.w	80028b2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002512:	d10f      	bne.n	8002534 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	f7ff fc47 	bl	8001db2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbee 	bl	8001d0e <LL_ADC_SetSamplingTimeCommonConfig>
 8002532:	e00e      	b.n	8002552 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	461a      	mov	r2, r3
 8002542:	f7ff fc36 	bl	8001db2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fbde 	bl	8001d0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d022      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6919      	ldr	r1, [r3, #16]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002584:	f7ff fb38 	bl	8001bf8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	461a      	mov	r2, r3
 8002596:	f7ff fb84 	bl	8001ca2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6919      	ldr	r1, [r3, #16]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7f1b      	ldrb	r3, [r3, #28]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x124>
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	e000      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x126>
 80025b0:	2300      	movs	r3, #0
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7ff fb90 	bl	8001cd8 <LL_ADC_SetOffsetSaturation>
 80025b8:	e17b      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fb3d 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x15a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fb32 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	e01e      	b.n	8002624 <HAL_ADC_ConfigChannel+0x198>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fb27 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800260c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002614:	2320      	movs	r3, #32
 8002616:	e004      	b.n	8002622 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1b0>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	e018      	b.n	800266e <HAL_ADC_ConfigChannel+0x1e2>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e004      	b.n	800266e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800266e:	429a      	cmp	r2, r3
 8002670:	d106      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff faf6 	bl	8001c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fada 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x220>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff facf 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	e01e      	b.n	80026ea <HAL_ADC_ConfigChannel+0x25e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fac4 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e004      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80026de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x276>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	e018      	b.n	8002734 <HAL_ADC_ConfigChannel+0x2a8>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002716:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800271a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800271e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e004      	b.n	8002734 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800272a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002734:	429a      	cmp	r2, r3
 8002736:	d106      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fa93 	bl	8001c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2102      	movs	r1, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fa77 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x2e6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2102      	movs	r1, #2
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fa6c 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	0e9b      	lsrs	r3, r3, #26
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	e01e      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x324>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2102      	movs	r1, #2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fa61 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e004      	b.n	80027ae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80027a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x33c>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0e9b      	lsrs	r3, r3, #26
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	e016      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x36a>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e004      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80027ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fa32 	bl	8001c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2103      	movs	r1, #3
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fa16 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x3a8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2103      	movs	r1, #3
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fa0b 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 021f 	and.w	r2, r3, #31
 8002832:	e017      	b.n	8002864 <HAL_ADC_ConfigChannel+0x3d8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2103      	movs	r1, #3
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fa00 	bl	8001c40 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800284c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e003      	b.n	8002862 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800285a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_ADC_ConfigChannel+0x3f0>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	e011      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x414>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800288a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800288c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800288e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2103      	movs	r1, #3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f9dd 	bl	8001c6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb3e 	bl	8001f38 <LL_ADC_IsEnabled>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 8140 	bne.w	8002b44 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6819      	ldr	r1, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	461a      	mov	r2, r3
 80028d2:	f7ff fa99 	bl	8001e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4a8f      	ldr	r2, [pc, #572]	; (8002b18 <HAL_ADC_ConfigChannel+0x68c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	f040 8131 	bne.w	8002b44 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_ADC_ConfigChannel+0x47e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	0e9b      	lsrs	r3, r3, #26
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2b09      	cmp	r3, #9
 8002900:	bf94      	ite	ls
 8002902:	2301      	movls	r3, #1
 8002904:	2300      	movhi	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e019      	b.n	800293e <HAL_ADC_ConfigChannel+0x4b2>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800291a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800291c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002922:	2320      	movs	r3, #32
 8002924:	e003      	b.n	800292e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2b09      	cmp	r3, #9
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800293e:	2b00      	cmp	r3, #0
 8002940:	d079      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_ADC_ConfigChannel+0x4d2>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e9b      	lsrs	r3, r3, #26
 8002954:	3301      	adds	r3, #1
 8002956:	069b      	lsls	r3, r3, #26
 8002958:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800295c:	e015      	b.n	800298a <HAL_ADC_ConfigChannel+0x4fe>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800297a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x51e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	3301      	adds	r3, #1
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	e017      	b.n	80029da <HAL_ADC_ConfigChannel+0x54e>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80029c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	ea42 0103 	orr.w	r1, r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x574>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	051b      	lsls	r3, r3, #20
 80029fe:	e018      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x5a6>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 021f 	and.w	r2, r3, #31
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a32:	430b      	orrs	r3, r1
 8002a34:	e081      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x5c6>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	3301      	adds	r3, #1
 8002a4a:	069b      	lsls	r3, r3, #26
 8002a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a50:	e015      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x5f2>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	069b      	lsls	r3, r3, #26
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x612>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	e017      	b.n	8002ace <HAL_ADC_ConfigChannel+0x642>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
  return result;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x66e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	3b1e      	subs	r3, #30
 8002af2:	051b      	lsls	r3, r3, #20
 8002af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af8:	e01e      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x6ac>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	613b      	str	r3, [r7, #16]
  return result;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e006      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x698>
 8002b16:	bf00      	nop
 8002b18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f003 021f 	and.w	r2, r3, #31
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b1e      	subs	r3, #30
 8002b32:	051b      	lsls	r3, r3, #20
 8002b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7ff f937 	bl	8001db2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d071      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b50:	483e      	ldr	r0, [pc, #248]	; (8002c4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002b52:	f7ff f843 	bl	8001bdc <LL_ADC_GetCommonPathInternalCh>
 8002b56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3c      	ldr	r2, [pc, #240]	; (8002c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x6e2>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a3a      	ldr	r2, [pc, #232]	; (8002c54 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d127      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d121      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b82:	d157      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	482f      	ldr	r0, [pc, #188]	; (8002c4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002b90:	f7ff f811 	bl	8001bb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bae:	e002      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bbc:	e03a      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_ADC_ConfigChannel+0x7d4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d113      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x764>
 8002bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10d      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02a      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	4619      	mov	r1, r3
 8002be8:	4818      	ldr	r0, [pc, #96]	; (8002c4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002bea:	f7fe ffe4 	bl	8001bb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bee:	e021      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d11c      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d011      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480c      	ldr	r0, [pc, #48]	; (8002c4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c1c:	f7fe ffcb 	bl	8001bb6 <LL_ADC_SetCommonPathInternalCh>
 8002c20:	e008      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	37d8      	adds	r7, #216	; 0xd8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	80080000 	.word	0x80080000
 8002c4c:	50000300 	.word	0x50000300
 8002c50:	c3210000 	.word	0xc3210000
 8002c54:	90c00010 	.word	0x90c00010
 8002c58:	20000198 	.word	0x20000198
 8002c5c:	053e2d63 	.word	0x053e2d63
 8002c60:	c7520000 	.word	0xc7520000
 8002c64:	50000100 	.word	0x50000100
 8002c68:	cb840000 	.word	0xcb840000

08002c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f95d 	bl	8001f38 <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d14d      	bne.n	8002d20 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <ADC_Enable+0xc0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f043 0210 	orr.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e039      	b.n	8002d22 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f92c 	bl	8001f10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe ff3c 	bl	8001b34 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cbe:	e028      	b.n	8002d12 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f937 	bl	8001f38 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f91b 	bl	8001f10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cda:	f7fe ff2b 	bl	8001b34 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d914      	bls.n	8002d12 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d00d      	beq.n	8002d12 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d1cf      	bne.n	8002cc0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	8000003f 	.word	0x8000003f

08002d30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d14b      	bne.n	8002de2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d021      	beq.n	8002da8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe ffe3 	bl	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d032      	beq.n	8002dda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12b      	bne.n	8002dda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002da6:	e018      	b.n	8002dda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d111      	bne.n	8002dda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fb38 	bl	8002450 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002de0:	e00e      	b.n	8002e00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff fb42 	bl	8002478 <HAL_ADC_ErrorCallback>
}
 8002df4:	e004      	b.n	8002e00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff fb24 	bl	8002464 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fb14 	bl	8002478 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <LL_ADC_IsEnabled>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_IsEnabled+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_IsEnabled+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b0a1      	sub	sp, #132	; 0x84
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e08b      	b.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	e001      	b.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e06a      	b.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ffb9 	bl	8002e7e <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ffb3 	bl	8002e7e <LL_ADC_REG_IsConversionOngoing>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d14c      	bne.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d149      	bne.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f26:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d028      	beq.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f42:	035b      	lsls	r3, r3, #13
 8002f44:	430b      	orrs	r3, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f50:	f7ff ff82 	bl	8002e58 <LL_ADC_IsEnabled>
 8002f54:	4604      	mov	r4, r0
 8002f56:	4823      	ldr	r0, [pc, #140]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f58:	f7ff ff7e 	bl	8002e58 <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d133      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f6c:	f023 030f 	bic.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	6811      	ldr	r1, [r2, #0]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f80:	e024      	b.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f92:	f7ff ff61 	bl	8002e58 <LL_ADC_IsEnabled>
 8002f96:	4604      	mov	r4, r0
 8002f98:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f9a:	f7ff ff5d 	bl	8002e58 <LL_ADC_IsEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4323      	orrs	r3, r4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d112      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fae:	f023 030f 	bic.w	r3, r3, #15
 8002fb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb6:	e009      	b.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fca:	e000      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fd6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3784      	adds	r7, #132	; 0x84
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	50000100 	.word	0x50000100
 8002fe8:	50000300 	.word	0x50000300

08002fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003008:	4013      	ands	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <__NVIC_SetPriorityGrouping+0x44>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <__NVIC_GetPriorityGrouping+0x18>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0307 	and.w	r3, r3, #7
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	2b00      	cmp	r3, #0
 8003060:	db0b      	blt.n	800307a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4907      	ldr	r1, [pc, #28]	; (8003088 <__NVIC_EnableIRQ+0x38>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2001      	movs	r0, #1
 8003072:	fa00 f202 	lsl.w	r2, r0, r2
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000e100 	.word	0xe000e100

0800308c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db0a      	blt.n	80030b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	490c      	ldr	r1, [pc, #48]	; (80030d8 <__NVIC_SetPriority+0x4c>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	440b      	add	r3, r1
 80030b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b4:	e00a      	b.n	80030cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <__NVIC_SetPriority+0x50>)
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	3b04      	subs	r3, #4
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	440b      	add	r3, r1
 80030ca:	761a      	strb	r2, [r3, #24]
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000e100 	.word	0xe000e100
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf28      	it	cs
 80030fe:	2304      	movcs	r3, #4
 8003100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3304      	adds	r3, #4
 8003106:	2b06      	cmp	r3, #6
 8003108:	d902      	bls.n	8003110 <NVIC_EncodePriority+0x30>
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3b03      	subs	r3, #3
 800310e:	e000      	b.n	8003112 <NVIC_EncodePriority+0x32>
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	401a      	ands	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003128:	f04f 31ff 	mov.w	r1, #4294967295
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43d9      	mvns	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	4313      	orrs	r3, r2
         );
}
 800313a:	4618      	mov	r0, r3
 800313c:	3724      	adds	r7, #36	; 0x24
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d301      	bcc.n	800315e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315a:	2301      	movs	r3, #1
 800315c:	e00f      	b.n	800317e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <SysTick_Config+0x40>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003166:	210f      	movs	r1, #15
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f7ff ff8e 	bl	800308c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SysTick_Config+0x40>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <SysTick_Config+0x40>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	e000e010 	.word	0xe000e010

0800318c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff29 	bl	8002fec <__NVIC_SetPriorityGrouping>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff40 	bl	8003034 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff90 	bl	80030e0 <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5f 	bl	800308c <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff33 	bl	8003050 <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa4 	bl	8003148 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e014      	b.n	8003246 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	791b      	ldrb	r3, [r3, #4]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd faed 	bl	800080c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	795b      	ldrb	r3, [r3, #5]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_DAC_Start_DMA+0x1e>
 800326a:	2302      	movs	r3, #2
 800326c:	e0ae      	b.n	80033cc <HAL_DAC_Start_DMA+0x17c>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2202      	movs	r2, #2
 8003278:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d12f      	bne.n	80032e0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a53      	ldr	r2, [pc, #332]	; (80033d4 <HAL_DAC_Start_DMA+0x184>)
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_DAC_Start_DMA+0x188>)
 800328e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_DAC_Start_DMA+0x18c>)
 8003296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d013      	beq.n	80032d6 <HAL_DAC_Start_DMA+0x86>
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d845      	bhi.n	8003340 <HAL_DAC_Start_DMA+0xf0>
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_DAC_Start_DMA+0x72>
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d005      	beq.n	80032cc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80032c0:	e03e      	b.n	8003340 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3308      	adds	r3, #8
 80032c8:	613b      	str	r3, [r7, #16]
        break;
 80032ca:	e03c      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	613b      	str	r3, [r7, #16]
        break;
 80032d4:	e037      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3310      	adds	r3, #16
 80032dc:	613b      	str	r3, [r7, #16]
        break;
 80032de:	e032      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a3e      	ldr	r2, [pc, #248]	; (80033e0 <HAL_DAC_Start_DMA+0x190>)
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a3d      	ldr	r2, [pc, #244]	; (80033e4 <HAL_DAC_Start_DMA+0x194>)
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <HAL_DAC_Start_DMA+0x198>)
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003306:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b08      	cmp	r3, #8
 800330c:	d013      	beq.n	8003336 <HAL_DAC_Start_DMA+0xe6>
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d817      	bhi.n	8003344 <HAL_DAC_Start_DMA+0xf4>
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_DAC_Start_DMA+0xd2>
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d005      	beq.n	800332c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003320:	e010      	b.n	8003344 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3314      	adds	r3, #20
 8003328:	613b      	str	r3, [r7, #16]
        break;
 800332a:	e00c      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3318      	adds	r3, #24
 8003332:	613b      	str	r3, [r7, #16]
        break;
 8003334:	e007      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	331c      	adds	r3, #28
 800333c:	613b      	str	r3, [r7, #16]
        break;
 800333e:	e002      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003344:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800335a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6898      	ldr	r0, [r3, #8]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	f000 fb85 	bl	8003a74 <HAL_DMA_Start_IT>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]
 800336e:	e010      	b.n	8003392 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800337e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68d8      	ldr	r0, [r3, #12]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	f000 fb73 	bl	8003a74 <HAL_DMA_Start_IT>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7fe fbc8 	bl	8001b4c <HAL_Delay>
 80033bc:	e005      	b.n	80033ca <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f043 0204 	orr.w	r2, r3, #4
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	08003811 	.word	0x08003811
 80033d8:	08003833 	.word	0x08003833
 80033dc:	0800384f 	.word	0x0800384f
 80033e0:	080038b9 	.word	0x080038b9
 80033e4:	080038db 	.word	0x080038db
 80033e8:	080038f7 	.word	0x080038f7

080033ec <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	400a      	ands	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2201      	movs	r2, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe fb8b 	bl	8001b4c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fb92 	bl	8003b6a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00c      	b.n	8003472 <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fb84 	bl	8003b6a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003470:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	795b      	ldrb	r3, [r3, #5]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_DAC_ConfigChannel+0x18>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e192      	b.n	80037fe <HAL_DAC_ConfigChannel+0x33e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2202      	movs	r2, #2
 80034e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d174      	bne.n	80035d6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034ec:	f7fe fb22 	bl	8001b34 <HAL_GetTick>
 80034f0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d134      	bne.n	8003562 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f8:	e011      	b.n	800351e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034fa:	f7fe fb1b 	bl	8001b34 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d90a      	bls.n	800351e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f043 0208 	orr.w	r2, r3, #8
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2203      	movs	r2, #3
 8003518:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e16f      	b.n	80037fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e6      	bne.n	80034fa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800352c:	2001      	movs	r0, #1
 800352e:	f7fe fb0d 	bl	8001b4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
 800353c:	e01e      	b.n	800357c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800353e:	f7fe faf9 	bl	8001b34 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d90a      	bls.n	8003562 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f043 0208 	orr.w	r2, r3, #8
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2203      	movs	r2, #3
 800355c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e14d      	b.n	80037fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	2b00      	cmp	r3, #0
 800356a:	dbe8      	blt.n	800353e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800356c:	2001      	movs	r0, #1
 800356e:	f7fe faed 	bl	8001b4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	ea02 0103 	and.w	r1, r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	409a      	lsls	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	21ff      	movs	r1, #255	; 0xff
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	ea02 0103 	and.w	r1, r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d11d      	bne.n	800361a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	221f      	movs	r2, #31
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4013      	ands	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	4313      	orrs	r3, r2
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2207      	movs	r2, #7
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	4013      	ands	r3, r2
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	e00f      	b.n	8003664 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d102      	bne.n	8003652 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800364c:	2301      	movs	r3, #1
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	e008      	b.n	8003664 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800365a:	2301      	movs	r3, #1
 800365c:	623b      	str	r3, [r7, #32]
 800365e:	e001      	b.n	8003664 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	6a3a      	ldr	r2, [r7, #32]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	4013      	ands	r3, r2
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	791b      	ldrb	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_DAC_ConfigChannel+0x1d8>
 8003692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003696:	e000      	b.n	800369a <HAL_DAC_ConfigChannel+0x1da>
 8003698:	2300      	movs	r3, #0
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	4013      	ands	r3, r2
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	795b      	ldrb	r3, [r3, #5]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_DAC_ConfigChannel+0x204>
 80036be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c2:	e000      	b.n	80036c6 <HAL_DAC_ConfigChannel+0x206>
 80036c4:	2300      	movs	r3, #0
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d114      	bne.n	8003706 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80036dc:	f001 fb64 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 80036e0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4a48      	ldr	r2, [pc, #288]	; (8003808 <HAL_DAC_ConfigChannel+0x348>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d904      	bls.n	80036f4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	e00f      	b.n	8003714 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4a45      	ldr	r2, [pc, #276]	; (800380c <HAL_DAC_ConfigChannel+0x34c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d90a      	bls.n	8003712 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	e006      	b.n	8003714 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370c:	4313      	orrs	r3, r2
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e000      	b.n	8003714 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003712:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	4313      	orrs	r3, r2
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	400a      	ands	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	4013      	ands	r3, r2
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	4313      	orrs	r3, r2
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	22c0      	movs	r2, #192	; 0xc0
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43da      	mvns	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	400a      	ands	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	ea02 0103 	and.w	r1, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	09896800 	.word	0x09896800
 800380c:	04c4b400 	.word	0x04c4b400

08003810 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff fe2f 	bl	8003482 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	711a      	strb	r2, [r3, #4]
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fe28 	bl	8003496 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f043 0204 	orr.w	r2, r3, #4
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff fe1e 	bl	80034aa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	711a      	strb	r2, [r3, #4]
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ffd8 	bl	800387c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	711a      	strb	r2, [r3, #4]
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff ffd1 	bl	8003890 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff ffc7 	bl	80038a4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	711a      	strb	r2, [r3, #4]
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e08d      	b.n	8003a52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_DMA_Init+0x138>)
 800393e:	429a      	cmp	r2, r3
 8003940:	d80f      	bhi.n	8003962 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4b45      	ldr	r3, [pc, #276]	; (8003a60 <HAL_DMA_Init+0x13c>)
 800394a:	4413      	add	r3, r2
 800394c:	4a45      	ldr	r2, [pc, #276]	; (8003a64 <HAL_DMA_Init+0x140>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <HAL_DMA_Init+0x144>)
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
 8003960:	e00e      	b.n	8003980 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b40      	ldr	r3, [pc, #256]	; (8003a6c <HAL_DMA_Init+0x148>)
 800396a:	4413      	add	r3, r2
 800396c:	4a3d      	ldr	r2, [pc, #244]	; (8003a64 <HAL_DMA_Init+0x140>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <HAL_DMA_Init+0x14c>)
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa82 	bl	8003edc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e0:	d102      	bne.n	80039e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_DMA_Init+0x104>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d80c      	bhi.n	8003a28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 faa2 	bl	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	e008      	b.n	8003a3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40020407 	.word	0x40020407
 8003a60:	bffdfff8 	.word	0xbffdfff8
 8003a64:	cccccccd 	.word	0xcccccccd
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	bffdfbf8 	.word	0xbffdfbf8
 8003a70:	40020400 	.word	0x40020400

08003a74 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_DMA_Start_IT+0x20>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e066      	b.n	8003b62 <HAL_DMA_Start_IT+0xee>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d155      	bne.n	8003b54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f9c7 	bl	8003e60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 020e 	orr.w	r2, r2, #14
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e00f      	b.n	8003b0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0204 	bic.w	r2, r2, #4
 8003afa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 020a 	orr.w	r2, r2, #10
 8003b0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e005      	b.n	8003b60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d005      	beq.n	8003b8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
 8003b8c:	e037      	b.n	8003bfe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 020e 	bic.w	r2, r2, #14
 8003b9c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 021f 	and.w	r2, r3, #31
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2101      	movs	r1, #1
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bda:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bfc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d00d      	beq.n	8003c50 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e047      	b.n	8003ce0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 020e 	bic.w	r2, r2, #14
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c9c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cbe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
    }
  }
  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d026      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x7a>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d021      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0204 	bic.w	r2, r2, #4
 8003d3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f003 021f 	and.w	r2, r3, #31
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d071      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d62:	e06c      	b.n	8003e3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02e      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d029      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020a 	bic.w	r2, r2, #10
 8003d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	2102      	movs	r1, #2
 8003db6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d038      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dd4:	e033      	b.n	8003e3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2208      	movs	r2, #8
 8003de0:	409a      	lsls	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02a      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d025      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 020e 	bic.w	r2, r2, #14
 8003e02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f202 	lsl.w	r2, r1, r2
 8003e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
}
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e76:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f003 021f 	and.w	r2, r3, #31
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d108      	bne.n	8003ec0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ebe:	e007      	b.n	8003ed0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d802      	bhi.n	8003ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e001      	b.n	8003efa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ef8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	3b08      	subs	r3, #8
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	009a      	lsls	r2, r3, #2
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2201      	movs	r2, #1
 8003f30:	409a      	lsls	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40020407 	.word	0x40020407
 8003f48:	40020800 	.word	0x40020800
 8003f4c:	40020820 	.word	0x40020820
 8003f50:	cccccccd 	.word	0xcccccccd
 8003f54:	40020880 	.word	0x40020880

08003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	461a      	mov	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	1000823f 	.word	0x1000823f
 8003f9c:	40020940 	.word	0x40020940

08003fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fae:	e15a      	b.n	8004266 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 814c 	beq.w	8004260 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d005      	beq.n	8003fe0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d130      	bne.n	8004042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	2203      	movs	r2, #3
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004016:	2201      	movs	r2, #1
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	091b      	lsrs	r3, r3, #4
 800402c:	f003 0201 	and.w	r2, r3, #1
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b03      	cmp	r3, #3
 800404c:	d017      	beq.n	800407e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d123      	bne.n	80040d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	08da      	lsrs	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3208      	adds	r2, #8
 8004092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	220f      	movs	r2, #15
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	08da      	lsrs	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3208      	adds	r2, #8
 80040cc:	6939      	ldr	r1, [r7, #16]
 80040ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	2203      	movs	r2, #3
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 0203 	and.w	r2, r3, #3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80a6 	beq.w	8004260 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004114:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_GPIO_Init+0x2e4>)
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	4a5a      	ldr	r2, [pc, #360]	; (8004284 <HAL_GPIO_Init+0x2e4>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6613      	str	r3, [r2, #96]	; 0x60
 8004120:	4b58      	ldr	r3, [pc, #352]	; (8004284 <HAL_GPIO_Init+0x2e4>)
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412c:	4a56      	ldr	r2, [pc, #344]	; (8004288 <HAL_GPIO_Init+0x2e8>)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	220f      	movs	r2, #15
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004156:	d01f      	beq.n	8004198 <HAL_GPIO_Init+0x1f8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a4c      	ldr	r2, [pc, #304]	; (800428c <HAL_GPIO_Init+0x2ec>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d019      	beq.n	8004194 <HAL_GPIO_Init+0x1f4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a4b      	ldr	r2, [pc, #300]	; (8004290 <HAL_GPIO_Init+0x2f0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_GPIO_Init+0x1f0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a4a      	ldr	r2, [pc, #296]	; (8004294 <HAL_GPIO_Init+0x2f4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00d      	beq.n	800418c <HAL_GPIO_Init+0x1ec>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a49      	ldr	r2, [pc, #292]	; (8004298 <HAL_GPIO_Init+0x2f8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <HAL_GPIO_Init+0x1e8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a48      	ldr	r2, [pc, #288]	; (800429c <HAL_GPIO_Init+0x2fc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_GPIO_Init+0x1e4>
 8004180:	2305      	movs	r3, #5
 8004182:	e00a      	b.n	800419a <HAL_GPIO_Init+0x1fa>
 8004184:	2306      	movs	r3, #6
 8004186:	e008      	b.n	800419a <HAL_GPIO_Init+0x1fa>
 8004188:	2304      	movs	r3, #4
 800418a:	e006      	b.n	800419a <HAL_GPIO_Init+0x1fa>
 800418c:	2303      	movs	r3, #3
 800418e:	e004      	b.n	800419a <HAL_GPIO_Init+0x1fa>
 8004190:	2302      	movs	r3, #2
 8004192:	e002      	b.n	800419a <HAL_GPIO_Init+0x1fa>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_GPIO_Init+0x1fa>
 8004198:	2300      	movs	r3, #0
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	f002 0203 	and.w	r2, r2, #3
 80041a0:	0092      	lsls	r2, r2, #2
 80041a2:	4093      	lsls	r3, r2
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041aa:	4937      	ldr	r1, [pc, #220]	; (8004288 <HAL_GPIO_Init+0x2e8>)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b8:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <HAL_GPIO_Init+0x300>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041dc:	4a30      	ldr	r2, [pc, #192]	; (80042a0 <HAL_GPIO_Init+0x300>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041e2:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <HAL_GPIO_Init+0x300>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_GPIO_Init+0x300>)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800420c:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_GPIO_Init+0x300>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	43db      	mvns	r3, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004230:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_GPIO_Init+0x300>)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_GPIO_Init+0x300>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	43db      	mvns	r3, r3
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800425a:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <HAL_GPIO_Init+0x300>)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3301      	adds	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f ae9d 	bne.w	8003fb0 <HAL_GPIO_Init+0x10>
  }
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40021000 	.word	0x40021000
 8004288:	40010000 	.word	0x40010000
 800428c:	48000400 	.word	0x48000400
 8004290:	48000800 	.word	0x48000800
 8004294:	48000c00 	.word	0x48000c00
 8004298:	48001000 	.word	0x48001000
 800429c:	48001400 	.word	0x48001400
 80042a0:	40010400 	.word	0x40010400

080042a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]
 80042b0:	4613      	mov	r3, r2
 80042b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b4:	787b      	ldrb	r3, [r7, #1]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042ba:	887a      	ldrh	r2, [r7, #2]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c0:	e002      	b.n	80042c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d141      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042e2:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d131      	bne.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042f0:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f6:	4a46      	ldr	r2, [pc, #280]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004300:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004308:	4a41      	ldr	r2, [pc, #260]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800430e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004310:	4b40      	ldr	r3, [pc, #256]	; (8004414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2232      	movs	r2, #50	; 0x32
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	4a3f      	ldr	r2, [pc, #252]	; (8004418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	0c9b      	lsrs	r3, r3, #18
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004326:	e002      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3b01      	subs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800432e:	4b38      	ldr	r3, [pc, #224]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d102      	bne.n	8004342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f2      	bne.n	8004328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434e:	d158      	bne.n	8004402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e057      	b.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004354:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435a:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004364:	e04d      	b.n	8004402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436c:	d141      	bne.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d131      	bne.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800438c:	4b20      	ldr	r3, [pc, #128]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004394:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800439a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2232      	movs	r2, #50	; 0x32
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	0c9b      	lsrs	r3, r3, #18
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043b2:	e002      	b.n	80043ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d102      	bne.n	80043ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f2      	bne.n	80043b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043da:	d112      	bne.n	8004402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e011      	b.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043f0:	e007      	b.n	8004402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004400:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40007000 	.word	0x40007000
 8004414:	20000198 	.word	0x20000198
 8004418:	431bde83 	.word	0x431bde83

0800441c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800442a:	6093      	str	r3, [r2, #8]
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40007000 	.word	0x40007000

0800443c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e306      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d075      	beq.n	8004546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	4b97      	ldr	r3, [pc, #604]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004464:	4b94      	ldr	r3, [pc, #592]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d102      	bne.n	800447a <HAL_RCC_OscConfig+0x3e>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d002      	beq.n	8004480 <HAL_RCC_OscConfig+0x44>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d10b      	bne.n	8004498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	4b8d      	ldr	r3, [pc, #564]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05b      	beq.n	8004544 <HAL_RCC_OscConfig+0x108>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d157      	bne.n	8004544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e2e1      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d106      	bne.n	80044b0 <HAL_RCC_OscConfig+0x74>
 80044a2:	4b85      	ldr	r3, [pc, #532]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a84      	ldr	r2, [pc, #528]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e01d      	b.n	80044ec <HAL_RCC_OscConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x98>
 80044ba:	4b7f      	ldr	r3, [pc, #508]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a7e      	ldr	r2, [pc, #504]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b7c      	ldr	r3, [pc, #496]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7b      	ldr	r2, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0xb0>
 80044d4:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b75      	ldr	r3, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a74      	ldr	r2, [pc, #464]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fb1e 	bl	8001b34 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fb1a 	bl	8001b34 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e2a6      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0xc0>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fb0a 	bl	8001b34 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fb06 	bl	8001b34 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e292      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4b60      	ldr	r3, [pc, #384]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0xe8>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d075      	beq.n	800463e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004552:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800455c:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d102      	bne.n	8004572 <HAL_RCC_OscConfig+0x136>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d002      	beq.n	8004578 <HAL_RCC_OscConfig+0x13c>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d11f      	bne.n	80045b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_OscConfig+0x154>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e265      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b49      	ldr	r3, [pc, #292]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	4946      	ldr	r1, [pc, #280]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd fa77 	bl	8001a9c <HAL_InitTick>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d043      	beq.n	800463c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e251      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d023      	beq.n	8004608 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c0:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80045c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd fab2 	bl	8001b34 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d4:	f7fd faae 	bl	8001b34 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e23a      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e6:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	061b      	lsls	r3, r3, #24
 8004600:	492d      	ldr	r1, [pc, #180]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
 8004606:	e01a      	b.n	800463e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004608:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2a      	ldr	r2, [pc, #168]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800460e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fa8e 	bl	8001b34 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7fd fa8a 	bl	8001b34 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e216      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x1e0>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d041      	beq.n	80046ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01c      	beq.n	800468c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004658:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fd fa67 	bl	8001b34 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466a:	f7fd fa63 	bl	8001b34 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e1ef      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ef      	beq.n	800466a <HAL_RCC_OscConfig+0x22e>
 800468a:	e020      	b.n	80046ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <HAL_RCC_OscConfig+0x27c>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fd fa4a 	bl	8001b34 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a2:	e00d      	b.n	80046c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fa46 	bl	8001b34 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d906      	bls.n	80046c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e1d2      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	2000019c 	.word	0x2000019c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c0:	4b8c      	ldr	r3, [pc, #560]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80046c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ea      	bne.n	80046a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a6 	beq.w	8004828 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046dc:	2300      	movs	r3, #0
 80046de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046e0:	4b84      	ldr	r3, [pc, #528]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_OscConfig+0x2b4>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x2b6>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	4b7f      	ldr	r3, [pc, #508]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	4a7e      	ldr	r2, [pc, #504]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
 8004702:	4b7c      	ldr	r3, [pc, #496]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800470e:	2301      	movs	r3, #1
 8004710:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004712:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <HAL_RCC_OscConfig+0x4bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d118      	bne.n	8004750 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x4bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x4bc>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472a:	f7fd fa03 	bl	8001b34 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fd f9ff 	bl	8001b34 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e18b      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x4bc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_RCC_OscConfig+0x32e>
 8004758:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004768:	e024      	b.n	80047b4 <HAL_RCC_OscConfig+0x378>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b05      	cmp	r3, #5
 8004770:	d110      	bne.n	8004794 <HAL_RCC_OscConfig+0x358>
 8004772:	4b60      	ldr	r3, [pc, #384]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	4a5e      	ldr	r2, [pc, #376]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004782:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	4a5a      	ldr	r2, [pc, #360]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004792:	e00f      	b.n	80047b4 <HAL_RCC_OscConfig+0x378>
 8004794:	4b57      	ldr	r3, [pc, #348]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	4a56      	ldr	r2, [pc, #344]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a4:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	4a52      	ldr	r2, [pc, #328]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80047ac:	f023 0304 	bic.w	r3, r3, #4
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d016      	beq.n	80047ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd f9ba 	bl	8001b34 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd f9b6 	bl	8001b34 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e140      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047da:	4b46      	ldr	r3, [pc, #280]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ed      	beq.n	80047c4 <HAL_RCC_OscConfig+0x388>
 80047e8:	e015      	b.n	8004816 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ea:	f7fd f9a3 	bl	8001b34 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fd f99f 	bl	8001b34 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e129      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004808:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1ed      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004816:	7ffb      	ldrb	r3, [r7, #31]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d105      	bne.n	8004828 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800481e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004820:	4a34      	ldr	r2, [pc, #208]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004826:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d03c      	beq.n	80048ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01c      	beq.n	8004876 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800483c:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004842:	4a2c      	ldr	r2, [pc, #176]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd f972 	bl	8001b34 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004854:	f7fd f96e 	bl	8001b34 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0fa      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004866:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ef      	beq.n	8004854 <HAL_RCC_OscConfig+0x418>
 8004874:	e01b      	b.n	80048ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 8004878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004886:	f7fd f955 	bl	8001b34 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800488e:	f7fd f951 	bl	8001b34 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0dd      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80048a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ef      	bne.n	800488e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80d1 	beq.w	8004a5a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	f000 808b 	beq.w	80049dc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d15e      	bne.n	800498c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fd f92b 	bl	8001b34 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e0:	e00c      	b.n	80048fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fd f927 	bl	8001b34 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d905      	bls.n	80048fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0b3      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fc:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ec      	bne.n	80048e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004908:	4b56      	ldr	r3, [pc, #344]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <HAL_RCC_OscConfig+0x62c>)
 800490e:	4013      	ands	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6a11      	ldr	r1, [r2, #32]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004918:	3a01      	subs	r2, #1
 800491a:	0112      	lsls	r2, r2, #4
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004922:	0212      	lsls	r2, r2, #8
 8004924:	4311      	orrs	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800492a:	0852      	lsrs	r2, r2, #1
 800492c:	3a01      	subs	r2, #1
 800492e:	0552      	lsls	r2, r2, #21
 8004930:	4311      	orrs	r1, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004936:	0852      	lsrs	r2, r2, #1
 8004938:	3a01      	subs	r2, #1
 800493a:	0652      	lsls	r2, r2, #25
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004942:	06d2      	lsls	r2, r2, #27
 8004944:	430a      	orrs	r2, r1
 8004946:	4947      	ldr	r1, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 8004948:	4313      	orrs	r3, r2
 800494a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b45      	ldr	r3, [pc, #276]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a44      	ldr	r2, [pc, #272]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 8004952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004956:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a41      	ldr	r2, [pc, #260]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004962:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd f8e6 	bl	8001b34 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd f8e2 	bl	8001b34 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e06e      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497e:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x530>
 800498a:	e066      	b.n	8004a5a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 8004992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004996:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a31      	ldr	r2, [pc, #196]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049a4:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a2e      	ldr	r2, [pc, #184]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 80049aa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd f8be 	bl	8001b34 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f8ba 	bl	8001b34 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e046      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ce:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x580>
 80049da:	e03e      	b.n	8004a5a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e039      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <HAL_RCC_OscConfig+0x628>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 0203 	and.w	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d12c      	bne.n	8004a56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	3b01      	subs	r3, #1
 8004a08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d123      	bne.n	8004a56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d11b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d113      	bne.n	8004a56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d109      	bne.n	8004a56 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	019f800c 	.word	0x019f800c

08004a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e11e      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b91      	ldr	r3, [pc, #580]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d910      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b8e      	ldr	r3, [pc, #568]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	498c      	ldr	r1, [pc, #560]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b8a      	ldr	r3, [pc, #552]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e106      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d073      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d129      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac8:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0f4      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ad8:	f000 f99e 	bl	8004e18 <RCC_GetSysClockFreqFromPLLSource>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_RCC_ClockConfig+0x268>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d93f      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ae6:	4b7a      	ldr	r3, [pc, #488]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d033      	beq.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d12f      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b06:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0e:	4a70      	ldr	r2, [pc, #448]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e024      	b.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0c6      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	4b66      	ldr	r3, [pc, #408]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0be      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b44:	f000 f8ce 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4a61      	ldr	r2, [pc, #388]	; (8004cd4 <HAL_RCC_ClockConfig+0x268>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d909      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5a:	4a5d      	ldr	r2, [pc, #372]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4957      	ldr	r1, [pc, #348]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fc ffdc 	bl	8001b34 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fc ffd8 	bl	8001b34 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e095      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d023      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004be0:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4936      	ldr	r1, [pc, #216]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d105      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d21d      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 020f 	bic.w	r2, r3, #15
 8004c24:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc ff82 	bl	8001b34 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fc ff7e 	bl	8001b34 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e03b      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1ed      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4917      	ldr	r1, [pc, #92]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	490f      	ldr	r1, [pc, #60]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c96:	f000 f825 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490c      	ldr	r1, [pc, #48]	; (8004cd8 <HAL_RCC_ClockConfig+0x26c>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <HAL_RCC_ClockConfig+0x270>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x274>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc feee 	bl	8001a9c <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	04c4b400 	.word	0x04c4b400
 8004cd8:	08007dc4 	.word	0x08007dc4
 8004cdc:	20000198 	.word	0x20000198
 8004ce0:	2000019c 	.word	0x2000019c

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d102      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	e047      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d08:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e03e      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d0e:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d136      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d38:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d42:	68d2      	ldr	r2, [r2, #12]
 8004d44:	0a12      	lsrs	r2, r2, #8
 8004d46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	617b      	str	r3, [r7, #20]
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d52:	4a13      	ldr	r2, [pc, #76]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	0a12      	lsrs	r2, r2, #8
 8004d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
      break;
 8004d6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0e5b      	lsrs	r3, r3, #25
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e001      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d8c:	693b      	ldr	r3, [r7, #16]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	016e3600 	.word	0x016e3600

08004da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000198 	.word	0x20000198

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dc4:	f7ff fff0 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	08007dd4 	.word	0x08007dd4

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004df0:	f7ff ffda 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0adb      	lsrs	r3, r3, #11
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4904      	ldr	r1, [pc, #16]	; (8004e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40021000 	.word	0x40021000
 8004e14:	08007dd4 	.word	0x08007dd4

08004e18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d10c      	bne.n	8004e56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e46:	68d2      	ldr	r2, [r2, #12]
 8004e48:	0a12      	lsrs	r2, r2, #8
 8004e4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	617b      	str	r3, [r7, #20]
    break;
 8004e54:	e00c      	b.n	8004e70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	0a12      	lsrs	r2, r2, #8
 8004e64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
    break;
 8004e6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0e5b      	lsrs	r3, r3, #25
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e8a:	687b      	ldr	r3, [r7, #4]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	016e3600 	.word	0x016e3600
 8004ea0:	00f42400 	.word	0x00f42400

08004ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eac:	2300      	movs	r3, #0
 8004eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8098 	beq.w	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b43      	ldr	r3, [pc, #268]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	4a3f      	ldr	r2, [pc, #252]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004edc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eee:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a39      	ldr	r2, [pc, #228]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efa:	f7fc fe1b 	bl	8001b34 <HAL_GetTick>
 8004efe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f00:	e009      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fc fe17 	bl	8001b34 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d902      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	74fb      	strb	r3, [r7, #19]
        break;
 8004f14:	e005      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ef      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d159      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f28:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01e      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d019      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f44:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fc fdd7 	bl	8001b34 <HAL_GetTick>
 8004f86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8a:	f7fc fdd3 	bl	8001b34 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d902      	bls.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004fa0:	e006      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ec      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4903      	ldr	r1, [pc, #12]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	74bb      	strb	r3, [r7, #18]
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe0:	7c7b      	ldrb	r3, [r7, #17]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe6:	4ba6      	ldr	r3, [pc, #664]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	4aa5      	ldr	r2, [pc, #660]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ffe:	4ba0      	ldr	r3, [pc, #640]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f023 0203 	bic.w	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	499c      	ldr	r1, [pc, #624]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005020:	4b97      	ldr	r3, [pc, #604]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f023 020c 	bic.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4994      	ldr	r1, [pc, #592]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005042:	4b8f      	ldr	r3, [pc, #572]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	498b      	ldr	r1, [pc, #556]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005064:	4b86      	ldr	r3, [pc, #536]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	4983      	ldr	r1, [pc, #524]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005086:	4b7e      	ldr	r3, [pc, #504]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	497a      	ldr	r1, [pc, #488]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a8:	4b75      	ldr	r3, [pc, #468]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	4972      	ldr	r1, [pc, #456]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ca:	4b6d      	ldr	r3, [pc, #436]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4969      	ldr	r1, [pc, #420]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050ec:	4b64      	ldr	r3, [pc, #400]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4961      	ldr	r1, [pc, #388]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800510e:	4b5c      	ldr	r3, [pc, #368]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	4958      	ldr	r1, [pc, #352]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005130:	4b53      	ldr	r3, [pc, #332]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	4950      	ldr	r1, [pc, #320]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514e:	d105      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a4a      	ldr	r2, [pc, #296]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005164:	2b00      	cmp	r3, #0
 8005166:	d015      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005168:	4b45      	ldr	r3, [pc, #276]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4942      	ldr	r1, [pc, #264]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005186:	d105      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005188:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a3c      	ldr	r2, [pc, #240]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005192:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d015      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051a0:	4b37      	ldr	r3, [pc, #220]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	4934      	ldr	r1, [pc, #208]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051be:	d105      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c0:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a2e      	ldr	r2, [pc, #184]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d8:	4b29      	ldr	r3, [pc, #164]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e6:	4926      	ldr	r1, [pc, #152]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051f6:	d105      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f8:	4b21      	ldr	r3, [pc, #132]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a20      	ldr	r2, [pc, #128]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005202:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	4918      	ldr	r1, [pc, #96]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800522e:	d105      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a12      	ldr	r2, [pc, #72]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800523a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005248:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	490a      	ldr	r1, [pc, #40]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a04      	ldr	r2, [pc, #16]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800526e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005272:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005274:	7cbb      	ldrb	r3, [r7, #18]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000

08005284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e049      	b.n	800532a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fe88 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f000 fb7a 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e04a      	b.n	80053e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d013      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <HAL_TIM_Base_Start_IT+0xc8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x6c>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a19      	ldr	r2, [pc, #100]	; (8005400 <HAL_TIM_Base_Start_IT+0xcc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d115      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4b17      	ldr	r3, [pc, #92]	; (8005404 <HAL_TIM_Base_Start_IT+0xd0>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d015      	beq.n	80053de <HAL_TIM_Base_Start_IT+0xaa>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d011      	beq.n	80053de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e008      	b.n	80053de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e000      	b.n	80053e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40013400 	.word	0x40013400
 8005400:	40014000 	.word	0x40014000
 8005404:	00010007 	.word	0x00010007

08005408 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	f241 1311 	movw	r3, #4369	; 0x1111
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <HAL_TIM_Base_Stop_IT+0x48>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	f244 4344 	movw	r3, #17476	; 0x4444
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_TIM_Base_Stop_IT+0x48>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	d122      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d11b      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0202 	mvn.w	r2, #2
 8005492:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa69 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 80054ae:	e005      	b.n	80054bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa5b 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa6c 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d122      	bne.n	8005516 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d11b      	bne.n	8005516 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0204 	mvn.w	r2, #4
 80054e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa3f 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 8005502:	e005      	b.n	8005510 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa31 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa42 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d122      	bne.n	800556a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b08      	cmp	r3, #8
 8005530:	d11b      	bne.n	800556a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f06f 0208 	mvn.w	r2, #8
 800553a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa15 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 8005556:	e005      	b.n	8005564 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa07 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa18 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b10      	cmp	r3, #16
 8005576:	d122      	bne.n	80055be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b10      	cmp	r3, #16
 8005584:	d11b      	bne.n	80055be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0210 	mvn.w	r2, #16
 800558e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2208      	movs	r2, #8
 8005594:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9eb 	bl	8005980 <HAL_TIM_IC_CaptureCallback>
 80055aa:	e005      	b.n	80055b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9dd 	bl	800596c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9ee 	bl	8005994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10e      	bne.n	80055ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f06f 0201 	mvn.w	r2, #1
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f9b7 	bl	8005958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d10e      	bne.n	8005616 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b80      	cmp	r3, #128	; 0x80
 8005604:	d107      	bne.n	8005616 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800560e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fb8b 	bl	8005d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fb7e 	bl	8005d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f99c 	bl	80059a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b20      	cmp	r3, #32
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b20      	cmp	r3, #32
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0220 	mvn.w	r2, #32
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb3e 	bl	8005d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056aa:	d10f      	bne.n	80056cc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ba:	d107      	bne.n	80056cc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fb44 	bl	8005d54 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056da:	d10f      	bne.n	80056fc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fb36 	bl	8005d68 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800570a:	d10f      	bne.n	800572c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571a:	d107      	bne.n	800572c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb28 	bl	8005d7c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573a:	d10f      	bne.n	800575c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005746:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fb1a 	bl	8005d90 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIM_ConfigClockSource+0x1c>
 800577c:	2302      	movs	r3, #2
 800577e:	e0de      	b.n	800593e <HAL_TIM_ConfigClockSource+0x1da>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800579e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a63      	ldr	r2, [pc, #396]	; (8005948 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	f000 80a9 	beq.w	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 80057c0:	4a61      	ldr	r2, [pc, #388]	; (8005948 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	f200 80ae 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 80057c8:	4a60      	ldr	r2, [pc, #384]	; (800594c <HAL_TIM_ConfigClockSource+0x1e8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	f000 80a1 	beq.w	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 80057d0:	4a5e      	ldr	r2, [pc, #376]	; (800594c <HAL_TIM_ConfigClockSource+0x1e8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f200 80a6 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 80057d8:	4a5d      	ldr	r2, [pc, #372]	; (8005950 <HAL_TIM_ConfigClockSource+0x1ec>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	f000 8099 	beq.w	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 80057e0:	4a5b      	ldr	r2, [pc, #364]	; (8005950 <HAL_TIM_ConfigClockSource+0x1ec>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	f200 809e 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 80057e8:	4a5a      	ldr	r2, [pc, #360]	; (8005954 <HAL_TIM_ConfigClockSource+0x1f0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f000 8091 	beq.w	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 80057f0:	4a58      	ldr	r2, [pc, #352]	; (8005954 <HAL_TIM_ConfigClockSource+0x1f0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f200 8096 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 80057f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057fc:	f000 8089 	beq.w	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 8005800:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005804:	f200 808e 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580c:	d03e      	beq.n	800588c <HAL_TIM_ConfigClockSource+0x128>
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	f200 8087 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	f000 8086 	beq.w	800592a <HAL_TIM_ConfigClockSource+0x1c6>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d87f      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 8005824:	2b70      	cmp	r3, #112	; 0x70
 8005826:	d01a      	beq.n	800585e <HAL_TIM_ConfigClockSource+0xfa>
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d87b      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 800582c:	2b60      	cmp	r3, #96	; 0x60
 800582e:	d050      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x16e>
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d877      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 8005834:	2b50      	cmp	r3, #80	; 0x50
 8005836:	d03c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x14e>
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d873      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d058      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x18e>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d86f      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d064      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d86b      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d060      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d867      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d05c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d05a      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x1ae>
 800585c:	e062      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f000 f9b1 	bl	8005bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	609a      	str	r2, [r3, #8]
      break;
 800588a:	e04f      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6899      	ldr	r1, [r3, #8]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f000 f99a 	bl	8005bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ae:	609a      	str	r2, [r3, #8]
      break;
 80058b0:	e03c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f90c 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2150      	movs	r1, #80	; 0x50
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f965 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058d0:	e02c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f92b 	bl	8005b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2160      	movs	r1, #96	; 0x60
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f955 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058f0:	e01c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f8ec 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2140      	movs	r1, #64	; 0x40
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f945 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005910:	e00c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f000 f93c 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005922:	e003      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e000      	b.n	800592c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800592a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	00100070 	.word	0x00100070
 800594c:	00100040 	.word	0x00100040
 8005950:	00100030 	.word	0x00100030
 8005954:	00100020 	.word	0x00100020

08005958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <TIM_Base_SetConfig+0x104>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00f      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d00b      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a39      	ldr	r2, [pc, #228]	; (8005ac4 <TIM_Base_SetConfig+0x108>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a38      	ldr	r2, [pc, #224]	; (8005ac8 <TIM_Base_SetConfig+0x10c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a37      	ldr	r2, [pc, #220]	; (8005acc <TIM_Base_SetConfig+0x110>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d108      	bne.n	8005a06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	; (8005ac0 <TIM_Base_SetConfig+0x104>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01b      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a14:	d017      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <TIM_Base_SetConfig+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <TIM_Base_SetConfig+0x10c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00f      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <TIM_Base_SetConfig+0x110>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <TIM_Base_SetConfig+0x118>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a25      	ldr	r2, [pc, #148]	; (8005ad8 <TIM_Base_SetConfig+0x11c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d108      	bne.n	8005a58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <TIM_Base_SetConfig+0x104>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00f      	beq.n	8005aa4 <TIM_Base_SetConfig+0xe8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a11      	ldr	r2, [pc, #68]	; (8005acc <TIM_Base_SetConfig+0x110>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_Base_SetConfig+0xe8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_Base_SetConfig+0xe8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a0f      	ldr	r2, [pc, #60]	; (8005ad4 <TIM_Base_SetConfig+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0xe8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a0e      	ldr	r2, [pc, #56]	; (8005ad8 <TIM_Base_SetConfig+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d103      	bne.n	8005aac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f043 0307 	orr.w	r3, r3, #7
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	021a      	lsls	r2, r3, #8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	609a      	str	r2, [r3, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e065      	b.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2c      	ldr	r2, [pc, #176]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2b      	ldr	r2, [pc, #172]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d013      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10c      	bne.n	8005ce6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40013400 	.word	0x40013400
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40014000 	.word	0x40014000

08005d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e042      	b.n	8005e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fb f9b5 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2224      	movs	r2, #36	; 0x24
 8005dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fcb0 	bl	800674c <UART_SetConfig>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e022      	b.n	8005e3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 ff70 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fff7 	bl	8006e28 <UART_CheckIdleState>
 8005e3a:	4603      	mov	r3, r0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d17a      	bne.n	8005f52 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_UART_Transmit_DMA+0x24>
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e073      	b.n	8005f54 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Transmit_DMA+0x36>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e06c      	b.n	8005f54 <HAL_UART_Transmit_DMA+0x110>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2221      	movs	r2, #33	; 0x21
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02c      	beq.n	8005f0a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb4:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <HAL_UART_Transmit_DMA+0x118>)
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <HAL_UART_Transmit_DMA+0x11c>)
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec4:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <HAL_UART_Transmit_DMA+0x120>)
 8005ec6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ecc:	2200      	movs	r2, #0
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed8:	4619      	mov	r1, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3328      	adds	r3, #40	; 0x28
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	f7fd fdc6 	bl	8003a74 <HAL_DMA_Start_IT>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00d      	beq.n	8005f0a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e024      	b.n	8005f54 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2240      	movs	r2, #64	; 0x40
 8005f10:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	623a      	str	r2, [r7, #32]
 8005f3c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	69f9      	ldr	r1, [r7, #28]
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e000      	b.n	8005f54 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
  }
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3728      	adds	r7, #40	; 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	080072ef 	.word	0x080072ef
 8005f60:	08007389 	.word	0x08007389
 8005f64:	08007503 	.word	0x08007503

08005f68 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b09a      	sub	sp, #104	; 0x68
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f84:	667b      	str	r3, [r7, #100]	; 0x64
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e6      	bne.n	8005f70 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fc6:	643a      	str	r2, [r7, #64]	; 0x40
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e3      	bne.n	8005fa2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d118      	bne.n	8006014 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f023 0310 	bic.w	r3, r3, #16
 8005ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006002:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d137      	bne.n	8006092 <HAL_UART_AbortReceive+0x12a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	60bb      	str	r3, [r7, #8]
   return(result);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006038:	65bb      	str	r3, [r7, #88]	; 0x58
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006042:	61ba      	str	r2, [r7, #24]
 8006044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6979      	ldr	r1, [r7, #20]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	613b      	str	r3, [r7, #16]
   return(result);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d019      	beq.n	8006092 <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006062:	2200      	movs	r2, #0
 8006064:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800606a:	4618      	mov	r0, r3
 800606c:	f7fd fd7d 	bl	8003b6a <HAL_DMA_Abort>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd fee4 	bl	8003e48 <HAL_DMA_GetError>
 8006080:	4603      	mov	r3, r0
 8006082:	2b20      	cmp	r3, #32
 8006084:	d105      	bne.n	8006092 <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2210      	movs	r2, #16
 800608a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e017      	b.n	80060c2 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	220f      	movs	r2, #15
 80060a0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0208 	orr.w	r2, r2, #8
 80060b0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3768      	adds	r7, #104	; 0x68
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b0ba      	sub	sp, #232	; 0xe8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80060fa:	4013      	ands	r3, r2
 80060fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d11b      	bne.n	8006140 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 82d6 	beq.w	80066e2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
      }
      return;
 800613e:	e2d0      	b.n	80066e2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 811f 	beq.w	8006388 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800614a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800614e:	4b8b      	ldr	r3, [pc, #556]	; (800637c <HAL_UART_IRQHandler+0x2b0>)
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800615a:	4b89      	ldr	r3, [pc, #548]	; (8006380 <HAL_UART_IRQHandler+0x2b4>)
 800615c:	4013      	ands	r3, r2
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8112 	beq.w	8006388 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d011      	beq.n	8006194 <HAL_UART_IRQHandler+0xc8>
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2201      	movs	r2, #1
 8006182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618a:	f043 0201 	orr.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d011      	beq.n	80061c4 <HAL_UART_IRQHandler+0xf8>
 80061a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2202      	movs	r2, #2
 80061b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ba:	f043 0204 	orr.w	r2, r3, #4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d011      	beq.n	80061f4 <HAL_UART_IRQHandler+0x128>
 80061d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2204      	movs	r2, #4
 80061e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ea:	f043 0202 	orr.w	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800620c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006210:	4b5a      	ldr	r3, [pc, #360]	; (800637c <HAL_UART_IRQHandler+0x2b0>)
 8006212:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2208      	movs	r2, #8
 800621e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006226:	f043 0208 	orr.w	r2, r3, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <HAL_UART_IRQHandler+0x196>
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00c      	beq.n	8006262 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 823c 	beq.w	80066e6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d013      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d04f      	beq.n	8006366 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 ffab 	bl	8007222 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d141      	bne.n	800635e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006306:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800630a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800631e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1d9      	bne.n	80062da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d013      	beq.n	8006356 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	4a14      	ldr	r2, [pc, #80]	; (8006384 <HAL_UART_IRQHandler+0x2b8>)
 8006334:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633a:	4618      	mov	r0, r3
 800633c:	f7fd fc6e 	bl	8003c1c <HAL_DMA_Abort_IT>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d017      	beq.n	8006376 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	e00f      	b.n	8006376 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f9ee 	bl	8006738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	e00b      	b.n	8006376 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9ea 	bl	8006738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	e007      	b.n	8006376 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9e6 	bl	8006738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006374:	e1b7      	b.n	80066e6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006376:	bf00      	nop
    return;
 8006378:	e1b5      	b.n	80066e6 <HAL_UART_IRQHandler+0x61a>
 800637a:	bf00      	nop
 800637c:	10000001 	.word	0x10000001
 8006380:	04000120 	.word	0x04000120
 8006384:	08007583 	.word	0x08007583

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638c:	2b01      	cmp	r3, #1
 800638e:	f040 814a 	bne.w	8006626 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8143 	beq.w	8006626 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 813c 	beq.w	8006626 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2210      	movs	r2, #16
 80063b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	f040 80b5 	bne.w	8006530 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8187 	beq.w	80066ea <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f080 817f 	bcs.w	80066ea <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 8086 	bne.w	8006514 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800641c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006436:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800643e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800644a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1da      	bne.n	8006408 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800647a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800647e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e1      	bne.n	8006452 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3308      	adds	r3, #8
 8006494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800649e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e3      	bne.n	800648e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e4:	f023 0310 	bic.w	r3, r3, #16
 80064e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80064f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e4      	bne.n	80064d4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650e:	4618      	mov	r0, r3
 8006510:	f7fd fb2b 	bl	8003b6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006520:	b29b      	uxth	r3, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b29b      	uxth	r3, r3
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb fa01 	bl	8001930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800652e:	e0dc      	b.n	80066ea <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800653c:	b29b      	uxth	r3, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80ce 	beq.w	80066ee <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80c9 	beq.w	80066ee <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800657e:	647b      	str	r3, [r7, #68]	; 0x44
 8006580:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e4      	bne.n	800655c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	623b      	str	r3, [r7, #32]
   return(result);
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a8:	f023 0301 	bic.w	r3, r3, #1
 80065ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065ba:	633a      	str	r2, [r7, #48]	; 0x30
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e1      	bne.n	8006592 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	617b      	str	r3, [r7, #20]
   return(result);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e4      	bne.n	80065e2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb f986 	bl	8001930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006624:	e063      	b.n	80066ee <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <HAL_UART_IRQHandler+0x584>
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006646:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ffdb 	bl	8007604 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800664e:	e051      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d014      	beq.n	8006686 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006678:	2b00      	cmp	r3, #0
 800667a:	d03a      	beq.n	80066f2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
    }
    return;
 8006684:	e035      	b.n	80066f2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <HAL_UART_IRQHandler+0x5da>
 8006692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 ff85 	bl	80075ae <UART_EndTransmit_IT>
    return;
 80066a4:	e026      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_UART_IRQHandler+0x5fa>
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 ffb4 	bl	800762c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c4:	e016      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d010      	beq.n	80066f4 <HAL_UART_IRQHandler+0x628>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da0c      	bge.n	80066f4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 ff9c 	bl	8007618 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066e0:	e008      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
      return;
 80066e2:	bf00      	nop
 80066e4:	e006      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
    return;
 80066e6:	bf00      	nop
 80066e8:	e004      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
      return;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
      return;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_UART_IRQHandler+0x628>
    return;
 80066f2:	bf00      	nop
  }
}
 80066f4:	37e8      	adds	r7, #232	; 0xe8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop

080066fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006750:	b08c      	sub	sp, #48	; 0x30
 8006752:	af00      	add	r7, sp, #0
 8006754:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	431a      	orrs	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	431a      	orrs	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	4313      	orrs	r3, r2
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4bab      	ldr	r3, [pc, #684]	; (8006a28 <UART_SetConfig+0x2dc>)
 800677c:	4013      	ands	r3, r2
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006784:	430b      	orrs	r3, r1
 8006786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4aa0      	ldr	r2, [pc, #640]	; (8006a2c <UART_SetConfig+0x2e0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b4:	4313      	orrs	r3, r2
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80067c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	f023 010f 	bic.w	r1, r3, #15
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a91      	ldr	r2, [pc, #580]	; (8006a30 <UART_SetConfig+0x2e4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d125      	bne.n	800683c <UART_SetConfig+0xf0>
 80067f0:	4b90      	ldr	r3, [pc, #576]	; (8006a34 <UART_SetConfig+0x2e8>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d81a      	bhi.n	8006834 <UART_SetConfig+0xe8>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <UART_SetConfig+0xb8>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006815 	.word	0x08006815
 8006808:	08006825 	.word	0x08006825
 800680c:	0800681d 	.word	0x0800681d
 8006810:	0800682d 	.word	0x0800682d
 8006814:	2301      	movs	r3, #1
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681a:	e0d6      	b.n	80069ca <UART_SetConfig+0x27e>
 800681c:	2302      	movs	r3, #2
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006822:	e0d2      	b.n	80069ca <UART_SetConfig+0x27e>
 8006824:	2304      	movs	r3, #4
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682a:	e0ce      	b.n	80069ca <UART_SetConfig+0x27e>
 800682c:	2308      	movs	r3, #8
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006832:	e0ca      	b.n	80069ca <UART_SetConfig+0x27e>
 8006834:	2310      	movs	r3, #16
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683a:	e0c6      	b.n	80069ca <UART_SetConfig+0x27e>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7d      	ldr	r2, [pc, #500]	; (8006a38 <UART_SetConfig+0x2ec>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d138      	bne.n	80068b8 <UART_SetConfig+0x16c>
 8006846:	4b7b      	ldr	r3, [pc, #492]	; (8006a34 <UART_SetConfig+0x2e8>)
 8006848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b0c      	cmp	r3, #12
 8006852:	d82d      	bhi.n	80068b0 <UART_SetConfig+0x164>
 8006854:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x110>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	08006891 	.word	0x08006891
 8006860:	080068b1 	.word	0x080068b1
 8006864:	080068b1 	.word	0x080068b1
 8006868:	080068b1 	.word	0x080068b1
 800686c:	080068a1 	.word	0x080068a1
 8006870:	080068b1 	.word	0x080068b1
 8006874:	080068b1 	.word	0x080068b1
 8006878:	080068b1 	.word	0x080068b1
 800687c:	08006899 	.word	0x08006899
 8006880:	080068b1 	.word	0x080068b1
 8006884:	080068b1 	.word	0x080068b1
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068a9 	.word	0x080068a9
 8006890:	2300      	movs	r3, #0
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006896:	e098      	b.n	80069ca <UART_SetConfig+0x27e>
 8006898:	2302      	movs	r3, #2
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689e:	e094      	b.n	80069ca <UART_SetConfig+0x27e>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a6:	e090      	b.n	80069ca <UART_SetConfig+0x27e>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ae:	e08c      	b.n	80069ca <UART_SetConfig+0x27e>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b6:	e088      	b.n	80069ca <UART_SetConfig+0x27e>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a5f      	ldr	r2, [pc, #380]	; (8006a3c <UART_SetConfig+0x2f0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d125      	bne.n	800690e <UART_SetConfig+0x1c2>
 80068c2:	4b5c      	ldr	r3, [pc, #368]	; (8006a34 <UART_SetConfig+0x2e8>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d016      	beq.n	80068fe <UART_SetConfig+0x1b2>
 80068d0:	2b30      	cmp	r3, #48	; 0x30
 80068d2:	d818      	bhi.n	8006906 <UART_SetConfig+0x1ba>
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d00a      	beq.n	80068ee <UART_SetConfig+0x1a2>
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d814      	bhi.n	8006906 <UART_SetConfig+0x1ba>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <UART_SetConfig+0x19a>
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d008      	beq.n	80068f6 <UART_SetConfig+0x1aa>
 80068e4:	e00f      	b.n	8006906 <UART_SetConfig+0x1ba>
 80068e6:	2300      	movs	r3, #0
 80068e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ec:	e06d      	b.n	80069ca <UART_SetConfig+0x27e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f4:	e069      	b.n	80069ca <UART_SetConfig+0x27e>
 80068f6:	2304      	movs	r3, #4
 80068f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fc:	e065      	b.n	80069ca <UART_SetConfig+0x27e>
 80068fe:	2308      	movs	r3, #8
 8006900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006904:	e061      	b.n	80069ca <UART_SetConfig+0x27e>
 8006906:	2310      	movs	r3, #16
 8006908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690c:	e05d      	b.n	80069ca <UART_SetConfig+0x27e>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <UART_SetConfig+0x2f4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d125      	bne.n	8006964 <UART_SetConfig+0x218>
 8006918:	4b46      	ldr	r3, [pc, #280]	; (8006a34 <UART_SetConfig+0x2e8>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006922:	2bc0      	cmp	r3, #192	; 0xc0
 8006924:	d016      	beq.n	8006954 <UART_SetConfig+0x208>
 8006926:	2bc0      	cmp	r3, #192	; 0xc0
 8006928:	d818      	bhi.n	800695c <UART_SetConfig+0x210>
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d00a      	beq.n	8006944 <UART_SetConfig+0x1f8>
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d814      	bhi.n	800695c <UART_SetConfig+0x210>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <UART_SetConfig+0x1f0>
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d008      	beq.n	800694c <UART_SetConfig+0x200>
 800693a:	e00f      	b.n	800695c <UART_SetConfig+0x210>
 800693c:	2300      	movs	r3, #0
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006942:	e042      	b.n	80069ca <UART_SetConfig+0x27e>
 8006944:	2302      	movs	r3, #2
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694a:	e03e      	b.n	80069ca <UART_SetConfig+0x27e>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006952:	e03a      	b.n	80069ca <UART_SetConfig+0x27e>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695a:	e036      	b.n	80069ca <UART_SetConfig+0x27e>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006962:	e032      	b.n	80069ca <UART_SetConfig+0x27e>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a30      	ldr	r2, [pc, #192]	; (8006a2c <UART_SetConfig+0x2e0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d12a      	bne.n	80069c4 <UART_SetConfig+0x278>
 800696e:	4b31      	ldr	r3, [pc, #196]	; (8006a34 <UART_SetConfig+0x2e8>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800697c:	d01a      	beq.n	80069b4 <UART_SetConfig+0x268>
 800697e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006982:	d81b      	bhi.n	80069bc <UART_SetConfig+0x270>
 8006984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006988:	d00c      	beq.n	80069a4 <UART_SetConfig+0x258>
 800698a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698e:	d815      	bhi.n	80069bc <UART_SetConfig+0x270>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <UART_SetConfig+0x250>
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006998:	d008      	beq.n	80069ac <UART_SetConfig+0x260>
 800699a:	e00f      	b.n	80069bc <UART_SetConfig+0x270>
 800699c:	2300      	movs	r3, #0
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a2:	e012      	b.n	80069ca <UART_SetConfig+0x27e>
 80069a4:	2302      	movs	r3, #2
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069aa:	e00e      	b.n	80069ca <UART_SetConfig+0x27e>
 80069ac:	2304      	movs	r3, #4
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b2:	e00a      	b.n	80069ca <UART_SetConfig+0x27e>
 80069b4:	2308      	movs	r3, #8
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ba:	e006      	b.n	80069ca <UART_SetConfig+0x27e>
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069c2:	e002      	b.n	80069ca <UART_SetConfig+0x27e>
 80069c4:	2310      	movs	r3, #16
 80069c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <UART_SetConfig+0x2e0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	f040 80a8 	bne.w	8006b26 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d834      	bhi.n	8006a48 <UART_SetConfig+0x2fc>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0x298>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a49 	.word	0x08006a49
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a49 	.word	0x08006a49
 80069f4:	08006a17 	.word	0x08006a17
 80069f8:	08006a49 	.word	0x08006a49
 80069fc:	08006a49 	.word	0x08006a49
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a1f 	.word	0x08006a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fe f9da 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a0e:	e021      	b.n	8006a54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <UART_SetConfig+0x2f8>)
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a14:	e01e      	b.n	8006a54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a16:	f7fe f965 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8006a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a1c:	e01a      	b.n	8006a54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a24:	e016      	b.n	8006a54 <UART_SetConfig+0x308>
 8006a26:	bf00      	nop
 8006a28:	cfff69f3 	.word	0xcfff69f3
 8006a2c:	40008000 	.word	0x40008000
 8006a30:	40013800 	.word	0x40013800
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40004400 	.word	0x40004400
 8006a3c:	40004800 	.word	0x40004800
 8006a40:	40004c00 	.word	0x40004c00
 8006a44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 812a 	beq.w	8006cb0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	4a9e      	ldr	r2, [pc, #632]	; (8006cdc <UART_SetConfig+0x590>)
 8006a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a66:	461a      	mov	r2, r3
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d305      	bcc.n	8006a8c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d903      	bls.n	8006a94 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a92:	e10d      	b.n	8006cb0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	60fa      	str	r2, [r7, #12]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	4a8e      	ldr	r2, [pc, #568]	; (8006cdc <UART_SetConfig+0x590>)
 8006aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ab6:	f7f9 fbaf 	bl	8000218 <__aeabi_uldivmod>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4610      	mov	r0, r2
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	020b      	lsls	r3, r1, #8
 8006acc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad0:	0202      	lsls	r2, r0, #8
 8006ad2:	6979      	ldr	r1, [r7, #20]
 8006ad4:	6849      	ldr	r1, [r1, #4]
 8006ad6:	0849      	lsrs	r1, r1, #1
 8006ad8:	2000      	movs	r0, #0
 8006ada:	460c      	mov	r4, r1
 8006adc:	4605      	mov	r5, r0
 8006ade:	eb12 0804 	adds.w	r8, r2, r4
 8006ae2:	eb43 0905 	adc.w	r9, r3, r5
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	469a      	mov	sl, r3
 8006aee:	4693      	mov	fp, r2
 8006af0:	4652      	mov	r2, sl
 8006af2:	465b      	mov	r3, fp
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7f9 fb8e 	bl	8000218 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4613      	mov	r3, r2
 8006b02:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0a:	d308      	bcc.n	8006b1e <UART_SetConfig+0x3d2>
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b12:	d204      	bcs.n	8006b1e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a3a      	ldr	r2, [r7, #32]
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	e0c8      	b.n	8006cb0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b24:	e0c4      	b.n	8006cb0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2e:	d167      	bne.n	8006c00 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006b30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d828      	bhi.n	8006b8a <UART_SetConfig+0x43e>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x3f4>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b8b 	.word	0x08006b8b
 8006b50:	08006b7b 	.word	0x08006b7b
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b8b 	.word	0x08006b8b
 8006b5c:	08006b8b 	.word	0x08006b8b
 8006b60:	08006b83 	.word	0x08006b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fe f92c 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8006b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b6a:	e014      	b.n	8006b96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7fe f93e 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 8006b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b72:	e010      	b.n	8006b96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b74:	4b5a      	ldr	r3, [pc, #360]	; (8006ce0 <UART_SetConfig+0x594>)
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b78:	e00d      	b.n	8006b96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fe f8b3 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b80:	e009      	b.n	8006b96 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b88:	e005      	b.n	8006b96 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8089 	beq.w	8006cb0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	4a4e      	ldr	r2, [pc, #312]	; (8006cdc <UART_SetConfig+0x590>)
 8006ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	441a      	add	r2, r3
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d916      	bls.n	8006bf8 <UART_SetConfig+0x4ac>
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d212      	bcs.n	8006bf8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f023 030f 	bic.w	r3, r3, #15
 8006bda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	8bfb      	ldrh	r3, [r7, #30]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	8bfa      	ldrh	r2, [r7, #30]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	e05b      	b.n	8006cb0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bfe:	e057      	b.n	8006cb0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d828      	bhi.n	8006c5a <UART_SetConfig+0x50e>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x4c4>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c5b 	.word	0x08006c5b
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c5b 	.word	0x08006c5b
 8006c28:	08006c5b 	.word	0x08006c5b
 8006c2c:	08006c5b 	.word	0x08006c5b
 8006c30:	08006c53 	.word	0x08006c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fe f8c4 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8006c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c3a:	e014      	b.n	8006c66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fe f8d6 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c42:	e010      	b.n	8006c66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4b26      	ldr	r3, [pc, #152]	; (8006ce0 <UART_SetConfig+0x594>)
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c48:	e00d      	b.n	8006c66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4a:	f7fe f84b 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c50:	e009      	b.n	8006c66 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c58:	e005      	b.n	8006c66 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c64:	bf00      	nop
    }

    if (pclk != 0U)
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d021      	beq.n	8006cb0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	4a1a      	ldr	r2, [pc, #104]	; (8006cdc <UART_SetConfig+0x590>)
 8006c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	441a      	add	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	d909      	bls.n	8006caa <UART_SetConfig+0x55e>
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9c:	d205      	bcs.n	8006caa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60da      	str	r2, [r3, #12]
 8006ca8:	e002      	b.n	8006cb0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ccc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3730      	adds	r7, #48	; 0x30
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cda:	bf00      	nop
 8006cdc:	08008450 	.word	0x08008450
 8006ce0:	00f42400 	.word	0x00f42400

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e38:	f7fa fe7c 	bl	8001b34 <HAL_GetTick>
 8006e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d10e      	bne.n	8006e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f82f 	bl	8006ebe <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e025      	b.n	8006eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d10e      	bne.n	8006e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f819 	bl	8006ebe <UART_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e00f      	b.n	8006eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b09c      	sub	sp, #112	; 0x70
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ece:	e0a9      	b.n	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	f000 80a5 	beq.w	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eda:	f7fa fe2b 	bl	8001b34 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d140      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f04:	667b      	str	r3, [r7, #100]	; 0x64
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e6      	bne.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e069      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d051      	beq.n	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d149      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e6      	bne.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	613b      	str	r3, [r7, #16]
   return(result);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fec:	623a      	str	r2, [r7, #32]
 8006fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	69f9      	ldr	r1, [r7, #28]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e010      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	429a      	cmp	r2, r3
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	429a      	cmp	r2, r3
 8007040:	f43f af46 	beq.w	8006ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3770      	adds	r7, #112	; 0x70
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b096      	sub	sp, #88	; 0x58
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	4613      	mov	r3, r2
 800705c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2222      	movs	r2, #34	; 0x22
 8007078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d02c      	beq.n	80070de <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007088:	4a42      	ldr	r2, [pc, #264]	; (8007194 <UART_Start_Receive_DMA+0x144>)
 800708a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007090:	4a41      	ldr	r2, [pc, #260]	; (8007198 <UART_Start_Receive_DMA+0x148>)
 8007092:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007098:	4a40      	ldr	r2, [pc, #256]	; (800719c <UART_Start_Receive_DMA+0x14c>)
 800709a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a0:	2200      	movs	r2, #0
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3324      	adds	r3, #36	; 0x24
 80070ae:	4619      	mov	r1, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	461a      	mov	r2, r3
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	f7fc fcdc 	bl	8003a74 <HAL_DMA_Start_IT>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2210      	movs	r2, #16
 80070c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e055      	b.n	800718a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d018      	beq.n	8007120 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007102:	657b      	str	r3, [r7, #84]	; 0x54
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800710c:	64bb      	str	r3, [r7, #72]	; 0x48
 800710e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800711a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e6      	bne.n	80070ee <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	653b      	str	r3, [r7, #80]	; 0x50
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007140:	637a      	str	r2, [r7, #52]	; 0x34
 8007142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	613b      	str	r3, [r7, #16]
   return(result);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007174:	623a      	str	r2, [r7, #32]
 8007176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69f9      	ldr	r1, [r7, #28]
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	61bb      	str	r3, [r7, #24]
   return(result);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3758      	adds	r7, #88	; 0x58
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	080073a5 	.word	0x080073a5
 8007198:	080074cb 	.word	0x080074cb
 800719c:	08007503 	.word	0x08007503

080071a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b08f      	sub	sp, #60	; 0x3c
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071f0:	633b      	str	r3, [r7, #48]	; 0x30
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fa:	61ba      	str	r2, [r7, #24]
 80071fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	613b      	str	r3, [r7, #16]
   return(result);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007216:	bf00      	nop
 8007218:	373c      	adds	r7, #60	; 0x3c
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007222:	b480      	push	{r7}
 8007224:	b095      	sub	sp, #84	; 0x54
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800723e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007248:	643b      	str	r3, [r7, #64]	; 0x40
 800724a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800724e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e6      	bne.n	800722a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	61fb      	str	r3, [r7, #28]
   return(result);
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e3      	bne.n	800725c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d118      	bne.n	80072ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 0310 	bic.w	r3, r3, #16
 80072b0:	647b      	str	r3, [r7, #68]	; 0x44
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6979      	ldr	r1, [r7, #20]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	613b      	str	r3, [r7, #16]
   return(result);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80072e2:	bf00      	nop
 80072e4:	3754      	adds	r7, #84	; 0x54
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b090      	sub	sp, #64	; 0x40
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d137      	bne.n	800737a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800730a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	623b      	str	r3, [r7, #32]
   return(result);
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007328:	63bb      	str	r3, [r7, #56]	; 0x38
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007332:	633a      	str	r2, [r7, #48]	; 0x30
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60fb      	str	r3, [r7, #12]
   return(result);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	617b      	str	r3, [r7, #20]
   return(result);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007378:	e002      	b.n	8007380 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800737a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800737c:	f7fa face 	bl	800191c <HAL_UART_TxCpltCallback>
}
 8007380:	bf00      	nop
 8007382:	3740      	adds	r7, #64	; 0x40
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff f9b0 	bl	80066fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b09c      	sub	sp, #112	; 0x70
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d171      	bne.n	80074a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80073c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80073de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80073e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	667b      	str	r3, [r7, #100]	; 0x64
 8007412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800741a:	647a      	str	r2, [r7, #68]	; 0x44
 800741c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800742e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3308      	adds	r3, #8
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	623b      	str	r3, [r7, #32]
   return(result);
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	663b      	str	r3, [r7, #96]	; 0x60
 8007446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3308      	adds	r3, #8
 800744c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800744e:	633a      	str	r2, [r7, #48]	; 0x30
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e5      	bne.n	800742e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007464:	2220      	movs	r2, #32
 8007466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d118      	bne.n	80074a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0310 	bic.w	r3, r3, #16
 8007486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	69b9      	ldr	r1, [r7, #24]
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	617b      	str	r3, [r7, #20]
   return(result);
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e6      	bne.n	8007472 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074b2:	4619      	mov	r1, r3
 80074b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80074b6:	f7fa fa3b 	bl	8001930 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074ba:	e002      	b.n	80074c2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80074bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80074be:	f7ff f927 	bl	8006710 <HAL_UART_RxCpltCallback>
}
 80074c2:	bf00      	nop
 80074c4:	3770      	adds	r7, #112	; 0x70
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d109      	bne.n	80074f4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	4619      	mov	r1, r3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7fa fa1f 	bl	8001930 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074f2:	e002      	b.n	80074fa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff f915 	bl	8006724 <HAL_UART_RxHalfCpltCallback>
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007516:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b80      	cmp	r3, #128	; 0x80
 800752c:	d109      	bne.n	8007542 <UART_DMAError+0x40>
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b21      	cmp	r3, #33	; 0x21
 8007532:	d106      	bne.n	8007542 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2200      	movs	r2, #0
 8007538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f7ff fe2f 	bl	80071a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d109      	bne.n	8007564 <UART_DMAError+0x62>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b22      	cmp	r3, #34	; 0x22
 8007554:	d106      	bne.n	8007564 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800755e:	6978      	ldr	r0, [r7, #20]
 8007560:	f7ff fe5f 	bl	8007222 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756a:	f043 0210 	orr.w	r2, r3, #16
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007574:	6978      	ldr	r0, [r7, #20]
 8007576:	f7ff f8df 	bl	8006738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757a:	bf00      	nop
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f7ff f8c9 	bl	8006738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b088      	sub	sp, #32
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6979      	ldr	r1, [r7, #20]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	613b      	str	r3, [r7, #16]
   return(result);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e6      	bne.n	80075b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fa f990 	bl	800191c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075fc:	bf00      	nop
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UARTEx_DisableFifoMode+0x16>
 8007652:	2302      	movs	r3, #2
 8007654:	e027      	b.n	80076a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2224      	movs	r2, #36	; 0x24
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007684:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e02d      	b.n	8007726 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2224      	movs	r2, #36	; 0x24
 80076d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8ac 	bl	8007864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007742:	2302      	movs	r3, #2
 8007744:	e02d      	b.n	80077a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2224      	movs	r2, #36	; 0x24
 8007752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f86e 	bl	8007864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b08c      	sub	sp, #48	; 0x30
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d14a      	bne.n	8007858 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e043      	b.n	800785a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80077dc:	2302      	movs	r3, #2
 80077de:	e03c      	b.n	800785a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	461a      	mov	r2, r3
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff fc2b 	bl	8007050 <UART_Start_Receive_DMA>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007804:	2b00      	cmp	r3, #0
 8007806:	d124      	bne.n	8007852 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d11d      	bne.n	800784c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2210      	movs	r2, #16
 8007816:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	617b      	str	r3, [r7, #20]
   return(result);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f043 0310 	orr.w	r3, r3, #16
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
 8007838:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6a39      	ldr	r1, [r7, #32]
 800783c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	61fb      	str	r3, [r7, #28]
   return(result);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800784a:	e002      	b.n	8007852 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007856:	e000      	b.n	800785a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8007858:	2302      	movs	r3, #2
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	3730      	adds	r7, #48	; 0x30
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007870:	2b00      	cmp	r3, #0
 8007872:	d108      	bne.n	8007886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007884:	e031      	b.n	80078ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007886:	2308      	movs	r3, #8
 8007888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800788a:	2308      	movs	r3, #8
 800788c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	0e5b      	lsrs	r3, r3, #25
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	0f5b      	lsrs	r3, r3, #29
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	7b3a      	ldrb	r2, [r7, #12]
 80078b2:	4911      	ldr	r1, [pc, #68]	; (80078f8 <UARTEx_SetNbDataToProcess+0x94>)
 80078b4:	5c8a      	ldrb	r2, [r1, r2]
 80078b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ba:	7b3a      	ldrb	r2, [r7, #12]
 80078bc:	490f      	ldr	r1, [pc, #60]	; (80078fc <UARTEx_SetNbDataToProcess+0x98>)
 80078be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	7b7a      	ldrb	r2, [r7, #13]
 80078d0:	4909      	ldr	r1, [pc, #36]	; (80078f8 <UARTEx_SetNbDataToProcess+0x94>)
 80078d2:	5c8a      	ldrb	r2, [r1, r2]
 80078d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078d8:	7b7a      	ldrb	r2, [r7, #13]
 80078da:	4908      	ldr	r1, [pc, #32]	; (80078fc <UARTEx_SetNbDataToProcess+0x98>)
 80078dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078de:	fb93 f3f2 	sdiv	r3, r3, r2
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	08008468 	.word	0x08008468
 80078fc:	08008470 	.word	0x08008470

08007900 <memset>:
 8007900:	4402      	add	r2, r0
 8007902:	4603      	mov	r3, r0
 8007904:	4293      	cmp	r3, r2
 8007906:	d100      	bne.n	800790a <memset+0xa>
 8007908:	4770      	bx	lr
 800790a:	f803 1b01 	strb.w	r1, [r3], #1
 800790e:	e7f9      	b.n	8007904 <memset+0x4>

08007910 <strstr>:
 8007910:	780a      	ldrb	r2, [r1, #0]
 8007912:	b570      	push	{r4, r5, r6, lr}
 8007914:	b96a      	cbnz	r2, 8007932 <strstr+0x22>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	429a      	cmp	r2, r3
 800791a:	d109      	bne.n	8007930 <strstr+0x20>
 800791c:	460c      	mov	r4, r1
 800791e:	4605      	mov	r5, r0
 8007920:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0f6      	beq.n	8007916 <strstr+0x6>
 8007928:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800792c:	429e      	cmp	r6, r3
 800792e:	d0f7      	beq.n	8007920 <strstr+0x10>
 8007930:	3001      	adds	r0, #1
 8007932:	7803      	ldrb	r3, [r0, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1ef      	bne.n	8007918 <strstr+0x8>
 8007938:	4618      	mov	r0, r3
 800793a:	e7ec      	b.n	8007916 <strstr+0x6>

0800793c <__libc_init_array>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4d0d      	ldr	r5, [pc, #52]	; (8007974 <__libc_init_array+0x38>)
 8007940:	4c0d      	ldr	r4, [pc, #52]	; (8007978 <__libc_init_array+0x3c>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	2600      	movs	r6, #0
 8007948:	42a6      	cmp	r6, r4
 800794a:	d109      	bne.n	8007960 <__libc_init_array+0x24>
 800794c:	4d0b      	ldr	r5, [pc, #44]	; (800797c <__libc_init_array+0x40>)
 800794e:	4c0c      	ldr	r4, [pc, #48]	; (8007980 <__libc_init_array+0x44>)
 8007950:	f000 f818 	bl	8007984 <_init>
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	2600      	movs	r6, #0
 800795a:	42a6      	cmp	r6, r4
 800795c:	d105      	bne.n	800796a <__libc_init_array+0x2e>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	f855 3b04 	ldr.w	r3, [r5], #4
 8007964:	4798      	blx	r3
 8007966:	3601      	adds	r6, #1
 8007968:	e7ee      	b.n	8007948 <__libc_init_array+0xc>
 800796a:	f855 3b04 	ldr.w	r3, [r5], #4
 800796e:	4798      	blx	r3
 8007970:	3601      	adds	r6, #1
 8007972:	e7f2      	b.n	800795a <__libc_init_array+0x1e>
 8007974:	08008480 	.word	0x08008480
 8007978:	08008480 	.word	0x08008480
 800797c:	08008480 	.word	0x08008480
 8007980:	08008484 	.word	0x08008484

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr

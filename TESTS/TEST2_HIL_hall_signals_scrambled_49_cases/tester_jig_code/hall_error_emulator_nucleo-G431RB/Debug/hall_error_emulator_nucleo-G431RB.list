
hall_error_emulator_nucleo-G431RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d88  08006d88  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d90  08006d90  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08006d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200001a0  08006f38  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08006f38  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001733c  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b8  00000000  00000000  0003754f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed8  00000000  00000000  0003be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3af  00000000  00000000  0003cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019405  00000000  00000000  0005c0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c87bb  00000000  00000000  000754e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f30  00000000  00000000  0013dca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d3  00000000  00000000  00142bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006294 	.word	0x08006294

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	08006294 	.word	0x08006294

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800051a:	463b      	mov	r3, r7
 800051c:	2230      	movs	r2, #48	; 0x30
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 fe75 	bl	8006210 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_DAC1_Init+0x80>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <MX_DAC1_Init+0x84>)
 800052a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800052c:	4819      	ldr	r0, [pc, #100]	; (8000594 <MX_DAC1_Init+0x80>)
 800052e:	f001 fadc 	bl	8001aea <HAL_DAC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000538:	f000 faeb 	bl	8000b12 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800053c:	2302      	movs	r3, #2
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800054c:	2306      	movs	r3, #6
 800054e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_DAC1_Init+0x80>)
 8000568:	f001 fc1a 	bl	8001da0 <HAL_DAC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000572:	f000 face 	bl	8000b12 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	2210      	movs	r2, #16
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_DAC1_Init+0x80>)
 800057e:	f001 fc0f 	bl	8001da0 <HAL_DAC_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000588:	f000 fac3 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	3730      	adds	r7, #48	; 0x30
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200001bc 	.word	0x200001bc
 8000598:	50000800 	.word	0x50000800

0800059c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a41      	ldr	r2, [pc, #260]	; (80006c0 <HAL_DAC_MspInit+0x124>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d17c      	bne.n	80006b8 <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a40      	ldr	r2, [pc, #256]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a3a      	ldr	r2, [pc, #232]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <HAL_DAC_MspInit+0x128>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005ee:	2330      	movs	r3, #48	; 0x30
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f002 f93c 	bl	8002880 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_DAC_MspInit+0x130>)
 800060c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000610:	2206      	movs	r2, #6
 8000612:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000616:	2210      	movs	r2, #16
 8000618:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000634:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000638:	2220      	movs	r2, #32
 800063a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800063e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000644:	4820      	ldr	r0, [pc, #128]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000646:	f001 fddd 	bl	8002204 <HAL_DMA_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000650:	f000 fa5f 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <HAL_DAC_MspInit+0x12c>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <HAL_DAC_MspInit+0x138>)
 8000664:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000668:	2207      	movs	r2, #7
 800066a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 800066e:	2210      	movs	r2, #16
 8000670:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000690:	2220      	movs	r2, #32
 8000692:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 8000696:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800069a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 800069e:	f001 fdb1 	bl	8002204 <HAL_DMA_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80006a8:	f000 fa33 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_DAC_MspInit+0x134>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	50000800 	.word	0x50000800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	200001d0 	.word	0x200001d0
 80006cc:	40020030 	.word	0x40020030
 80006d0:	20000230 	.word	0x20000230
 80006d4:	40020044 	.word	0x40020044

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_DMA_Init+0x80>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <MX_DMA_Init+0x80>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_DMA_Init+0x80>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_DMA_Init+0x80>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <MX_DMA_Init+0x80>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6493      	str	r3, [r2, #72]	; 0x48
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_DMA_Init+0x80>)
 8000704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	200b      	movs	r0, #11
 8000714:	f001 f9b5 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000718:	200b      	movs	r0, #11
 800071a:	f001 f9cc 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	200c      	movs	r0, #12
 8000724:	f001 f9ad 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000728:	200c      	movs	r0, #12
 800072a:	f001 f9c4 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200d      	movs	r0, #13
 8000734:	f001 f9a5 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000738:	200d      	movs	r0, #13
 800073a:	f001 f9bc 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200e      	movs	r0, #14
 8000744:	f001 f99d 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000748:	200e      	movs	r0, #14
 800074a:	f001 f9b4 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_GPIO_Init+0x100>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a39      	ldr	r2, [pc, #228]	; (800085c <MX_GPIO_Init+0x100>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_GPIO_Init+0x100>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <MX_GPIO_Init+0x100>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <MX_GPIO_Init+0x100>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <MX_GPIO_Init+0x100>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MX_GPIO_Init+0x100>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <MX_GPIO_Init+0x100>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_GPIO_Init+0x100>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_GPIO_Init+0x100>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a27      	ldr	r2, [pc, #156]	; (800085c <MX_GPIO_Init+0x100>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <MX_GPIO_Init+0x100>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, output_HALLC_Pin|output_HALLA_Pin|output_HALLB_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2138      	movs	r1, #56	; 0x38
 80007d6:	4822      	ldr	r0, [pc, #136]	; (8000860 <MX_GPIO_Init+0x104>)
 80007d8:	f002 f9ec 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <MX_GPIO_Init+0x104>)
 80007e4:	f002 f9e6 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = bluepushbutton_Pin|input_HALLC_Pin|input_HALLB_Pin;
 80007e8:	f242 0303 	movw	r3, #8195	; 0x2003
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4819      	ldr	r0, [pc, #100]	; (8000864 <MX_GPIO_Init+0x108>)
 80007fe:	f002 f83f 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_HALLA_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(input_HALLA_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_GPIO_Init+0x104>)
 8000816:	f002 f833 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = output_HALLC_Pin|output_HALLA_Pin|output_HALLB_Pin;
 800081a:	2338      	movs	r3, #56	; 0x38
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x104>)
 8000832:	f002 f825 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_TARGET_BOARD_Pin;
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_TARGET_BOARD_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x104>)
 8000850:	f002 f816 	bl	8002880 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400
 8000864:	48000800 	.word	0x48000800

08000868 <hall_swapper_twentyKHzinterruptionIRQ>:

/**
* \brief does the hall swapping and polarizing thing
*   this function should be called inside a 20Khz TIM interruption, in our case inside TIM8_UP_IRQHandler(void)
*/
void hall_swapper_twentyKHzinterruptionIRQ( void ){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	if(emulator_enabled==0){
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <hall_swapper_twentyKHzinterruptionIRQ+0x44>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <hall_swapper_twentyKHzinterruptionIRQ+0x12>
		read_input_signals();		//read all gpio inputs into signal_inputs
 8000874:	f000 f81c 	bl	80008b0 <read_input_signals>
 8000878:	e001      	b.n	800087e <hall_swapper_twentyKHzinterruptionIRQ+0x16>
	}else{
		emulated_read_input_signals();
 800087a:	f000 f83b 	bl	80008f4 <emulated_read_input_signals>
	}

	polarice_signals(hall_A);	//apply signal inversions, polarice should come first
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f868 	bl	8000954 <polarice_signals>
	polarice_signals(hall_B);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 f865 	bl	8000954 <polarice_signals>
	polarice_signals(hall_C);
 800088a:	2002      	movs	r0, #2
 800088c:	f000 f862 	bl	8000954 <polarice_signals>
	swap_signals(hall_A);		//apply signal order swapping, swapping should come second
 8000890:	2000      	movs	r0, #0
 8000892:	f000 f883 	bl	800099c <swap_signals>
	swap_signals(hall_B);
 8000896:	2001      	movs	r0, #1
 8000898:	f000 f880 	bl	800099c <swap_signals>
	swap_signals(hall_C);
 800089c:	2002      	movs	r0, #2
 800089e:	f000 f87d 	bl	800099c <swap_signals>

	write_output_signals();		//write signal outputs into signal_outputs
 80008a2:	f000 f8af 	bl	8000a04 <write_output_signals>

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200005d4 	.word	0x200005d4

080008b0 <read_input_signals>:

/**
* \brief simple GPIO read of all halll signals, stores readings into signal_inputs
*/
void read_input_signals(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	signal_inputs[hall_A]=HAL_GPIO_ReadPin(input_HALLA_GPIO_Port, input_HALLA_Pin);
 80008b4:	2101      	movs	r1, #1
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <read_input_signals+0x38>)
 80008b8:	f002 f964 	bl	8002b84 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <read_input_signals+0x3c>)
 80008c2:	701a      	strb	r2, [r3, #0]
	signal_inputs[hall_B]=HAL_GPIO_ReadPin(input_HALLB_GPIO_Port, input_HALLB_Pin);
 80008c4:	2102      	movs	r1, #2
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <read_input_signals+0x40>)
 80008c8:	f002 f95c 	bl	8002b84 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <read_input_signals+0x3c>)
 80008d2:	705a      	strb	r2, [r3, #1]
	signal_inputs[hall_C]=HAL_GPIO_ReadPin(input_HALLC_GPIO_Port, input_HALLC_Pin);
 80008d4:	2101      	movs	r1, #1
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <read_input_signals+0x40>)
 80008d8:	f002 f954 	bl	8002b84 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <read_input_signals+0x3c>)
 80008e2:	709a      	strb	r2, [r3, #2]
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	48000400 	.word	0x48000400
 80008ec:	20000298 	.word	0x20000298
 80008f0:	48000800 	.word	0x48000800

080008f4 <emulated_read_input_signals>:

/**
* \brief simple GPIO read of all halll signals, stores readings into signal_inputs
*/
void emulated_read_input_signals(void){
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	signal_inputs[hall_A]=HALL_A[dma_index];
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <emulated_read_input_signals+0x4c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a11      	ldr	r2, [pc, #68]	; (8000944 <emulated_read_input_signals+0x50>)
 80008fe:	5cd2      	ldrb	r2, [r2, r3]
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <emulated_read_input_signals+0x54>)
 8000902:	701a      	strb	r2, [r3, #0]
	signal_inputs[hall_B]=HALL_B[dma_index];
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a10      	ldr	r2, [pc, #64]	; (800094c <emulated_read_input_signals+0x58>)
 800090a:	5cd2      	ldrb	r2, [r2, r3]
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <emulated_read_input_signals+0x54>)
 800090e:	705a      	strb	r2, [r3, #1]
	signal_inputs[hall_C]=HALL_C[dma_index];
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <emulated_read_input_signals+0x5c>)
 8000916:	5cd2      	ldrb	r2, [r2, r3]
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <emulated_read_input_signals+0x54>)
 800091a:	709a      	strb	r2, [r3, #2]

	if(dma_index>=(sizeof(HALL_A)/sizeof(HALL_A[0]))-1){//taking care of the circular buffer index reset
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <emulated_read_input_signals+0x4c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b82      	cmp	r3, #130	; 0x82
 8000922:	d903      	bls.n	800092c <emulated_read_input_signals+0x38>
		dma_index=0;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
	}else{
		dma_index++;
	}
}
 800092a:	e004      	b.n	8000936 <emulated_read_input_signals+0x42>
		dma_index++;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <emulated_read_input_signals+0x4c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	4a03      	ldr	r2, [pc, #12]	; (8000940 <emulated_read_input_signals+0x4c>)
 8000934:	6013      	str	r3, [r2, #0]
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	200002a0 	.word	0x200002a0
 8000944:	20000008 	.word	0x20000008
 8000948:	20000298 	.word	0x20000298
 800094c:	2000008c 	.word	0x2000008c
 8000950:	20000110 	.word	0x20000110

08000954 <polarice_signals>:
/**
* \brief For a single hall_x signal: apply to signal_inputs the polarization noted by signal_polarity, direct or inverse.
* polarizing should come before swapping.
* \param hall_signals_order hall_x , reffers to the hall signal, could be hall_A/B/C
*/
void polarice_signals(hall_signals_order hall_x){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]

	if(signal_polarity[hall_x]==hall_inverse){		//check for inverse polarity flag
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <polarice_signals+0x40>)
 8000962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10d      	bne.n	8000986 <polarice_signals+0x32>
		if( signal_inputs[hall_x]==GPIO_PIN_RESET){	//inverted signal
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <polarice_signals+0x44>)
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <polarice_signals+0x2a>
			signal_inputs[hall_x]=GPIO_PIN_SET;
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <polarice_signals+0x44>)
 8000978:	2101      	movs	r1, #1
 800097a:	54d1      	strb	r1, [r2, r3]
		}
	}else{											//polarity is not inverted
		//not inverted signal
	}

}
 800097c:	e003      	b.n	8000986 <polarice_signals+0x32>
			signal_inputs[hall_x]=GPIO_PIN_RESET;
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <polarice_signals+0x44>)
 8000982:	2100      	movs	r1, #0
 8000984:	54d1      	strb	r1, [r2, r3]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000290 	.word	0x20000290
 8000998:	20000298 	.word	0x20000298

0800099c <swap_signals>:
/**
* \brief For a single hall_x signal: load signal_outputs with  signal_inputs values in the order noted by signal_order
* swapping should come after polarizing
* \param hall_signals_order hall_x , reffers to the hall signal, could be hall_A/B/C
*/
void swap_signals(hall_signals_order hall_x){
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
	if(signal_order[hall_x]==hall_A){
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <swap_signals+0x5c>)
 80009aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <swap_signals+0x22>
		signal_outputs[hall_x]=signal_inputs[hall_A];
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4a11      	ldr	r2, [pc, #68]	; (80009fc <swap_signals+0x60>)
 80009b6:	7811      	ldrb	r1, [r2, #0]
 80009b8:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <swap_signals+0x64>)
 80009ba:	54d1      	strb	r1, [r2, r3]
	}else if(signal_order[hall_x]==hall_B){
		signal_outputs[hall_x]=signal_inputs[hall_B];
	}else if(signal_order[hall_x]==hall_C){
		signal_outputs[hall_x]=signal_inputs[hall_C];
	}
}
 80009bc:	e016      	b.n	80009ec <swap_signals+0x50>
	}else if(signal_order[hall_x]==hall_B){
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <swap_signals+0x5c>)
 80009c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d105      	bne.n	80009d6 <swap_signals+0x3a>
		signal_outputs[hall_x]=signal_inputs[hall_B];
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <swap_signals+0x60>)
 80009ce:	7851      	ldrb	r1, [r2, #1]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <swap_signals+0x64>)
 80009d2:	54d1      	strb	r1, [r2, r3]
}
 80009d4:	e00a      	b.n	80009ec <swap_signals+0x50>
	}else if(signal_order[hall_x]==hall_C){
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <swap_signals+0x5c>)
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d104      	bne.n	80009ec <swap_signals+0x50>
		signal_outputs[hall_x]=signal_inputs[hall_C];
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <swap_signals+0x60>)
 80009e6:	7891      	ldrb	r1, [r2, #2]
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <swap_signals+0x64>)
 80009ea:	54d1      	strb	r1, [r2, r3]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000298 	.word	0x20000298
 8000a00:	2000029c 	.word	0x2000029c

08000a04 <write_output_signals>:

/**
* \brief simple GPIO write of all hall signals, writes gpios with signal_outputs values
*/
void write_output_signals(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(output_HALLA_GPIO_Port, output_HALLA_Pin, signal_outputs[hall_A]);
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <write_output_signals+0x34>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2110      	movs	r1, #16
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <write_output_signals+0x38>)
 8000a12:	f002 f8cf 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(output_HALLB_GPIO_Port, output_HALLB_Pin, signal_outputs[hall_B]);
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <write_output_signals+0x34>)
 8000a18:	785b      	ldrb	r3, [r3, #1]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <write_output_signals+0x38>)
 8000a20:	f002 f8c8 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(output_HALLC_GPIO_Port, output_HALLC_Pin, signal_outputs[hall_C]);
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <write_output_signals+0x34>)
 8000a26:	789b      	ldrb	r3, [r3, #2]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <write_output_signals+0x38>)
 8000a2e:	f002 f8c1 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000029c 	.word	0x2000029c
 8000a3c:	48000400 	.word	0x48000400

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 feaf 	bl	80017a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f818 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f7ff fe86 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a50:	f7ff fe42 	bl	80006d8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a54:	f7ff fd5e 	bl	8000514 <MX_DAC1_Init>
  MX_LPUART1_UART_Init();
 8000a58:	f000 f976 	bl	8000d48 <MX_LPUART1_UART_Init>
  MX_TIM8_Init();
 8000a5c:	f000 f8fc 	bl	8000c58 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a60:	f000 f9bc 	bl	8000ddc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ui_uart_init();
 8000a64:	f000 fb00 	bl	8001068 <ui_uart_init>
  HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <main+0x38>)
 8000a6a:	f003 f8eb 	bl	8003c44 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ui_uart_listen();
 8000a6e:	f000 fb25 	bl	80010bc <ui_uart_listen>
	emulation();
 8000a72:	f000 fe13 	bl	800169c <emulation>
	ui_uart_listen();
 8000a76:	e7fa      	b.n	8000a6e <main+0x2e>
 8000a78:	200002a4 	.word	0x200002a4

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	2238      	movs	r2, #56	; 0x38
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f005 fbc0 	bl	8006210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f002 f8a0 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000abe:	2355      	movs	r3, #85	; 0x55
 8000ac0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f93a 	bl	8002d4c <HAL_RCC_OscConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ade:	f000 f818 	bl	8000b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2104      	movs	r1, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fc3e 	bl	800337c <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b06:	f000 f804 	bl	8000b12 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b16:	b672      	cpsid	i
}
 8000b18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	; 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b52:	f002 f8eb 	bl	8002d2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 fe4c 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bbe:	f001 fd04 	bl	80025ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000410 	.word	0x20000410

08000bcc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA1_Channel2_IRQHandler+0x10>)
 8000bd2:	f001 fcfa 	bl	80025ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000470 	.word	0x20000470

08000be0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <DMA1_Channel3_IRQHandler+0x10>)
 8000be6:	f001 fcf0 	bl	80025ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001d0 	.word	0x200001d0

08000bf4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA1_Channel4_IRQHandler+0x10>)
 8000bfa:	f001 fce6 	bl	80025ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000230 	.word	0x20000230

08000c08 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */
  hall_swapper_twentyKHzinterruptionIRQ();
 8000c0c:	f7ff fe2c 	bl	8000868 <hall_swapper_twentyKHzinterruptionIRQ>
  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM8_UP_IRQHandler+0x14>)
 8000c12:	f003 f8b0 	bl	8003d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200002a4 	.word	0x200002a4

08000c20 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <LPUART1_IRQHandler+0x10>)
 8000c26:	f003 fed9 	bl	80049dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200002f0 	.word	0x200002f0

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c78:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <MX_TIM8_Init+0xa0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = PREESCALER_TIM8;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c7e:	22a9      	movs	r2, #169	; 0xa9
 8000c80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c8a:	2231      	movs	r2, #49	; 0x31
 8000c8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000ca2:	f002 ff77 	bl	8003b94 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000cac:	f7ff ff31 	bl	8000b12 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000cbe:	f003 f9d9 	bl	8004074 <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000cc8:	f7ff ff23 	bl	8000b12 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_TIM8_Init+0x9c>)
 8000cde:	f003 fc21 	bl	8004524 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000ce8:	f7ff ff13 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200002a4 	.word	0x200002a4
 8000cf8:	40013400 	.word	0x40013400

08000cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d113      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	202c      	movs	r0, #44	; 0x2c
 8000d2c:	f000 fea9 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000d30:	202c      	movs	r0, #44	; 0x2c
 8000d32:	f000 fec0 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013400 	.word	0x40013400
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <MX_LPUART1_UART_Init+0x90>)
 8000d50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d8c:	f003 fc92 	bl	80046b4 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d96:	f7ff febc 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000d9e:	f005 f910 	bl	8005fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000da8:	f7ff feb3 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000db0:	f005 f945 	bl	800603e <HAL_UARTEx_SetRxFifoThreshold>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000dba:	f7ff feaa 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_LPUART1_UART_Init+0x8c>)
 8000dc0:	f005 f8c6 	bl	8005f50 <HAL_UARTEx_DisableFifoMode>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000dca:	f7ff fea2 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200002f0 	.word	0x200002f0
 8000dd8:	40008000 	.word	0x40008000

08000ddc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000de2:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_USART1_UART_Init+0x94>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e26:	f003 fc45 	bl	80046b4 <HAL_UART_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e30:	f7ff fe6f 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e38:	f005 f8c3 	bl	8005fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e42:	f7ff fe66 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e4a:	f005 f8f8 	bl	800603e <HAL_UARTEx_SetRxFifoThreshold>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f7ff fe5d 	bl	8000b12 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_USART1_UART_Init+0x90>)
 8000e5a:	f005 f879 	bl	8005f50 <HAL_UARTEx_DisableFifoMode>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f7ff fe55 	bl	8000b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000380 	.word	0x20000380
 8000e70:	40013800 	.word	0x40013800

08000e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b09c      	sub	sp, #112	; 0x70
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	2244      	movs	r2, #68	; 0x44
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 f9bb 	bl	8006210 <memset>
  if(uartHandle->Instance==LPUART1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <HAL_UART_MspInit+0x1d4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	f040 8092 	bne.w	8000fca <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fc7e 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff fe28 	bl	8000b12 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec2:	4b62      	ldr	r3, [pc, #392]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec6:	4a61      	ldr	r2, [pc, #388]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a5b      	ldr	r2, [pc, #364]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f02:	230c      	movs	r3, #12
 8000f04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f001 fcb6 	bl	8002880 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000f14:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f16:	4a4f      	ldr	r2, [pc, #316]	; (8001054 <HAL_UART_MspInit+0x1e0>)
 8000f18:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f1c:	2222      	movs	r2, #34	; 0x22
 8000f1e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f26:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f38:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f40:	2220      	movs	r2, #32
 8000f42:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f4a:	4841      	ldr	r0, [pc, #260]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f4c:	f001 f95a 	bl	8002204 <HAL_DMA_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f56:	f7ff fddc 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a3c      	ldr	r2, [pc, #240]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f5e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f60:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <HAL_UART_MspInit+0x1dc>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f68:	4a3c      	ldr	r2, [pc, #240]	; (800105c <HAL_UART_MspInit+0x1e8>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f6e:	2223      	movs	r2, #35	; 0x23
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f74:	2210      	movs	r2, #16
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000f90:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000f9c:	482e      	ldr	r0, [pc, #184]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000f9e:	f001 f931 	bl	8002204 <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8000fa8:	f7ff fdb3 	bl	8000b12 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000fb0:	679a      	str	r2, [r3, #120]	; 0x78
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <HAL_UART_MspInit+0x1e4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	205b      	movs	r0, #91	; 0x5b
 8000fbe:	f000 fd60 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000fc2:	205b      	movs	r0, #91	; 0x5b
 8000fc4:	f000 fd77 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fc8:	e03a      	b.n	8001040 <HAL_UART_MspInit+0x1cc>
  else if(uartHandle->Instance==USART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <HAL_UART_MspInit+0x1ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d135      	bne.n	8001040 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fbe7 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8000fec:	f7ff fd91 	bl	8000b12 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_UART_MspInit+0x1d8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_UART_MspInit+0x1d8>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_UART_MspInit+0x1d8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001030:	2307      	movs	r3, #7
 8001032:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001038:	4619      	mov	r1, r3
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <HAL_UART_MspInit+0x1f0>)
 800103c:	f001 fc20 	bl	8002880 <HAL_GPIO_Init>
}
 8001040:	bf00      	nop
 8001042:	3770      	adds	r7, #112	; 0x70
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40008000 	.word	0x40008000
 800104c:	40021000 	.word	0x40021000
 8001050:	20000410 	.word	0x20000410
 8001054:	40020008 	.word	0x40020008
 8001058:	20000470 	.word	0x20000470
 800105c:	4002001c 	.word	0x4002001c
 8001060:	40013800 	.word	0x40013800
 8001064:	48000800 	.word	0x48000800

08001068 <ui_uart_init>:
hall_signals_order decode_char_to_hall_signals_order(uint8_t *pData);
hall_signals_polarity decode_char_to_hall_signals_polarity(uint8_t *pData);
void reset_or_start_uart_DMA_communications();


void ui_uart_init(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_tx,DMA_IT_HT);						//disable DMA half transfer interruption
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <ui_uart_init+0x30>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <ui_uart_init+0x30>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0204 	bic.w	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx,DMA_IT_HT);						//disable DMA half transfer interruption
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <ui_uart_init+0x34>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <ui_uart_init+0x34>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
	reset_or_start_uart_DMA_communications();
 800108c:	f000 fad0 	bl	8001630 <reset_or_start_uart_DMA_communications>
	ui_uart_transmit_initial_message();
 8001090:	f000 f806 	bl	80010a0 <ui_uart_transmit_initial_message>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000470 	.word	0x20000470
 800109c:	20000410 	.word	0x20000410

080010a0 <ui_uart_transmit_initial_message>:

void ui_uart_transmit_initial_message(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&hlpuart1, initialmessage, sizeof(initialmessage));	//just order the DMA to spit out initialmessage trough uart
 80010a4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80010a8:	4902      	ldr	r1, [pc, #8]	; (80010b4 <ui_uart_transmit_initial_message+0x14>)
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <ui_uart_transmit_initial_message+0x18>)
 80010ac:	f003 fb52 	bl	8004754 <HAL_UART_Transmit_DMA>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	080066ec 	.word	0x080066ec
 80010b8:	200002f0 	.word	0x200002f0

080010bc <ui_uart_listen>:

void ui_uart_listen(){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if(ui_uart_echo_and_breaklinedetect_rx()==1){
 80010c0:	f000 f824 	bl	800110c <ui_uart_echo_and_breaklinedetect_rx>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d118      	bne.n	80010fc <ui_uart_listen+0x40>

		if(decode_othercommands(rx_buffer, echoed_size)!=1){
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <ui_uart_listen+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <ui_uart_listen+0x48>)
 80010d4:	f000 f95c 	bl	8001390 <decode_othercommands>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d006      	beq.n	80010ec <ui_uart_listen+0x30>
			decode_ABCcommands(rx_buffer, echoed_size);
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <ui_uart_listen+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <ui_uart_listen+0x48>)
 80010e8:	f000 f888 	bl	80011fc <decode_ABCcommands>
		}
		rx_size=0;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <ui_uart_listen+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		echoed_size=0;
 80010f2:	4b03      	ldr	r3, [pc, #12]	; (8001100 <ui_uart_listen+0x44>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		reset_or_start_uart_DMA_communications();
 80010f8:	f000 fa9a 	bl	8001630 <reset_or_start_uart_DMA_communications>
	}
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200005d2 	.word	0x200005d2
 8001104:	200004d0 	.word	0x200004d0
 8001108:	200005d1 	.word	0x200005d1

0800110c <ui_uart_echo_and_breaklinedetect_rx>:

uint32_t ui_uart_echo_and_breaklinedetect_rx(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint32_t linejumpdetected_flag=0;//1= we detected a line jump
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]

	if(rx_flag==1){											//uart received something
 8001116:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <ui_uart_echo_and_breaklinedetect_rx+0xdc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d15e      	bne.n	80011dc <ui_uart_echo_and_breaklinedetect_rx+0xd0>
		if((rx_size-echoed_size)>0){						//check only that new something not the whole RX buffer each time
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	dd4f      	ble.n	80011ce <ui_uart_echo_and_breaklinedetect_rx+0xc2>
			for(uint32_t i=0;i<rx_size-echoed_size;i++){
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	e00e      	b.n	8001152 <ui_uart_echo_and_breaklinedetect_rx+0x46>
				if(rx_buffer[echoed_size+i]=='\r'){			//detect a breakline from the user, that means start decoding
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001140:	5cd3      	ldrb	r3, [r2, r3]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	d102      	bne.n	800114c <ui_uart_echo_and_breaklinedetect_rx+0x40>
					linejumpdetected_flag=1;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
					break;
 800114a:	e00c      	b.n	8001166 <ui_uart_echo_and_breaklinedetect_rx+0x5a>
			for(uint32_t i=0;i<rx_size-echoed_size;i++){
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	461a      	mov	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4293      	cmp	r3, r2
 8001164:	d3e6      	bcc.n	8001134 <ui_uart_echo_and_breaklinedetect_rx+0x28>
				}
			}

			if(linejumpdetected_flag==1){
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d11c      	bne.n	80011a6 <ui_uart_echo_and_breaklinedetect_rx+0x9a>
				rx_buffer[rx_size]='\n';
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001174:	210a      	movs	r1, #10
 8001176:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit_DMA(&hlpuart1, &rx_buffer[echoed_size], (rx_size-echoed_size)+1);	//the line jump from putty is actually only '/r', for readability we will add also a '/n'
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 8001180:	18d1      	adds	r1, r2, r3
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b29b      	uxth	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <ui_uart_echo_and_breaklinedetect_rx+0xec>)
 800119a:	f003 fadb 	bl	8004754 <HAL_UART_Transmit_DMA>
				HAL_Delay(25);
 800119e:	2019      	movs	r0, #25
 80011a0:	f000 fb72 	bl	8001888 <HAL_Delay>
 80011a4:	e013      	b.n	80011ce <ui_uart_echo_and_breaklinedetect_rx+0xc2>
			}else{
				HAL_UART_Transmit_DMA(&hlpuart1, &rx_buffer[echoed_size], (rx_size-echoed_size));
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <ui_uart_echo_and_breaklinedetect_rx+0xe8>)
 80011ae:	18d1      	adds	r1, r2, r3
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <ui_uart_echo_and_breaklinedetect_rx+0xec>)
 80011c4:	f003 fac6 	bl	8004754 <HAL_UART_Transmit_DMA>
				HAL_Delay(25);
 80011c8:	2019      	movs	r0, #25
 80011ca:	f000 fb5d 	bl	8001888 <HAL_Delay>
			}
		}
		echoed_size+=rx_size-echoed_size;				//actualise already echoed and checked for breakline buffer.
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <ui_uart_echo_and_breaklinedetect_rx+0xe0>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <ui_uart_echo_and_breaklinedetect_rx+0xe4>)
 80011d4:	701a      	strb	r2, [r3, #0]
		rx_flag=0;										//reset the uart received flag
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <ui_uart_echo_and_breaklinedetect_rx+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	}

	return linejumpdetected_flag;
 80011dc:	687b      	ldr	r3, [r7, #4]

}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200005d0 	.word	0x200005d0
 80011ec:	200005d1 	.word	0x200005d1
 80011f0:	200005d2 	.word	0x200005d2
 80011f4:	200004d0 	.word	0x200004d0
 80011f8:	200002f0 	.word	0x200002f0

080011fc <decode_ABCcommands>:

uint32_t decode_ABCcommands(uint8_t *pData, uint16_t Size){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]

	hall_signals_order aux_signal_order[3]={hall_order_unknown, hall_order_unknown, hall_order_unknown};
 8001208:	4a5b      	ldr	r2, [pc, #364]	; (8001378 <decode_ABCcommands+0x17c>)
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001212:	6018      	str	r0, [r3, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	8019      	strh	r1, [r3, #0]
	hall_signals_polarity aux_signal_polarity[3]={hall_polarity_unknown, hall_polarity_unknown, hall_polarity_unknown};
 8001218:	4a57      	ldr	r2, [pc, #348]	; (8001378 <decode_ABCcommands+0x17c>)
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	8019      	strh	r1, [r3, #0]
	uint32_t number_of_identified_phases=0;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t hall_order_unknown_flag=0;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t hall_polarity_unknown_flag=0;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint16_t newSize_after_all_deletions=apply_delete_character_to_buffer(pData,Size);
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f923 	bl	8001484 <apply_delete_character_to_buffer>
 800123e:	4603      	mov	r3, r0
 8001240:	83fb      	strh	r3, [r7, #30]


	for (uint32_t i = 0; i < newSize_after_all_deletions; ++i) {
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
 8001246:	e033      	b.n	80012b0 <decode_ABCcommands+0xb4>
		hall_signals_order just_identified_hall_order=decode_char_to_hall_signals_order((uint8_t *)&pData[i]);
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	4413      	add	r3, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f96c 	bl	800152c <decode_char_to_hall_signals_order>
 8001254:	4603      	mov	r3, r0
 8001256:	83bb      	strh	r3, [r7, #28]
		if(just_identified_hall_order!=hall_order_unknown){//we got a phase character match!
 8001258:	8bbb      	ldrh	r3, [r7, #28]
 800125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125e:	4293      	cmp	r3, r2
 8001260:	d023      	beq.n	80012aa <decode_ABCcommands+0xae>
			aux_signal_order[number_of_identified_phases]=just_identified_hall_order;
 8001262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	3338      	adds	r3, #56	; 0x38
 8001268:	443b      	add	r3, r7
 800126a:	8bba      	ldrh	r2, [r7, #28]
 800126c:	f823 2c24 	strh.w	r2, [r3, #-36]
			if(i==0){//take care of the 0 index, we dont want to access the array out of bounds
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	2b00      	cmp	r3, #0
 8001274:	d107      	bne.n	8001286 <decode_ABCcommands+0x8a>
				aux_signal_polarity[number_of_identified_phases]=hall_direct;
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3338      	adds	r3, #56	; 0x38
 800127c:	443b      	add	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	f823 2c2c 	strh.w	r2, [r3, #-44]
 8001284:	e00e      	b.n	80012a4 <decode_ABCcommands+0xa8>
			}else{
				aux_signal_polarity[number_of_identified_phases]=decode_char_to_hall_signals_polarity((uint8_t *)&pData[i-1]);
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	3b01      	subs	r3, #1
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f9b6 	bl	8001600 <decode_char_to_hall_signals_polarity>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	3338      	adds	r3, #56	; 0x38
 800129e:	443b      	add	r3, r7
 80012a0:	f823 2c2c 	strh.w	r2, [r3, #-44]
			}

			number_of_identified_phases++;
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	3301      	adds	r3, #1
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint32_t i = 0; i < newSize_after_all_deletions; ++i) {
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	3301      	adds	r3, #1
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b0:	8bfb      	ldrh	r3, [r7, #30]
 80012b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d3c7      	bcc.n	8001248 <decode_ABCcommands+0x4c>
		}
	}

	for (uint32_t i = 0; i < 3; ++i) {//check if all values are acceptable
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	e01c      	b.n	80012f8 <decode_ABCcommands+0xfc>
		if(aux_signal_order[i]==hall_order_unknown){
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3338      	adds	r3, #56	; 0x38
 80012c4:	443b      	add	r3, r7
 80012c6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d102      	bne.n	80012d8 <decode_ABCcommands+0xdc>
			hall_order_unknown_flag=1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
			break;			//we found an unacceptable value, early break
 80012d6:	e012      	b.n	80012fe <decode_ABCcommands+0x102>
		}

		if(aux_signal_polarity[i]==hall_polarity_unknown){
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	3338      	adds	r3, #56	; 0x38
 80012de:	443b      	add	r3, r7
 80012e0:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80012e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d102      	bne.n	80012f2 <decode_ABCcommands+0xf6>
			hall_polarity_unknown_flag=1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;			//we found an unacceptable value, early break
 80012f0:	e005      	b.n	80012fe <decode_ABCcommands+0x102>
	for (uint32_t i = 0; i < 3; ++i) {//check if all values are acceptable
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d9df      	bls.n	80012be <decode_ABCcommands+0xc2>
		}
	}

	if(number_of_identified_phases==3 && hall_order_unknown_flag==0 && hall_polarity_unknown_flag==0){
 80012fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001300:	2b03      	cmp	r3, #3
 8001302:	d12c      	bne.n	800135e <decode_ABCcommands+0x162>
 8001304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001306:	2b00      	cmp	r3, #0
 8001308:	d129      	bne.n	800135e <decode_ABCcommands+0x162>
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d126      	bne.n	800135e <decode_ABCcommands+0x162>
		//everything went well, unload out new values into the real order and polarity arrays
		for(uint32_t i = 0; i < 3; ++i){
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	e016      	b.n	8001344 <decode_ABCcommands+0x148>
			signal_order[i]=aux_signal_order[i];
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3338      	adds	r3, #56	; 0x38
 800131c:	443b      	add	r3, r7
 800131e:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <decode_ABCcommands+0x180>)
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			signal_polarity[i]=aux_signal_polarity[i];
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	3338      	adds	r3, #56	; 0x38
 8001330:	443b      	add	r3, r7
 8001332:	f833 1c2c 	ldrh.w	r1, [r3, #-44]
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <decode_ABCcommands+0x184>)
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint32_t i = 0; i < 3; ++i){
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	3301      	adds	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d9e5      	bls.n	8001316 <decode_ABCcommands+0x11a>
		}
		HAL_Delay(50);
 800134a:	2032      	movs	r0, #50	; 0x32
 800134c:	f000 fa9c 	bl	8001888 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, okmessage, sizeof(okmessage));
 8001350:	220b      	movs	r2, #11
 8001352:	490c      	ldr	r1, [pc, #48]	; (8001384 <decode_ABCcommands+0x188>)
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <decode_ABCcommands+0x18c>)
 8001356:	f003 f9fd 	bl	8004754 <HAL_UART_Transmit_DMA>
		return 1;
 800135a:	2301      	movs	r3, #1
 800135c:	e008      	b.n	8001370 <decode_ABCcommands+0x174>
	}else{
		HAL_Delay(50);
 800135e:	2032      	movs	r0, #50	; 0x32
 8001360:	f000 fa92 	bl	8001888 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, notokmessage, sizeof(notokmessage));
 8001364:	2222      	movs	r2, #34	; 0x22
 8001366:	4909      	ldr	r1, [pc, #36]	; (800138c <decode_ABCcommands+0x190>)
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <decode_ABCcommands+0x18c>)
 800136a:	f003 f9f3 	bl	8004754 <HAL_UART_Transmit_DMA>
		return 0;
 800136e:	2300      	movs	r3, #0
	}

}
 8001370:	4618      	mov	r0, r3
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	080062ac 	.word	0x080062ac
 800137c:	20000000 	.word	0x20000000
 8001380:	20000290 	.word	0x20000290
 8001384:	08006d30 	.word	0x08006d30
 8001388:	200002f0 	.word	0x200002f0
 800138c:	08006d3c 	.word	0x08006d3c

08001390 <decode_othercommands>:

uint32_t decode_othercommands(uint8_t *pData, uint16_t Size){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
	char* aux_variable_searching_strings=NULL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	//check for the help command
	aux_variable_searching_strings=strstr((char *)pData, (char *)helpcommand);
 80013a0:	492e      	ldr	r1, [pc, #184]	; (800145c <decode_othercommands+0xcc>)
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f004 ff3c 	bl	8006220 <strstr>
 80013a8:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <decode_othercommands+0x36>
		HAL_Delay(50);
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f000 fa69 	bl	8001888 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, helpmessage, sizeof(helpmessage));
 80013b6:	f240 2253 	movw	r2, #595	; 0x253
 80013ba:	4929      	ldr	r1, [pc, #164]	; (8001460 <decode_othercommands+0xd0>)
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <decode_othercommands+0xd4>)
 80013be:	f003 f9c9 	bl	8004754 <HAL_UART_Transmit_DMA>
		return 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e046      	b.n	8001454 <decode_othercommands+0xc4>
	}

	aux_variable_searching_strings=strstr((char *)pData, (char *)resetcommand);
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <decode_othercommands+0xd8>)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f004 ff29 	bl	8006220 <strstr>
 80013ce:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d018      	beq.n	8001408 <decode_othercommands+0x78>
		HAL_Delay(50);
 80013d6:	2032      	movs	r0, #50	; 0x32
 80013d8:	f000 fa56 	bl	8001888 <HAL_Delay>
		HAL_UART_Transmit_DMA(&hlpuart1, resetmessage, sizeof(resetmessage));
 80013dc:	2219      	movs	r2, #25
 80013de:	4923      	ldr	r1, [pc, #140]	; (800146c <decode_othercommands+0xdc>)
 80013e0:	4820      	ldr	r0, [pc, #128]	; (8001464 <decode_othercommands+0xd4>)
 80013e2:	f003 f9b7 	bl	8004754 <HAL_UART_Transmit_DMA>
		HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin,GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ec:	4820      	ldr	r0, [pc, #128]	; (8001470 <decode_othercommands+0xe0>)
 80013ee:	f001 fbe1 	bl	8002bb4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f000 fa48 	bl	8001888 <HAL_Delay>
		HAL_GPIO_WritePin(RESET_TARGET_BOARD_GPIO_Port, RESET_TARGET_BOARD_Pin,GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <decode_othercommands+0xe0>)
 8001400:	f001 fbd8 	bl	8002bb4 <HAL_GPIO_WritePin>
		return 1;
 8001404:	2301      	movs	r3, #1
 8001406:	e025      	b.n	8001454 <decode_othercommands+0xc4>
	}

	aux_variable_searching_strings=strstr((char *)pData, (char *)emulationcommand);
 8001408:	491a      	ldr	r1, [pc, #104]	; (8001474 <decode_othercommands+0xe4>)
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f004 ff08 	bl	8006220 <strstr>
 8001410:	60f8      	str	r0, [r7, #12]
	if(aux_variable_searching_strings!=NULL){
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01c      	beq.n	8001452 <decode_othercommands+0xc2>
		if(emulator_enabled==0){
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <decode_othercommands+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10b      	bne.n	8001438 <decode_othercommands+0xa8>
			emulator_enabled=1;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <decode_othercommands+0xe8>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001426:	2032      	movs	r0, #50	; 0x32
 8001428:	f000 fa2e 	bl	8001888 <HAL_Delay>
			HAL_UART_Transmit_DMA(&hlpuart1, on_emulationmessage, sizeof(on_emulationmessage));
 800142c:	2215      	movs	r2, #21
 800142e:	4913      	ldr	r1, [pc, #76]	; (800147c <decode_othercommands+0xec>)
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <decode_othercommands+0xd4>)
 8001432:	f003 f98f 	bl	8004754 <HAL_UART_Transmit_DMA>
 8001436:	e00a      	b.n	800144e <decode_othercommands+0xbe>
		}else{
			emulator_enabled=0;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <decode_othercommands+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 800143e:	2032      	movs	r0, #50	; 0x32
 8001440:	f000 fa22 	bl	8001888 <HAL_Delay>
			HAL_UART_Transmit_DMA(&hlpuart1, off_emulationmessage, sizeof(off_emulationmessage));
 8001444:	2216      	movs	r2, #22
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <decode_othercommands+0xf0>)
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <decode_othercommands+0xd4>)
 800144a:	f003 f983 	bl	8004754 <HAL_UART_Transmit_DMA>
		}
		return 1;
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <decode_othercommands+0xc4>
	}

	return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	08006a6c 	.word	0x08006a6c
 8001460:	08006a74 	.word	0x08006a74
 8001464:	200002f0 	.word	0x200002f0
 8001468:	08006d04 	.word	0x08006d04
 800146c:	08006d14 	.word	0x08006d14
 8001470:	48000400 	.word	0x48000400
 8001474:	08006cc8 	.word	0x08006cc8
 8001478:	200005d4 	.word	0x200005d4
 800147c:	08006cd4 	.word	0x08006cd4
 8001480:	08006cec 	.word	0x08006cec

08001484 <apply_delete_character_to_buffer>:


uint16_t apply_delete_character_to_buffer(uint8_t *pData, uint16_t Size){
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
	uint16_t newSize_after_all_deletions=Size;
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	82fb      	strh	r3, [r7, #22]
	for (uint32_t i = 0; i < Size; ++i) { //apply the "delete"=='/127' characters to received buffer
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e03c      	b.n	8001514 <apply_delete_character_to_buffer+0x90>
		if(pData[i]=='\177'){		//delete found
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b7f      	cmp	r3, #127	; 0x7f
 80014a4:	d133      	bne.n	800150e <apply_delete_character_to_buffer+0x8a>
			if(i==0){				//if the delete was right at the start of the buffer
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d119      	bne.n	80014e0 <apply_delete_character_to_buffer+0x5c>
				newSize_after_all_deletions-=1;
 80014ac:	8afb      	ldrh	r3, [r7, #22]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	82fb      	strh	r3, [r7, #22]
				for (uint32_t j = i; j < Size; ++j) {
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00b      	b.n	80014d0 <apply_delete_character_to_buffer+0x4c>
					pData[j]=pData[j+1]; //just shift the entire buffer effectively deleting the 'delete' character
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3301      	adds	r3, #1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	441a      	add	r2, r3
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	440b      	add	r3, r1
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	701a      	strb	r2, [r3, #0]
				for (uint32_t j = i; j < Size; ++j) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3ef      	bcc.n	80014b8 <apply_delete_character_to_buffer+0x34>
				}
				i--;					 //recheck this index, it might have yet another 'del'
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	3b01      	subs	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	e016      	b.n	800150e <apply_delete_character_to_buffer+0x8a>
			}else{					//if the delete was NOT at the start of the buffer
				newSize_after_all_deletions-=2;
 80014e0:	8afb      	ldrh	r3, [r7, #22]
 80014e2:	3b02      	subs	r3, #2
 80014e4:	82fb      	strh	r3, [r7, #22]
				for (uint32_t j = i; j < Size; ++j) {
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	e00c      	b.n	8001506 <apply_delete_character_to_buffer+0x82>
					pData[j-1]=pData[j+1]; //shift the entire buffer effectively deleting the 'delete' character and the previous one
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3301      	adds	r3, #1
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	441a      	add	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	440b      	add	r3, r1
 80014fc:	7812      	ldrb	r2, [r2, #0]
 80014fe:	701a      	strb	r2, [r3, #0]
				for (uint32_t j = i; j < Size; ++j) {
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3301      	adds	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3ee      	bcc.n	80014ec <apply_delete_character_to_buffer+0x68>
	for (uint32_t i = 0; i < Size; ++i) { //apply the "delete"=='/127' characters to received buffer
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	3301      	adds	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d3be      	bcc.n	800149a <apply_delete_character_to_buffer+0x16>
				}
			}
		}
	}
	return newSize_after_all_deletions;
 800151c:	8afb      	ldrh	r3, [r7, #22]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <decode_char_to_hall_signals_order>:

hall_signals_order decode_char_to_hall_signals_order(uint8_t *pData){
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	hall_signals_order returning_hallx=hall_order_unknown;
 8001534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001538:	81fb      	strh	r3, [r7, #14]

	switch (*pData) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3b41      	subs	r3, #65	; 0x41
 8001540:	2b22      	cmp	r3, #34	; 0x22
 8001542:	d852      	bhi.n	80015ea <decode_char_to_hall_signals_order+0xbe>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <decode_char_to_hall_signals_order+0x20>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	080015d9 	.word	0x080015d9
 8001550:	080015df 	.word	0x080015df
 8001554:	080015e5 	.word	0x080015e5
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	080015eb 	.word	0x080015eb
 8001584:	080015eb 	.word	0x080015eb
 8001588:	080015eb 	.word	0x080015eb
 800158c:	080015eb 	.word	0x080015eb
 8001590:	080015eb 	.word	0x080015eb
 8001594:	080015eb 	.word	0x080015eb
 8001598:	080015eb 	.word	0x080015eb
 800159c:	080015eb 	.word	0x080015eb
 80015a0:	080015eb 	.word	0x080015eb
 80015a4:	080015eb 	.word	0x080015eb
 80015a8:	080015eb 	.word	0x080015eb
 80015ac:	080015eb 	.word	0x080015eb
 80015b0:	080015eb 	.word	0x080015eb
 80015b4:	080015eb 	.word	0x080015eb
 80015b8:	080015eb 	.word	0x080015eb
 80015bc:	080015eb 	.word	0x080015eb
 80015c0:	080015eb 	.word	0x080015eb
 80015c4:	080015eb 	.word	0x080015eb
 80015c8:	080015eb 	.word	0x080015eb
 80015cc:	080015d9 	.word	0x080015d9
 80015d0:	080015df 	.word	0x080015df
 80015d4:	080015e5 	.word	0x080015e5
		case 'a':
		case 'A':
			returning_hallx=hall_A;
 80015d8:	2300      	movs	r3, #0
 80015da:	81fb      	strh	r3, [r7, #14]
			break;
 80015dc:	e009      	b.n	80015f2 <decode_char_to_hall_signals_order+0xc6>
		case 'b':
		case 'B':
			returning_hallx=hall_B;
 80015de:	2301      	movs	r3, #1
 80015e0:	81fb      	strh	r3, [r7, #14]
			break;
 80015e2:	e006      	b.n	80015f2 <decode_char_to_hall_signals_order+0xc6>
		case 'c':
		case 'C':
			returning_hallx=hall_C;
 80015e4:	2302      	movs	r3, #2
 80015e6:	81fb      	strh	r3, [r7, #14]
			break;
 80015e8:	e003      	b.n	80015f2 <decode_char_to_hall_signals_order+0xc6>
		default:
			returning_hallx=hall_order_unknown;
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	81fb      	strh	r3, [r7, #14]
			break;
 80015f0:	bf00      	nop
	}

	return returning_hallx;
 80015f2:	89fb      	ldrh	r3, [r7, #14]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <decode_char_to_hall_signals_polarity>:

hall_signals_polarity decode_char_to_hall_signals_polarity(uint8_t *pData){
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	hall_signals_polarity returning_hall_polarity=hall_polarity_unknown;
 8001608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160c:	81fb      	strh	r3, [r7, #14]

	switch (*pData) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b21      	cmp	r3, #33	; 0x21
 8001614:	d102      	bne.n	800161c <decode_char_to_hall_signals_polarity+0x1c>
		case '!':
			returning_hall_polarity=hall_inverse;
 8001616:	2301      	movs	r3, #1
 8001618:	81fb      	strh	r3, [r7, #14]
			break;
 800161a:	e002      	b.n	8001622 <decode_char_to_hall_signals_polarity+0x22>
		default:
			returning_hall_polarity=hall_direct;
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
			break;
 8001620:	bf00      	nop
	}

	return returning_hall_polarity;
 8001622:	89fb      	ldrh	r3, [r7, #14]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <reset_or_start_uart_DMA_communications>:

void reset_or_start_uart_DMA_communications(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive(&hlpuart1);
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <reset_or_start_uart_DMA_communications+0x20>)
 8001636:	f003 f91f 	bl	8004878 <HAL_UART_AbortReceive>
	HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f000 f924 	bl	8001888 <HAL_Delay>
	HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, rx_buffer, sizeof (rx_buffer));	//assign the dma+uart with the reception buffer
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <reset_or_start_uart_DMA_communications+0x24>)
 8001646:	4802      	ldr	r0, [pc, #8]	; (8001650 <reset_or_start_uart_DMA_communications+0x20>)
 8001648:	f004 fd37 	bl	80060ba <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200002f0 	.word	0x200002f0
 8001654:	200004d0 	.word	0x200004d0

08001658 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
	rx_flag=1;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_UARTEx_RxEventCallback+0x28>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
	rx_size=Size;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_UARTEx_RxEventCallback+0x2c>)
 8001684:	701a      	strb	r2, [r3, #0]

}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200005d0 	.word	0x200005d0
 8001698:	200005d1 	.word	0x200005d1

0800169c <emulation>:

/**
* \brief to be placed in main() superloop, constanly on the lookout for changes in emulator_enabled.
* manages the enable/disable function logic.
*/
void emulation(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	if(emulator_enabled!=old_emulator_enabled){	//there is a change in emulator_enabled
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <emulation+0x30>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <emulation+0x34>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d00c      	beq.n	80016c6 <emulation+0x2a>
		if(emulator_enabled==0){
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <emulation+0x30>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <emulation+0x1e>
			disable_emulator();
 80016b4:	f000 f838 	bl	8001728 <disable_emulator>
 80016b8:	e001      	b.n	80016be <emulation+0x22>
		}else{
			enable_emulator();
 80016ba:	f000 f80b 	bl	80016d4 <enable_emulator>
		}
		old_emulator_enabled=emulator_enabled;	//update old_emulator_enabled
 80016be:	4b03      	ldr	r3, [pc, #12]	; (80016cc <emulation+0x30>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <emulation+0x34>)
 80016c4:	6013      	str	r3, [r2, #0]
	}
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200005d4 	.word	0x200005d4
 80016d0:	200005d8 	.word	0x200005d8

080016d4 <enable_emulator>:

/**
* \brief disables tim8 , configures DAC+DMA in circular mode, reenables tim8
*/
void enable_emulator(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af02      	add	r7, sp, #8
	    dma_index=0;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <enable_emulator+0x40>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim8);
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <enable_emulator+0x44>)
 80016e2:	f002 fb19 	bl	8003d18 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)&current_A, sizeof(current_A)/sizeof(current_A[0]), DAC_ALIGN_12B_R);
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)&current_B, sizeof(current_B)/sizeof(current_B[0]), DAC_ALIGN_12B_R);
#endif

#ifdef REAL_PHASES_A_C_calculated_B
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)&current_A, sizeof(current_A)/sizeof(current_A[0]), DAC_ALIGN_12B_R);
 80016e6:	2300      	movs	r3, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2384      	movs	r3, #132	; 0x84
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <enable_emulator+0x48>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <enable_emulator+0x4c>)
 80016f2:	f000 fa1d 	bl	8001b30 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)&current_C, sizeof(current_C)/sizeof(current_C[0]), DAC_ALIGN_12B_R);
 80016f6:	2300      	movs	r3, #0
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2384      	movs	r3, #132	; 0x84
 80016fc:	4a09      	ldr	r2, [pc, #36]	; (8001724 <enable_emulator+0x50>)
 80016fe:	2110      	movs	r1, #16
 8001700:	4807      	ldr	r0, [pc, #28]	; (8001720 <enable_emulator+0x4c>)
 8001702:	f000 fa15 	bl	8001b30 <HAL_DAC_Start_DMA>

#ifdef REAL_PHASES_B_C_calculated_A
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)&current_B, sizeof(current_B)/sizeof(current_B[0]), DAC_ALIGN_12B_R);
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)&current_C, sizeof(current_C)/sizeof(current_C[0]), DAC_ALIGN_12B_R);
#endif
		HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption (DAC+DMA trigger)
 8001706:	4804      	ldr	r0, [pc, #16]	; (8001718 <enable_emulator+0x44>)
 8001708:	f002 fa9c 	bl	8003c44 <HAL_TIM_Base_Start_IT>

}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200002a0 	.word	0x200002a0
 8001718:	200002a4 	.word	0x200002a4
 800171c:	080062b4 	.word	0x080062b4
 8001720:	200001bc 	.word	0x200001bc
 8001724:	080064c4 	.word	0x080064c4

08001728 <disable_emulator>:

/**
* \brief stops DAC+DMA in circular mode
*/
void disable_emulator(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	    HAL_TIM_Base_Stop_IT(&htim8);
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <disable_emulator+0x24>)
 800172e:	f002 faf3 	bl	8003d18 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001732:	2100      	movs	r1, #0
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <disable_emulator+0x28>)
 8001736:	f000 fac9 	bl	8001ccc <HAL_DAC_Stop_DMA>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 800173a:	2110      	movs	r1, #16
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <disable_emulator+0x28>)
 800173e:	f000 fac5 	bl	8001ccc <HAL_DAC_Stop_DMA>
		HAL_TIM_Base_Start_IT(&htim8); //start 20Khz timer with enabled interruption (DAC+DMA trigger)
 8001742:	4802      	ldr	r0, [pc, #8]	; (800174c <disable_emulator+0x24>)
 8001744:	f002 fa7e 	bl	8003c44 <HAL_TIM_Base_Start_IT>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200002a4 	.word	0x200002a4
 8001750:	200001bc 	.word	0x200001bc

08001754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001756:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x6>)
  ldr r1, =_edata
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <LoopForever+0xa>)
  ldr r2, =_sidata
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <LoopForever+0xe>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001770:	4c0b      	ldr	r4, [pc, #44]	; (80017a0 <LoopForever+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177e:	f7ff fa59 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f004 fd63 	bl	800624c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001786:	f7ff f95b 	bl	8000a40 <main>

0800178a <LoopForever>:

LoopForever:
    b LoopForever
 800178a:	e7fe      	b.n	800178a <LoopForever>
  ldr   r0, =_estack
 800178c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001798:	08006d98 	.word	0x08006d98
  ldr r2, =_sbss
 800179c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80017a0:	200005e0 	.word	0x200005e0

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>

080017a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f95b 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f80e 	bl	80017d8 <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	e001      	b.n	80017cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c8:	f7ff f9a8 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017cc:	79fb      	ldrb	r3, [r7, #7]

}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_InitTick+0x68>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_InitTick+0x6c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_InitTick+0x68>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f966 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10f      	bne.n	800182c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	d809      	bhi.n	8001826 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001812:	2200      	movs	r2, #0
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	f04f 30ff 	mov.w	r0, #4294967295
 800181a:	f000 f932 	bl	8001a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_InitTick+0x70>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e007      	b.n	8001836 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e004      	b.n	8001836 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000019c 	.word	0x2000019c
 8001844:	20000194 	.word	0x20000194
 8001848:	20000198 	.word	0x20000198

0800184c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x1c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x20>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4413      	add	r3, r2
 800185a:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_IncTick+0x1c>)
 800185c:	6013      	str	r3, [r2, #0]
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	200005dc 	.word	0x200005dc
 800186c:	2000019c 	.word	0x2000019c

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200005dc 	.word	0x200005dc

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d004      	beq.n	80018ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_Delay+0x40>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ac:	bf00      	nop
 80018ae:	f7ff ffdf 	bl	8001870 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d8f7      	bhi.n	80018ae <HAL_Delay+0x26>
  {
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000019c 	.word	0x2000019c

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff40 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff33 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa4 	bl	8001a28 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e014      	b.n	8001b26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d105      	bne.n	8001b12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fd45 	bl	800059c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	795b      	ldrb	r3, [r3, #5]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_DAC_Start_DMA+0x1e>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0ae      	b.n	8001cac <HAL_DAC_Start_DMA+0x17c>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2202      	movs	r2, #2
 8001b58:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d12f      	bne.n	8001bc0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a53      	ldr	r2, [pc, #332]	; (8001cb4 <HAL_DAC_Start_DMA+0x184>)
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_DAC_Start_DMA+0x188>)
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a51      	ldr	r2, [pc, #324]	; (8001cbc <HAL_DAC_Start_DMA+0x18c>)
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b86:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DAC_Start_DMA+0x86>
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d845      	bhi.n	8001c20 <HAL_DAC_Start_DMA+0xf0>
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_DAC_Start_DMA+0x72>
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d005      	beq.n	8001bac <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001ba0:	e03e      	b.n	8001c20 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	613b      	str	r3, [r7, #16]
        break;
 8001baa:	e03c      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	330c      	adds	r3, #12
 8001bb2:	613b      	str	r3, [r7, #16]
        break;
 8001bb4:	e037      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3310      	adds	r3, #16
 8001bbc:	613b      	str	r3, [r7, #16]
        break;
 8001bbe:	e032      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <HAL_DAC_Start_DMA+0x190>)
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a3d      	ldr	r2, [pc, #244]	; (8001cc4 <HAL_DAC_Start_DMA+0x194>)
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a3c      	ldr	r2, [pc, #240]	; (8001cc8 <HAL_DAC_Start_DMA+0x198>)
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d013      	beq.n	8001c16 <HAL_DAC_Start_DMA+0xe6>
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d817      	bhi.n	8001c24 <HAL_DAC_Start_DMA+0xf4>
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_DAC_Start_DMA+0xd2>
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d005      	beq.n	8001c0c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c00:	e010      	b.n	8001c24 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3314      	adds	r3, #20
 8001c08:	613b      	str	r3, [r7, #16]
        break;
 8001c0a:	e00c      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3318      	adds	r3, #24
 8001c12:	613b      	str	r3, [r7, #16]
        break;
 8001c14:	e007      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	331c      	adds	r3, #28
 8001c1c:	613b      	str	r3, [r7, #16]
        break;
 8001c1e:	e002      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c24:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d111      	bne.n	8001c50 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6898      	ldr	r0, [r3, #8]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	f000 fb85 	bl	8002354 <HAL_DMA_Start_IT>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
 8001c4e:	e010      	b.n	8001c72 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68d8      	ldr	r0, [r3, #12]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	f000 fb73 	bl	8002354 <HAL_DMA_Start_IT>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff fdf6 	bl	8001888 <HAL_Delay>
 8001c9c:	e005      	b.n	8001caa <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f043 0204 	orr.w	r2, r3, #4
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	080020f1 	.word	0x080020f1
 8001cb8:	08002113 	.word	0x08002113
 8001cbc:	0800212f 	.word	0x0800212f
 8001cc0:	08002199 	.word	0x08002199
 8001cc4:	080021bb 	.word	0x080021bb
 8001cc8:	080021d7 	.word	0x080021d7

08001ccc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6819      	ldr	r1, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2201      	movs	r2, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff fdb9 	bl	8001888 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fb92 	bl	800244a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e00c      	b.n	8001d52 <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fb84 	bl	800244a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001d50:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	795b      	ldrb	r3, [r3, #5]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_DAC_ConfigChannel+0x18>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e192      	b.n	80020de <HAL_DAC_ConfigChannel+0x33e>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d174      	bne.n	8001eb6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff fd50 	bl	8001870 <HAL_GetTick>
 8001dd0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d134      	bne.n	8001e42 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001dd8:	e011      	b.n	8001dfe <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001dda:	f7ff fd49 	bl	8001870 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d90a      	bls.n	8001dfe <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f043 0208 	orr.w	r2, r3, #8
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2203      	movs	r2, #3
 8001df8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e16f      	b.n	80020de <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e6      	bne.n	8001dda <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff fd3b 	bl	8001888 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e1c:	e01e      	b.n	8001e5c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e1e:	f7ff fd27 	bl	8001870 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d90a      	bls.n	8001e42 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f043 0208 	orr.w	r2, r3, #8
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e14d      	b.n	80020de <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dbe8      	blt.n	8001e1e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff fd1b 	bl	8001888 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	ea02 0103 	and.w	r1, r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	21ff      	movs	r1, #255	; 0xff
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	ea02 0103 	and.w	r1, r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d11d      	bne.n	8001efa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f12:	4013      	ands	r3, r2
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
 8001f22:	e00f      	b.n	8001f44 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d102      	bne.n	8001f32 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	e008      	b.n	8001f44 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	e001      	b.n	8001f44 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	6a3a      	ldr	r2, [r7, #32]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	4013      	ands	r3, r2
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_DAC_ConfigChannel+0x1d8>
 8001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f76:	e000      	b.n	8001f7a <HAL_DAC_ConfigChannel+0x1da>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	4013      	ands	r3, r2
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	795b      	ldrb	r3, [r3, #5]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_DAC_ConfigChannel+0x204>
 8001f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa2:	e000      	b.n	8001fa6 <HAL_DAC_ConfigChannel+0x206>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d114      	bne.n	8001fe6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001fbc:	f001 fb7c 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 8001fc0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_DAC_ConfigChannel+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d904      	bls.n	8001fd4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	e00f      	b.n	8001ff4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4a45      	ldr	r2, [pc, #276]	; (80020ec <HAL_DAC_ConfigChannel+0x34c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d90a      	bls.n	8001ff2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	e006      	b.n	8001ff4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	4313      	orrs	r3, r2
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	e000      	b.n	8001ff4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001ff2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	4313      	orrs	r3, r2
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	4013      	ands	r3, r2
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	4313      	orrs	r3, r2
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6819      	ldr	r1, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	22c0      	movs	r2, #192	; 0xc0
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43da      	mvns	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	400a      	ands	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	ea02 0103 	and.w	r1, r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3728      	adds	r7, #40	; 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	09896800 	.word	0x09896800
 80020ec:	04c4b400 	.word	0x04c4b400

080020f0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff fe2f 	bl	8001d62 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	711a      	strb	r2, [r3, #4]
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff fe28 	bl	8001d76 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fe1e 	bl	8001d8a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	711a      	strb	r2, [r3, #4]
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ffd8 	bl	800215c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	711a      	strb	r2, [r3, #4]
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff ffd1 	bl	8002170 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f043 0204 	orr.w	r2, r3, #4
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ffc7 	bl	8002184 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	711a      	strb	r2, [r3, #4]
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e08d      	b.n	8002332 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_DMA_Init+0x138>)
 800221e:	429a      	cmp	r2, r3
 8002220:	d80f      	bhi.n	8002242 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4b45      	ldr	r3, [pc, #276]	; (8002340 <HAL_DMA_Init+0x13c>)
 800222a:	4413      	add	r3, r2
 800222c:	4a45      	ldr	r2, [pc, #276]	; (8002344 <HAL_DMA_Init+0x140>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	009a      	lsls	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a42      	ldr	r2, [pc, #264]	; (8002348 <HAL_DMA_Init+0x144>)
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
 8002240:	e00e      	b.n	8002260 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_DMA_Init+0x148>)
 800224a:	4413      	add	r3, r2
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_DMA_Init+0x140>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a3c      	ldr	r2, [pc, #240]	; (8002350 <HAL_DMA_Init+0x14c>)
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fa82 	bl	80027bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c0:	d102      	bne.n	80022c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_DMA_Init+0x104>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d80c      	bhi.n	8002308 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 faa2 	bl	8002838 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e008      	b.n	800231a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40020407 	.word	0x40020407
 8002340:	bffdfff8 	.word	0xbffdfff8
 8002344:	cccccccd 	.word	0xcccccccd
 8002348:	40020000 	.word	0x40020000
 800234c:	bffdfbf8 	.word	0xbffdfbf8
 8002350:	40020400 	.word	0x40020400

08002354 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_DMA_Start_IT+0x20>
 8002370:	2302      	movs	r3, #2
 8002372:	e066      	b.n	8002442 <HAL_DMA_Start_IT+0xee>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d155      	bne.n	8002434 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f9c7 	bl	8002740 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 020e 	orr.w	r2, r2, #14
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00f      	b.n	80023ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 020a 	orr.w	r2, r2, #10
 80023ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002420:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e005      	b.n	8002440 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002440:	7dfb      	ldrb	r3, [r7, #23]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d005      	beq.n	800246e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2204      	movs	r2, #4
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e037      	b.n	80024de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 020e 	bic.w	r2, r2, #14
 800247c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f003 021f 	and.w	r2, r3, #31
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00c      	beq.n	80024de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d00d      	beq.n	8002530 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e047      	b.n	80025c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 020e 	bic.w	r2, r2, #14
 800253e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800255e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800257c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002594:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800259e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
    }
  }
  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2204      	movs	r2, #4
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d026      	beq.n	8002644 <HAL_DMA_IRQHandler+0x7a>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d021      	beq.n	8002644 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0204 	bic.w	r2, r2, #4
 800261c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2104      	movs	r1, #4
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	2b00      	cmp	r3, #0
 8002638:	d071      	beq.n	800271e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002642:	e06c      	b.n	800271e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2202      	movs	r2, #2
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02e      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d029      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10b      	bne.n	8002688 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 020a 	bic.w	r2, r2, #10
 800267e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2102      	movs	r1, #2
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d038      	beq.n	800271e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80026b4:	e033      	b.n	800271e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2208      	movs	r2, #8
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d025      	beq.n	8002720 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 020e 	bic.w	r2, r2, #14
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800271e:	bf00      	nop
 8002720:	bf00      	nop
}
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002756:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002768:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f003 021f 	and.w	r2, r3, #31
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b10      	cmp	r3, #16
 800278c:	d108      	bne.n	80027a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800279e:	e007      	b.n	80027b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d802      	bhi.n	80027d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e001      	b.n	80027da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3b08      	subs	r3, #8
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	009a      	lsls	r2, r3, #2
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2201      	movs	r2, #1
 8002810:	409a      	lsls	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40020407 	.word	0x40020407
 8002828:	40020800 	.word	0x40020800
 800282c:	40020820 	.word	0x40020820
 8002830:	cccccccd 	.word	0xcccccccd
 8002834:	40020880 	.word	0x40020880

08002838 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a08      	ldr	r2, [pc, #32]	; (800287c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800285a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3b01      	subs	r3, #1
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	1000823f 	.word	0x1000823f
 800287c:	40020940 	.word	0x40020940

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800288e:	e15a      	b.n	8002b46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 814c 	beq.w	8002b40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d005      	beq.n	80028c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0201 	and.w	r2, r3, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b03      	cmp	r3, #3
 800292c:	d017      	beq.n	800295e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d123      	bne.n	80029b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a6 	beq.w	8002b40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f4:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_GPIO_Init+0x2e4>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	4a5a      	ldr	r2, [pc, #360]	; (8002b64 <HAL_GPIO_Init+0x2e4>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002a00:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_GPIO_Init+0x2e4>)
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0c:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a36:	d01f      	beq.n	8002a78 <HAL_GPIO_Init+0x1f8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_GPIO_Init+0x2ec>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d019      	beq.n	8002a74 <HAL_GPIO_Init+0x1f4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1f0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_GPIO_Init+0x2f4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a49      	ldr	r2, [pc, #292]	; (8002b78 <HAL_GPIO_Init+0x2f8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1e8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <HAL_GPIO_Init+0x2fc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1e4>
 8002a60:	2305      	movs	r3, #5
 8002a62:	e00a      	b.n	8002a7a <HAL_GPIO_Init+0x1fa>
 8002a64:	2306      	movs	r3, #6
 8002a66:	e008      	b.n	8002a7a <HAL_GPIO_Init+0x1fa>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e006      	b.n	8002a7a <HAL_GPIO_Init+0x1fa>
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e004      	b.n	8002a7a <HAL_GPIO_Init+0x1fa>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e002      	b.n	8002a7a <HAL_GPIO_Init+0x1fa>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_GPIO_Init+0x1fa>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a8a:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002abc:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b3a:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_GPIO_Init+0x300>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f ae9d 	bne.w	8002890 <HAL_GPIO_Init+0x10>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	48000800 	.word	0x48000800
 8002b74:	48000c00 	.word	0x48000c00
 8002b78:	48001000 	.word	0x48001000
 8002b7c:	48001400 	.word	0x48001400
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d141      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d131      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c06:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c10:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c18:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c20:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2232      	movs	r2, #50	; 0x32
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	4a3f      	ldr	r2, [pc, #252]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	0c9b      	lsrs	r3, r3, #18
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c36:	e002      	b.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4a:	d102      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f2      	bne.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c52:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d158      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e057      	b.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c74:	e04d      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7c:	d141      	bne.n	8002d02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7e:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d131      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c92:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2232      	movs	r2, #50	; 0x32
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc2:	e002      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d102      	bne.n	8002cde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f2      	bne.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d112      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e011      	b.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d00:	e007      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40007000 	.word	0x40007000
 8002d24:	20000194 	.word	0x20000194
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40007000 	.word	0x40007000

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e306      	b.n	800336c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d075      	beq.n	8002e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6a:	4b97      	ldr	r3, [pc, #604]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d74:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3e>
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_OscConfig+0x44>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d10b      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	4b8d      	ldr	r3, [pc, #564]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x108>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d157      	bne.n	8002e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e2e1      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x74>
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a84      	ldr	r2, [pc, #528]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xb0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x98>
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7e      	ldr	r2, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7b      	ldr	r2, [pc, #492]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xb0>
 8002de4:	4b78      	ldr	r3, [pc, #480]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a77      	ldr	r2, [pc, #476]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b75      	ldr	r3, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a74      	ldr	r2, [pc, #464]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fd34 	bl	8001870 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fd30 	bl	8001870 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e2a6      	b.n	800336c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xc0>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fd20 	bl	8001870 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fd1c 	bl	8001870 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e292      	b.n	800336c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e46:	4b60      	ldr	r3, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0xe8>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d075      	beq.n	8002f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	4b59      	ldr	r3, [pc, #356]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d102      	bne.n	8002e82 <HAL_RCC_OscConfig+0x136>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_OscConfig+0x13c>
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d11f      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x154>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e265      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	4946      	ldr	r1, [pc, #280]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <HAL_RCC_OscConfig+0x280>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fc8d 	bl	80017d8 <HAL_InitTick>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d043      	beq.n	8002f4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e251      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a3c      	ldr	r2, [pc, #240]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fcc8 	bl	8001870 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fcc4 	bl	8001870 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e23a      	b.n	800336c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	061b      	lsls	r3, r3, #24
 8002f10:	492d      	ldr	r1, [pc, #180]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
 8002f16:	e01a      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fca4 	bl	8001870 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fca0 	bl	8001870 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e216      	b.n	800336c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3e:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1e0>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d041      	beq.n	8002fde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe fc7d 	bl	8001870 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7fe fc79 	bl	8001870 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1ef      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ef      	beq.n	8002f7a <HAL_RCC_OscConfig+0x22e>
 8002f9a:	e020      	b.n	8002fde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x27c>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fc60 	bl	8001870 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fc5c 	bl	8001870 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d906      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1d2      	b.n	800336c <HAL_RCC_OscConfig+0x620>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	20000198 	.word	0x20000198
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ea      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80a6 	beq.w	8003138 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ff0:	4b84      	ldr	r3, [pc, #528]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x2b4>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x2b6>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b7f      	ldr	r3, [pc, #508]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	4a7e      	ldr	r2, [pc, #504]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
 8003012:	4b7c      	ldr	r3, [pc, #496]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b79      	ldr	r3, [pc, #484]	; (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fc19 	bl	8001870 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe fc15 	bl	8001870 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e18b      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003054:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x4bc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <HAL_RCC_OscConfig+0x32e>
 8003068:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a65      	ldr	r2, [pc, #404]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003078:	e024      	b.n	80030c4 <HAL_RCC_OscConfig+0x378>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b05      	cmp	r3, #5
 8003080:	d110      	bne.n	80030a4 <HAL_RCC_OscConfig+0x358>
 8003082:	4b60      	ldr	r3, [pc, #384]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	4a5a      	ldr	r2, [pc, #360]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a2:	e00f      	b.n	80030c4 <HAL_RCC_OscConfig+0x378>
 80030a4:	4b57      	ldr	r3, [pc, #348]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	4a56      	ldr	r2, [pc, #344]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d016      	beq.n	80030fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe fbd0 	bl	8001870 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe fbcc 	bl	8001870 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e140      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ea:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ed      	beq.n	80030d4 <HAL_RCC_OscConfig+0x388>
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe fbb9 	bl	8001870 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fbb5 	bl	8001870 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e129      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003118:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ed      	bne.n	8003102 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	4a34      	ldr	r2, [pc, #208]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d03c      	beq.n	80031be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01c      	beq.n	8003186 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003152:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fb88 	bl	8001870 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003164:	f7fe fb84 	bl	8001870 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0fa      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <HAL_RCC_OscConfig+0x418>
 8003184:	e01b      	b.n	80031be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 8003188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fe fb6b 	bl	8001870 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319e:	f7fe fb67 	bl	8001870 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0dd      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ef      	bne.n	800319e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80d1 	beq.w	800336a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	f000 808b 	beq.w	80032ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d15e      	bne.n	800329c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe fb41 	bl	8001870 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	e00c      	b.n	800320c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fb3d 	bl	8001870 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d905      	bls.n	800320c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0b3      	b.n	800336c <HAL_RCC_OscConfig+0x620>
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ec      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003218:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4b56      	ldr	r3, [pc, #344]	; (8003378 <HAL_RCC_OscConfig+0x62c>)
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6a11      	ldr	r1, [r2, #32]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003228:	3a01      	subs	r2, #1
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003232:	0212      	lsls	r2, r2, #8
 8003234:	4311      	orrs	r1, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	3a01      	subs	r2, #1
 800323e:	0552      	lsls	r2, r2, #21
 8003240:	4311      	orrs	r1, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0652      	lsls	r2, r2, #25
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003252:	06d2      	lsls	r2, r2, #27
 8003254:	430a      	orrs	r2, r1
 8003256:	4947      	ldr	r1, [pc, #284]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 8003258:	4313      	orrs	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b45      	ldr	r3, [pc, #276]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a44      	ldr	r2, [pc, #272]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003268:	4b42      	ldr	r3, [pc, #264]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a41      	ldr	r2, [pc, #260]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe fafc 	bl	8001870 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe faf8 	bl	8001870 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e06e      	b.n	800336c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x530>
 800329a:	e066      	b.n	800336a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a34      	ldr	r2, [pc, #208]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a31      	ldr	r2, [pc, #196]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a2e      	ldr	r2, [pc, #184]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fad4 	bl	8001870 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe fad0 	bl	8001870 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e046      	b.n	800336c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x580>
 80032ea:	e03e      	b.n	800336a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e039      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80032f8:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_RCC_OscConfig+0x628>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	429a      	cmp	r2, r3
 800330a:	d12c      	bne.n	8003366 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	3b01      	subs	r3, #1
 8003318:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d123      	bne.n	8003366 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d11b      	bne.n	8003366 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d113      	bne.n	8003366 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d109      	bne.n	8003366 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	019f800c 	.word	0x019f800c

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e11e      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b91      	ldr	r3, [pc, #580]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b8e      	ldr	r3, [pc, #568]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 020f 	bic.w	r2, r3, #15
 80033aa:	498c      	ldr	r1, [pc, #560]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b8a      	ldr	r3, [pc, #552]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e106      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d073      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d129      	bne.n	800342c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0f4      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033e8:	f000 f99e 	bl	8003728 <RCC_GetSysClockFreqFromPLLSource>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4a7c      	ldr	r2, [pc, #496]	; (80035e4 <HAL_RCC_ClockConfig+0x268>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d93f      	bls.n	8003476 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033f6:	4b7a      	ldr	r3, [pc, #488]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	d033      	beq.n	8003476 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12f      	bne.n	8003476 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e024      	b.n	8003476 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d107      	bne.n	8003444 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0c6      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0be      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003454:	f000 f8ce 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 8003458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4a61      	ldr	r2, [pc, #388]	; (80035e4 <HAL_RCC_ClockConfig+0x268>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d909      	bls.n	8003476 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346a:	4a5d      	ldr	r2, [pc, #372]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 800346c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003470:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4957      	ldr	r1, [pc, #348]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003488:	f7fe f9f2 	bl	8001870 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fe f9ee 	bl	8001870 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e095      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b4e      	ldr	r3, [pc, #312]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d023      	beq.n	800350c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80034e8:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034f0:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4936      	ldr	r1, [pc, #216]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
 800350a:	e008      	b.n	800351e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d105      	bne.n	800351e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4a32      	ldr	r2, [pc, #200]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351e:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d21d      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 020f 	bic.w	r2, r3, #15
 8003534:	4929      	ldr	r1, [pc, #164]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800353c:	f7fe f998 	bl	8001870 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fe f994 	bl	8001870 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e03b      	b.n	80035d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_RCC_ClockConfig+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d1ed      	bne.n	8003544 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4917      	ldr	r1, [pc, #92]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490f      	ldr	r1, [pc, #60]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a6:	f000 f825 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490c      	ldr	r1, [pc, #48]	; (80035e8 <HAL_RCC_ClockConfig+0x26c>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x270>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_ClockConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f904 	bl	80017d8 <HAL_InitTick>
 80035d0:	4603      	mov	r3, r0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40021000 	.word	0x40021000
 80035e4:	04c4b400 	.word	0x04c4b400
 80035e8:	080066d4 	.word	0x080066d4
 80035ec:	20000194 	.word	0x20000194
 80035f0:	20000198 	.word	0x20000198

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b04      	cmp	r3, #4
 8003604:	d102      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	e047      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d102      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	e03e      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800361e:	4b23      	ldr	r3, [pc, #140]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d136      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3301      	adds	r3, #1
 8003640:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003648:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003652:	68d2      	ldr	r2, [r2, #12]
 8003654:	0a12      	lsrs	r2, r2, #8
 8003656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
      break;
 8003660:	e00c      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	0a12      	lsrs	r2, r2, #8
 8003670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
      break;
 800367a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0e5b      	lsrs	r3, r3, #25
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e001      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800369c:	693b      	ldr	r3, [r7, #16]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	016e3600 	.word	0x016e3600

080036b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000194 	.word	0x20000194

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036d4:	f7ff fff0 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4904      	ldr	r1, [pc, #16]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	080066e4 	.word	0x080066e4

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003700:	f7ff ffda 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0adb      	lsrs	r3, r3, #11
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	080066e4 	.word	0x080066e4

08003728 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3301      	adds	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d10c      	bne.n	8003766 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003756:	68d2      	ldr	r2, [r2, #12]
 8003758:	0a12      	lsrs	r2, r2, #8
 800375a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	617b      	str	r3, [r7, #20]
    break;
 8003764:	e00c      	b.n	8003780 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	0a12      	lsrs	r2, r2, #8
 8003774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    break;
 800377e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0e5b      	lsrs	r3, r3, #25
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	3301      	adds	r3, #1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800379a:	687b      	ldr	r3, [r7, #4]
}
 800379c:	4618      	mov	r0, r3
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40021000 	.word	0x40021000
 80037ac:	016e3600 	.word	0x016e3600
 80037b0:	00f42400 	.word	0x00f42400

080037b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037bc:	2300      	movs	r3, #0
 80037be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c0:	2300      	movs	r3, #0
 80037c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8098 	beq.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	4b40      	ldr	r3, [pc, #256]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	4a3f      	ldr	r2, [pc, #252]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6593      	str	r3, [r2, #88]	; 0x58
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a39      	ldr	r2, [pc, #228]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800380a:	f7fe f831 	bl	8001870 <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003810:	e009      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe f82d 	bl	8001870 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d902      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	74fb      	strb	r3, [r7, #19]
        break;
 8003824:	e005      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ef      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d159      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01e      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	d019      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003860:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003880:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fd ffed 	bl	8001870 <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003898:	e00b      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fd ffe9 	bl	8001870 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d902      	bls.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	74fb      	strb	r3, [r7, #19]
            break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ec      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038dc:	e008      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	74bb      	strb	r3, [r7, #18]
 80038e2:	e005      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f0:	7c7b      	ldrb	r3, [r7, #17]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4ba6      	ldr	r3, [pc, #664]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	4aa5      	ldr	r2, [pc, #660]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800390e:	4ba0      	ldr	r3, [pc, #640]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 0203 	bic.w	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	499c      	ldr	r1, [pc, #624]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003930:	4b97      	ldr	r3, [pc, #604]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 020c 	bic.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	4994      	ldr	r1, [pc, #592]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003952:	4b8f      	ldr	r3, [pc, #572]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	498b      	ldr	r1, [pc, #556]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003974:	4b86      	ldr	r3, [pc, #536]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	4983      	ldr	r1, [pc, #524]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003996:	4b7e      	ldr	r3, [pc, #504]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	497a      	ldr	r1, [pc, #488]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b8:	4b75      	ldr	r3, [pc, #468]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	4972      	ldr	r1, [pc, #456]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039da:	4b6d      	ldr	r3, [pc, #436]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4969      	ldr	r1, [pc, #420]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039fc:	4b64      	ldr	r3, [pc, #400]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4961      	ldr	r1, [pc, #388]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	4958      	ldr	r1, [pc, #352]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	4950      	ldr	r1, [pc, #320]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a78:	4b45      	ldr	r3, [pc, #276]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	4942      	ldr	r1, [pc, #264]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a3c      	ldr	r2, [pc, #240]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab0:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a2e      	ldr	r2, [pc, #184]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ada:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae8:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	4926      	ldr	r1, [pc, #152]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b06:	d105      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d015      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	4918      	ldr	r1, [pc, #96]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e049      	b.n	8003c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd f89e 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fb7a 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e04a      	b.n	8003cf2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d013      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d115      	bne.n	8003cdc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d015      	beq.n	8003cee <HAL_TIM_Base_Start_IT+0xaa>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d011      	beq.n	8003cee <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cda:	e008      	b.n	8003cee <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e000      	b.n	8003cf0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	00010007 	.word	0x00010007

08003d18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <HAL_TIM_Base_Stop_IT+0x48>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	f244 4344 	movw	r3, #17476	; 0x4444
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_Base_Stop_IT+0x48>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d122      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d11b      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0202 	mvn.w	r2, #2
 8003da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fa69 	bl	8004290 <HAL_TIM_IC_CaptureCallback>
 8003dbe:	e005      	b.n	8003dcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fa5b 	bl	800427c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa6c 	bl	80042a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d122      	bne.n	8003e26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d11b      	bne.n	8003e26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f06f 0204 	mvn.w	r2, #4
 8003df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa3f 	bl	8004290 <HAL_TIM_IC_CaptureCallback>
 8003e12:	e005      	b.n	8003e20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fa31 	bl	800427c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa42 	bl	80042a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d122      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d11b      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f06f 0208 	mvn.w	r2, #8
 8003e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa15 	bl	8004290 <HAL_TIM_IC_CaptureCallback>
 8003e66:	e005      	b.n	8003e74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fa07 	bl	800427c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa18 	bl	80042a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d122      	bne.n	8003ece <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d11b      	bne.n	8003ece <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0210 	mvn.w	r2, #16
 8003e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9eb 	bl	8004290 <HAL_TIM_IC_CaptureCallback>
 8003eba:	e005      	b.n	8003ec8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f9dd 	bl	800427c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f9ee 	bl	80042a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10e      	bne.n	8003efa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0201 	mvn.w	r2, #1
 8003ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f9b7 	bl	8004268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d10e      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fb8b 	bl	800463c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fb7e 	bl	8004650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f99c 	bl	80042b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0220 	mvn.w	r2, #32
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fb3e 	bl	8004628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fba:	d10f      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fb44 	bl	8004664 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fea:	d10f      	bne.n	800400c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fb36 	bl	8004678 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401a:	d10f      	bne.n	800403c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fb28 	bl	800468c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800404a:	d10f      	bne.n	800406c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800405a:	d107      	bne.n	800406c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fb1a 	bl	80046a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIM_ConfigClockSource+0x1c>
 800408c:	2302      	movs	r3, #2
 800408e:	e0de      	b.n	800424e <HAL_TIM_ConfigClockSource+0x1da>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80040ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_TIM_ConfigClockSource+0x1e4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	f000 80a9 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 80040d0:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_TIM_ConfigClockSource+0x1e4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	f200 80ae 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 80040d8:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_TIM_ConfigClockSource+0x1e8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	f000 80a1 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 80040e0:	4a5e      	ldr	r2, [pc, #376]	; (800425c <HAL_TIM_ConfigClockSource+0x1e8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	f200 80a6 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 80040e8:	4a5d      	ldr	r2, [pc, #372]	; (8004260 <HAL_TIM_ConfigClockSource+0x1ec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f000 8099 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 80040f0:	4a5b      	ldr	r2, [pc, #364]	; (8004260 <HAL_TIM_ConfigClockSource+0x1ec>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	f200 809e 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 80040f8:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <HAL_TIM_ConfigClockSource+0x1f0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	f000 8091 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f200 8096 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004108:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800410c:	f000 8089 	beq.w	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 8004110:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004114:	f200 808e 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d03e      	beq.n	800419c <HAL_TIM_ConfigClockSource+0x128>
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004122:	f200 8087 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	f000 8086 	beq.w	800423a <HAL_TIM_ConfigClockSource+0x1c6>
 800412e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004132:	d87f      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004134:	2b70      	cmp	r3, #112	; 0x70
 8004136:	d01a      	beq.n	800416e <HAL_TIM_ConfigClockSource+0xfa>
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d87b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d050      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
 8004140:	2b60      	cmp	r3, #96	; 0x60
 8004142:	d877      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004144:	2b50      	cmp	r3, #80	; 0x50
 8004146:	d03c      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x14e>
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d873      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d058      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x18e>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d86f      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d064      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d86b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d060      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d867      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 8004168:	2b10      	cmp	r3, #16
 800416a:	d05a      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x1ae>
 800416c:	e062      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f000 f9b1 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	609a      	str	r2, [r3, #8]
      break;
 800419a:	e04f      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f000 f99a 	bl	80044e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041be:	609a      	str	r2, [r3, #8]
      break;
 80041c0:	e03c      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 f90c 	bl	80043ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2150      	movs	r1, #80	; 0x50
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f965 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 80041e0:	e02c      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 f92b 	bl	800444a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2160      	movs	r1, #96	; 0x60
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f955 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8004200:	e01c      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	461a      	mov	r2, r3
 8004210:	f000 f8ec 	bl	80043ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f945 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8004220:	e00c      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f000 f93c 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8004232:	e003      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      break;
 8004238:	e000      	b.n	800423c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800423a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	00100070 	.word	0x00100070
 800425c:	00100040 	.word	0x00100040
 8004260:	00100030 	.word	0x00100030
 8004264:	00100020 	.word	0x00100020

08004268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3c      	ldr	r2, [pc, #240]	; (80043d0 <TIM_Base_SetConfig+0x104>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <TIM_Base_SetConfig+0x108>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <TIM_Base_SetConfig+0x10c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <TIM_Base_SetConfig+0x110>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <TIM_Base_SetConfig+0x104>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01b      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d017      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <TIM_Base_SetConfig+0x108>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a29      	ldr	r2, [pc, #164]	; (80043d8 <TIM_Base_SetConfig+0x10c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a28      	ldr	r2, [pc, #160]	; (80043dc <TIM_Base_SetConfig+0x110>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <TIM_Base_SetConfig+0x118>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <TIM_Base_SetConfig+0x11c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <TIM_Base_SetConfig+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a11      	ldr	r2, [pc, #68]	; (80043dc <TIM_Base_SetConfig+0x110>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <TIM_Base_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <TIM_Base_SetConfig+0x118>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <TIM_Base_SetConfig+0x11c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d103      	bne.n	80043bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	615a      	str	r2, [r3, #20]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40013400 	.word	0x40013400
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800

080043ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 0201 	bic.w	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f023 030a 	bic.w	r3, r3, #10
 8004428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444a:	b480      	push	{r7}
 800444c:	b087      	sub	sp, #28
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0210 	bic.w	r2, r3, #16
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	031b      	lsls	r3, r3, #12
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f043 0307 	orr.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	609a      	str	r2, [r3, #8]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	431a      	orrs	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004538:	2302      	movs	r3, #2
 800453a:	e065      	b.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d013      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a13      	ldr	r2, [pc, #76]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10c      	bne.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40013400 	.word	0x40013400
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40014000 	.word	0x40014000

08004628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e042      	b.n	800474c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fc fbcb 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2224      	movs	r2, #36	; 0x24
 80046e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fcb0 	bl	800505c <UART_SetConfig>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e022      	b.n	800474c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ff70 	bl	80055f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fff7 	bl	8005738 <UART_CheckIdleState>
 800474a:	4603      	mov	r3, r0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	2b20      	cmp	r3, #32
 800476a:	d17a      	bne.n	8004862 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Transmit_DMA+0x24>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e073      	b.n	8004864 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_UART_Transmit_DMA+0x36>
 8004786:	2302      	movs	r3, #2
 8004788:	e06c      	b.n	8004864 <HAL_UART_Transmit_DMA+0x110>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2221      	movs	r2, #33	; 0x21
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02c      	beq.n	800481a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c4:	4a29      	ldr	r2, [pc, #164]	; (800486c <HAL_UART_Transmit_DMA+0x118>)
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047cc:	4a28      	ldr	r2, [pc, #160]	; (8004870 <HAL_UART_Transmit_DMA+0x11c>)
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <HAL_UART_Transmit_DMA+0x120>)
 80047d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047dc:	2200      	movs	r2, #0
 80047de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	4619      	mov	r1, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3328      	adds	r3, #40	; 0x28
 80047f0:	461a      	mov	r2, r3
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	f7fd fdae 	bl	8002354 <HAL_DMA_Start_IT>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2210      	movs	r2, #16
 8004802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e024      	b.n	8004864 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	613b      	str	r3, [r7, #16]
   return(result);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	623a      	str	r2, [r7, #32]
 800484c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	69f9      	ldr	r1, [r7, #28]
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	61bb      	str	r3, [r7, #24]
   return(result);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e5      	bne.n	800482a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	08005bff 	.word	0x08005bff
 8004870:	08005c99 	.word	0x08005c99
 8004874:	08005e13 	.word	0x08005e13

08004878 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b09a      	sub	sp, #104	; 0x68
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800488e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004894:	667b      	str	r3, [r7, #100]	; 0x64
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489e:	657b      	str	r3, [r7, #84]	; 0x54
 80048a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	663b      	str	r3, [r7, #96]	; 0x60
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048d6:	643a      	str	r2, [r7, #64]	; 0x40
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e3      	bne.n	80048b2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d118      	bne.n	8004924 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f023 0310 	bic.w	r3, r3, #16
 8004906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004912:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e6      	bne.n	80048f2 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	d137      	bne.n	80049a2 <HAL_UART_AbortReceive+0x12a>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3308      	adds	r3, #8
 8004938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	60bb      	str	r3, [r7, #8]
   return(result);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004948:	65bb      	str	r3, [r7, #88]	; 0x58
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004952:	61ba      	str	r2, [r7, #24]
 8004954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d019      	beq.n	80049a2 <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004972:	2200      	movs	r2, #0
 8004974:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fd65 	bl	800244a <HAL_DMA_Abort>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd fecc 	bl	8002728 <HAL_DMA_GetError>
 8004990:	4603      	mov	r3, r0
 8004992:	2b20      	cmp	r3, #32
 8004994:	d105      	bne.n	80049a2 <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2210      	movs	r2, #16
 800499a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e017      	b.n	80049d2 <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	220f      	movs	r2, #15
 80049b0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0208 	orr.w	r2, r2, #8
 80049c0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3768      	adds	r7, #104	; 0x68
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b0ba      	sub	sp, #232	; 0xe8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a06:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11b      	bne.n	8004a50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d015      	beq.n	8004a50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 82d6 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
      }
      return;
 8004a4e:	e2d0      	b.n	8004ff2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 811f 	beq.w	8004c98 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_UART_IRQHandler+0x2b0>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a6a:	4b89      	ldr	r3, [pc, #548]	; (8004c90 <HAL_UART_IRQHandler+0x2b4>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8112 	beq.w	8004c98 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d011      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xc8>
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d011      	beq.n	8004ad4 <HAL_UART_IRQHandler+0xf8>
 8004ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aca:	f043 0204 	orr.w	r2, r3, #4
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <HAL_UART_IRQHandler+0x128>
 8004ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2204      	movs	r2, #4
 8004af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afa:	f043 0202 	orr.w	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b20:	4b5a      	ldr	r3, [pc, #360]	; (8004c8c <HAL_UART_IRQHandler+0x2b0>)
 8004b22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b36:	f043 0208 	orr.w	r2, r3, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <HAL_UART_IRQHandler+0x196>
 8004b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00c      	beq.n	8004b72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b68:	f043 0220 	orr.w	r2, r3, #32
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 823c 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d013      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d005      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04f      	beq.n	8004c76 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 ffab 	bl	8005b32 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d141      	bne.n	8004c6e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1d9      	bne.n	8004bea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_UART_IRQHandler+0x2b8>)
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fd fc56 	bl	80024fc <HAL_DMA_Abort_IT>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	e00f      	b.n	8004c86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f9ee 	bl	8005048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	e00b      	b.n	8004c86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9ea 	bl	8005048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e007      	b.n	8004c86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9e6 	bl	8005048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c84:	e1b7      	b.n	8004ff6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c86:	bf00      	nop
    return;
 8004c88:	e1b5      	b.n	8004ff6 <HAL_UART_IRQHandler+0x61a>
 8004c8a:	bf00      	nop
 8004c8c:	10000001 	.word	0x10000001
 8004c90:	04000120 	.word	0x04000120
 8004c94:	08005e93 	.word	0x08005e93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	f040 814a 	bne.w	8004f36 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8143 	beq.w	8004f36 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 813c 	beq.w	8004f36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	f040 80b5 	bne.w	8004e40 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8187 	beq.w	8004ffa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	f080 817f 	bcs.w	8004ffa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 8086 	bne.w	8004e24 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1da      	bne.n	8004d18 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e1      	bne.n	8004d62 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df4:	f023 0310 	bic.w	r3, r3, #16
 8004df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e4      	bne.n	8004de4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fb13 	bl	800244a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fc fc17 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e3e:	e0dc      	b.n	8004ffa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80ce 	beq.w	8004ffe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004e62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80c9 	beq.w	8004ffe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e4      	bne.n	8004e6c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eca:	633a      	str	r2, [r7, #48]	; 0x30
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e1      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0310 	bic.w	r3, r3, #16
 8004f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	69b9      	ldr	r1, [r7, #24]
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	617b      	str	r3, [r7, #20]
   return(result);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e4      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc fb9c 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f34:	e063      	b.n	8004ffe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00e      	beq.n	8004f60 <HAL_UART_IRQHandler+0x584>
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 ffdb 	bl	8005f14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f5e:	e051      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d014      	beq.n	8004f96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d03a      	beq.n	8005002 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
    }
    return;
 8004f94:	e035      	b.n	8005002 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x5da>
 8004fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 ff85 	bl	8005ebe <UART_EndTransmit_IT>
    return;
 8004fb4:	e026      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x5fa>
 8004fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 ffb4 	bl	8005f3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fd4:	e016      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d010      	beq.n	8005004 <HAL_UART_IRQHandler+0x628>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da0c      	bge.n	8005004 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 ff9c 	bl	8005f28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ff0:	e008      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
      return;
 8004ff2:	bf00      	nop
 8004ff4:	e006      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
    return;
 8004ff6:	bf00      	nop
 8004ff8:	e004      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
      return;
 8004ffa:	bf00      	nop
 8004ffc:	e002      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
      return;
 8004ffe:	bf00      	nop
 8005000:	e000      	b.n	8005004 <HAL_UART_IRQHandler+0x628>
    return;
 8005002:	bf00      	nop
  }
}
 8005004:	37e8      	adds	r7, #232	; 0xe8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop

0800500c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b08c      	sub	sp, #48	; 0x30
 8005062:	af00      	add	r7, sp, #0
 8005064:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	431a      	orrs	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	431a      	orrs	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4313      	orrs	r3, r2
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4bab      	ldr	r3, [pc, #684]	; (8005338 <UART_SetConfig+0x2dc>)
 800508c:	4013      	ands	r3, r2
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005094:	430b      	orrs	r3, r1
 8005096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4aa0      	ldr	r2, [pc, #640]	; (800533c <UART_SetConfig+0x2e0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c4:	4313      	orrs	r3, r2
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050dc:	430b      	orrs	r3, r1
 80050de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f023 010f 	bic.w	r1, r3, #15
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a91      	ldr	r2, [pc, #580]	; (8005340 <UART_SetConfig+0x2e4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d125      	bne.n	800514c <UART_SetConfig+0xf0>
 8005100:	4b90      	ldr	r3, [pc, #576]	; (8005344 <UART_SetConfig+0x2e8>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b03      	cmp	r3, #3
 800510c:	d81a      	bhi.n	8005144 <UART_SetConfig+0xe8>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0xb8>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005125 	.word	0x08005125
 8005118:	08005135 	.word	0x08005135
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800513d 	.word	0x0800513d
 8005124:	2301      	movs	r3, #1
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512a:	e0d6      	b.n	80052da <UART_SetConfig+0x27e>
 800512c:	2302      	movs	r3, #2
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005132:	e0d2      	b.n	80052da <UART_SetConfig+0x27e>
 8005134:	2304      	movs	r3, #4
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513a:	e0ce      	b.n	80052da <UART_SetConfig+0x27e>
 800513c:	2308      	movs	r3, #8
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005142:	e0ca      	b.n	80052da <UART_SetConfig+0x27e>
 8005144:	2310      	movs	r3, #16
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514a:	e0c6      	b.n	80052da <UART_SetConfig+0x27e>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a7d      	ldr	r2, [pc, #500]	; (8005348 <UART_SetConfig+0x2ec>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d138      	bne.n	80051c8 <UART_SetConfig+0x16c>
 8005156:	4b7b      	ldr	r3, [pc, #492]	; (8005344 <UART_SetConfig+0x2e8>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d82d      	bhi.n	80051c0 <UART_SetConfig+0x164>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x110>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051c1 	.word	0x080051c1
 8005174:	080051c1 	.word	0x080051c1
 8005178:	080051c1 	.word	0x080051c1
 800517c:	080051b1 	.word	0x080051b1
 8005180:	080051c1 	.word	0x080051c1
 8005184:	080051c1 	.word	0x080051c1
 8005188:	080051c1 	.word	0x080051c1
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051c1 	.word	0x080051c1
 8005194:	080051c1 	.word	0x080051c1
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e098      	b.n	80052da <UART_SetConfig+0x27e>
 80051a8:	2302      	movs	r3, #2
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e094      	b.n	80052da <UART_SetConfig+0x27e>
 80051b0:	2304      	movs	r3, #4
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e090      	b.n	80052da <UART_SetConfig+0x27e>
 80051b8:	2308      	movs	r3, #8
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051be:	e08c      	b.n	80052da <UART_SetConfig+0x27e>
 80051c0:	2310      	movs	r3, #16
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c6:	e088      	b.n	80052da <UART_SetConfig+0x27e>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a5f      	ldr	r2, [pc, #380]	; (800534c <UART_SetConfig+0x2f0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d125      	bne.n	800521e <UART_SetConfig+0x1c2>
 80051d2:	4b5c      	ldr	r3, [pc, #368]	; (8005344 <UART_SetConfig+0x2e8>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051dc:	2b30      	cmp	r3, #48	; 0x30
 80051de:	d016      	beq.n	800520e <UART_SetConfig+0x1b2>
 80051e0:	2b30      	cmp	r3, #48	; 0x30
 80051e2:	d818      	bhi.n	8005216 <UART_SetConfig+0x1ba>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d00a      	beq.n	80051fe <UART_SetConfig+0x1a2>
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d814      	bhi.n	8005216 <UART_SetConfig+0x1ba>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <UART_SetConfig+0x19a>
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d008      	beq.n	8005206 <UART_SetConfig+0x1aa>
 80051f4:	e00f      	b.n	8005216 <UART_SetConfig+0x1ba>
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fc:	e06d      	b.n	80052da <UART_SetConfig+0x27e>
 80051fe:	2302      	movs	r3, #2
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005204:	e069      	b.n	80052da <UART_SetConfig+0x27e>
 8005206:	2304      	movs	r3, #4
 8005208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520c:	e065      	b.n	80052da <UART_SetConfig+0x27e>
 800520e:	2308      	movs	r3, #8
 8005210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005214:	e061      	b.n	80052da <UART_SetConfig+0x27e>
 8005216:	2310      	movs	r3, #16
 8005218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521c:	e05d      	b.n	80052da <UART_SetConfig+0x27e>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a4b      	ldr	r2, [pc, #300]	; (8005350 <UART_SetConfig+0x2f4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d125      	bne.n	8005274 <UART_SetConfig+0x218>
 8005228:	4b46      	ldr	r3, [pc, #280]	; (8005344 <UART_SetConfig+0x2e8>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005232:	2bc0      	cmp	r3, #192	; 0xc0
 8005234:	d016      	beq.n	8005264 <UART_SetConfig+0x208>
 8005236:	2bc0      	cmp	r3, #192	; 0xc0
 8005238:	d818      	bhi.n	800526c <UART_SetConfig+0x210>
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d00a      	beq.n	8005254 <UART_SetConfig+0x1f8>
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d814      	bhi.n	800526c <UART_SetConfig+0x210>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <UART_SetConfig+0x1f0>
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d008      	beq.n	800525c <UART_SetConfig+0x200>
 800524a:	e00f      	b.n	800526c <UART_SetConfig+0x210>
 800524c:	2300      	movs	r3, #0
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005252:	e042      	b.n	80052da <UART_SetConfig+0x27e>
 8005254:	2302      	movs	r3, #2
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525a:	e03e      	b.n	80052da <UART_SetConfig+0x27e>
 800525c:	2304      	movs	r3, #4
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005262:	e03a      	b.n	80052da <UART_SetConfig+0x27e>
 8005264:	2308      	movs	r3, #8
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526a:	e036      	b.n	80052da <UART_SetConfig+0x27e>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005272:	e032      	b.n	80052da <UART_SetConfig+0x27e>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	; (800533c <UART_SetConfig+0x2e0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d12a      	bne.n	80052d4 <UART_SetConfig+0x278>
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <UART_SetConfig+0x2e8>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800528c:	d01a      	beq.n	80052c4 <UART_SetConfig+0x268>
 800528e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005292:	d81b      	bhi.n	80052cc <UART_SetConfig+0x270>
 8005294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005298:	d00c      	beq.n	80052b4 <UART_SetConfig+0x258>
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529e:	d815      	bhi.n	80052cc <UART_SetConfig+0x270>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <UART_SetConfig+0x250>
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a8:	d008      	beq.n	80052bc <UART_SetConfig+0x260>
 80052aa:	e00f      	b.n	80052cc <UART_SetConfig+0x270>
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b2:	e012      	b.n	80052da <UART_SetConfig+0x27e>
 80052b4:	2302      	movs	r3, #2
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ba:	e00e      	b.n	80052da <UART_SetConfig+0x27e>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c2:	e00a      	b.n	80052da <UART_SetConfig+0x27e>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ca:	e006      	b.n	80052da <UART_SetConfig+0x27e>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d2:	e002      	b.n	80052da <UART_SetConfig+0x27e>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a17      	ldr	r2, [pc, #92]	; (800533c <UART_SetConfig+0x2e0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	f040 80a8 	bne.w	8005436 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d834      	bhi.n	8005358 <UART_SetConfig+0x2fc>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <UART_SetConfig+0x298>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005359 	.word	0x08005359
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005359 	.word	0x08005359
 8005304:	08005327 	.word	0x08005327
 8005308:	08005359 	.word	0x08005359
 800530c:	08005359 	.word	0x08005359
 8005310:	08005359 	.word	0x08005359
 8005314:	0800532f 	.word	0x0800532f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005318:	f7fe f9da 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800531e:	e021      	b.n	8005364 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <UART_SetConfig+0x2f8>)
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005324:	e01e      	b.n	8005364 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005326:	f7fe f965 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 800532a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800532c:	e01a      	b.n	8005364 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005334:	e016      	b.n	8005364 <UART_SetConfig+0x308>
 8005336:	bf00      	nop
 8005338:	cfff69f3 	.word	0xcfff69f3
 800533c:	40008000 	.word	0x40008000
 8005340:	40013800 	.word	0x40013800
 8005344:	40021000 	.word	0x40021000
 8005348:	40004400 	.word	0x40004400
 800534c:	40004800 	.word	0x40004800
 8005350:	40004c00 	.word	0x40004c00
 8005354:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005362:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 812a 	beq.w	80055c0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	4a9e      	ldr	r2, [pc, #632]	; (80055ec <UART_SetConfig+0x590>)
 8005372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005376:	461a      	mov	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	fbb3 f3f2 	udiv	r3, r3, r2
 800537e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	429a      	cmp	r2, r3
 800538e:	d305      	bcc.n	800539c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	429a      	cmp	r2, r3
 800539a:	d903      	bls.n	80053a4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053a2:	e10d      	b.n	80055c0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	2200      	movs	r2, #0
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	60fa      	str	r2, [r7, #12]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	4a8e      	ldr	r2, [pc, #568]	; (80055ec <UART_SetConfig+0x590>)
 80053b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2200      	movs	r2, #0
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053c6:	f7fa ff27 	bl	8000218 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	020b      	lsls	r3, r1, #8
 80053dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053e0:	0202      	lsls	r2, r0, #8
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	6849      	ldr	r1, [r1, #4]
 80053e6:	0849      	lsrs	r1, r1, #1
 80053e8:	2000      	movs	r0, #0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4605      	mov	r5, r0
 80053ee:	eb12 0804 	adds.w	r8, r2, r4
 80053f2:	eb43 0905 	adc.w	r9, r3, r5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	469a      	mov	sl, r3
 80053fe:	4693      	mov	fp, r2
 8005400:	4652      	mov	r2, sl
 8005402:	465b      	mov	r3, fp
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fa ff06 	bl	8000218 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800541a:	d308      	bcc.n	800542e <UART_SetConfig+0x3d2>
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005422:	d204      	bcs.n	800542e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e0c8      	b.n	80055c0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005434:	e0c4      	b.n	80055c0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d167      	bne.n	8005510 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005444:	2b08      	cmp	r3, #8
 8005446:	d828      	bhi.n	800549a <UART_SetConfig+0x43e>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x3f4>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549b 	.word	0x0800549b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800549b 	.word	0x0800549b
 8005468:	0800549b 	.word	0x0800549b
 800546c:	0800549b 	.word	0x0800549b
 8005470:	08005493 	.word	0x08005493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fe f92c 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800547a:	e014      	b.n	80054a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800547c:	f7fe f93e 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8005480:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005482:	e010      	b.n	80054a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005484:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <UART_SetConfig+0x594>)
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005488:	e00d      	b.n	80054a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fe f8b3 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005498:	e005      	b.n	80054a6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8089 	beq.w	80055c0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	4a4e      	ldr	r2, [pc, #312]	; (80055ec <UART_SetConfig+0x590>)
 80054b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80054c0:	005a      	lsls	r2, r3, #1
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	441a      	add	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d916      	bls.n	8005508 <UART_SetConfig+0x4ac>
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d212      	bcs.n	8005508 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f023 030f 	bic.w	r3, r3, #15
 80054ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	8bfb      	ldrh	r3, [r7, #30]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	8bfa      	ldrh	r2, [r7, #30]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	e05b      	b.n	80055c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800550e:	e057      	b.n	80055c0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005510:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005514:	2b08      	cmp	r3, #8
 8005516:	d828      	bhi.n	800556a <UART_SetConfig+0x50e>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0x4c4>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005545 	.word	0x08005545
 8005524:	0800554d 	.word	0x0800554d
 8005528:	08005555 	.word	0x08005555
 800552c:	0800556b 	.word	0x0800556b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800556b 	.word	0x0800556b
 8005538:	0800556b 	.word	0x0800556b
 800553c:	0800556b 	.word	0x0800556b
 8005540:	08005563 	.word	0x08005563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe f8c4 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800554a:	e014      	b.n	8005576 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fe f8d6 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005552:	e010      	b.n	8005576 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005554:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <UART_SetConfig+0x594>)
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005558:	e00d      	b.n	8005576 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800555a:	f7fe f84b 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005560:	e009      	b.n	8005576 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005568:	e005      	b.n	8005576 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005574:	bf00      	nop
    }

    if (pclk != 0U)
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d021      	beq.n	80055c0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	4a1a      	ldr	r2, [pc, #104]	; (80055ec <UART_SetConfig+0x590>)
 8005582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005586:	461a      	mov	r2, r3
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	fbb3 f2f2 	udiv	r2, r3, r2
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	441a      	add	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b0f      	cmp	r3, #15
 80055a4:	d909      	bls.n	80055ba <UART_SetConfig+0x55e>
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d205      	bcs.n	80055ba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60da      	str	r2, [r3, #12]
 80055b8:	e002      	b.n	80055c0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2200      	movs	r2, #0
 80055d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ea:	bf00      	nop
 80055ec:	08006d60 	.word	0x08006d60
 80055f0:	00f42400 	.word	0x00f42400

080055f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01a      	beq.n	800570a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f2:	d10a      	bne.n	800570a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005748:	f7fc f892 	bl	8001870 <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b08      	cmp	r3, #8
 800575a:	d10e      	bne.n	800577a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800575c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f82f 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e025      	b.n	80057c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d10e      	bne.n	80057a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f819 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e00f      	b.n	80057c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b09c      	sub	sp, #112	; 0x70
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057de:	e0a9      	b.n	8005934 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	f000 80a5 	beq.w	8005934 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fc f841 	bl	8001870 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <UART_WaitOnFlagUntilTimeout+0x32>
 80057fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d140      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800580e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005814:	667b      	str	r3, [r7, #100]	; 0x64
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005820:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800582c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e6      	bne.n	8005800 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	663b      	str	r3, [r7, #96]	; 0x60
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005852:	64ba      	str	r2, [r7, #72]	; 0x48
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e5      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e069      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d051      	beq.n	8005934 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589e:	d149      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	613b      	str	r3, [r7, #16]
   return(result);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058fc:	623a      	str	r2, [r7, #32]
 80058fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	61bb      	str	r3, [r7, #24]
   return(result);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e010      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	429a      	cmp	r2, r3
 8005950:	f43f af46 	beq.w	80057e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3770      	adds	r7, #112	; 0x70
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b096      	sub	sp, #88	; 0x58
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	88fa      	ldrh	r2, [r7, #6]
 8005978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2222      	movs	r2, #34	; 0x22
 8005988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02c      	beq.n	80059ee <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005998:	4a42      	ldr	r2, [pc, #264]	; (8005aa4 <UART_Start_Receive_DMA+0x144>)
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a0:	4a41      	ldr	r2, [pc, #260]	; (8005aa8 <UART_Start_Receive_DMA+0x148>)
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a8:	4a40      	ldr	r2, [pc, #256]	; (8005aac <UART_Start_Receive_DMA+0x14c>)
 80059aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b0:	2200      	movs	r2, #0
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3324      	adds	r3, #36	; 0x24
 80059be:	4619      	mov	r1, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	461a      	mov	r2, r3
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	f7fc fcc4 	bl	8002354 <HAL_DMA_Start_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00d      	beq.n	80059ee <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2210      	movs	r2, #16
 80059d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e055      	b.n	8005a9a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a12:	657b      	str	r3, [r7, #84]	; 0x54
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a1e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a50:	637a      	str	r2, [r7, #52]	; 0x34
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	613b      	str	r3, [r7, #16]
   return(result);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a84:	623a      	str	r2, [r7, #32]
 8005a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	69f9      	ldr	r1, [r7, #28]
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3758      	adds	r7, #88	; 0x58
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	08005cb5 	.word	0x08005cb5
 8005aa8:	08005ddb 	.word	0x08005ddb
 8005aac:	08005e13 	.word	0x08005e13

08005ab0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b08f      	sub	sp, #60	; 0x3c
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e6      	bne.n	8005ab8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0a:	61ba      	str	r2, [r7, #24]
 8005b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005b26:	bf00      	nop
 8005b28:	373c      	adds	r7, #60	; 0x3c
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b095      	sub	sp, #84	; 0x54
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
 8005b5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e3      	bne.n	8005b6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d118      	bne.n	8005bde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
 8005bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005bf2:	bf00      	nop
 8005bf4:	3754      	adds	r7, #84	; 0x54
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b090      	sub	sp, #64	; 0x40
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d137      	bne.n	8005c8a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	623b      	str	r3, [r7, #32]
   return(result);
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c42:	633a      	str	r2, [r7, #48]	; 0x30
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e5      	bne.n	8005c22 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	69b9      	ldr	r1, [r7, #24]
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	617b      	str	r3, [r7, #20]
   return(result);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c88:	e002      	b.n	8005c90 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005c8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005c8c:	f7fb fce4 	bl	8001658 <HAL_UART_TxCpltCallback>
}
 8005c90:	bf00      	nop
 8005c92:	3740      	adds	r7, #64	; 0x40
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff f9b0 	bl	800500c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b09c      	sub	sp, #112	; 0x70
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d171      	bne.n	8005db4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e6      	bne.n	8005cd8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	667b      	str	r3, [r7, #100]	; 0x64
 8005d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	663b      	str	r3, [r7, #96]	; 0x60
 8005d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e5      	bne.n	8005d3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d118      	bne.n	8005db4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0310 	bic.w	r3, r3, #16
 8005d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d107      	bne.n	8005dcc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dc6:	f7fb fc51 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dca:	e002      	b.n	8005dd2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005dcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dce:	f7ff f927 	bl	8005020 <HAL_UART_RxCpltCallback>
}
 8005dd2:	bf00      	nop
 8005dd4:	3770      	adds	r7, #112	; 0x70
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d109      	bne.n	8005e04 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7fb fc35 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e02:	e002      	b.n	8005e0a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff f915 	bl	8005034 <HAL_UART_RxHalfCpltCallback>
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d109      	bne.n	8005e52 <UART_DMAError+0x40>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b21      	cmp	r3, #33	; 0x21
 8005e42:	d106      	bne.n	8005e52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005e4c:	6978      	ldr	r0, [r7, #20]
 8005e4e:	f7ff fe2f 	bl	8005ab0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d109      	bne.n	8005e74 <UART_DMAError+0x62>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b22      	cmp	r3, #34	; 0x22
 8005e64:	d106      	bne.n	8005e74 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005e6e:	6978      	ldr	r0, [r7, #20]
 8005e70:	f7ff fe5f 	bl	8005b32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7a:	f043 0210 	orr.w	r2, r3, #16
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e84:	6978      	ldr	r0, [r7, #20]
 8005e86:	f7ff f8df 	bl	8005048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff f8c9 	bl	8005048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6979      	ldr	r1, [r7, #20]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e6      	bne.n	8005ec6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb fba6 	bl	8001658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f0c:	bf00      	nop
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e027      	b.n	8005fb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2224      	movs	r2, #36	; 0x24
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e02d      	b.n	8006036 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2224      	movs	r2, #36	; 0x24
 8005fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0201 	bic.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8ac 	bl	8006174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006052:	2302      	movs	r3, #2
 8006054:	e02d      	b.n	80060b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2224      	movs	r2, #36	; 0x24
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f86e 	bl	8006174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b08c      	sub	sp, #48	; 0x30
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d14a      	bne.n	8006168 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e043      	b.n	800616a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e03c      	b.n	800616a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	461a      	mov	r2, r3
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff fc2b 	bl	8005960 <UART_Start_Receive_DMA>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006114:	2b00      	cmp	r3, #0
 8006116:	d124      	bne.n	8006162 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d11d      	bne.n	800615c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2210      	movs	r2, #16
 8006126:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	617b      	str	r3, [r7, #20]
   return(result);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f043 0310 	orr.w	r3, r3, #16
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
 8006148:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6a39      	ldr	r1, [r7, #32]
 800614c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	61fb      	str	r3, [r7, #28]
   return(result);
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e6      	bne.n	8006128 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800615a:	e002      	b.n	8006162 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006166:	e000      	b.n	800616a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3730      	adds	r7, #48	; 0x30
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006180:	2b00      	cmp	r3, #0
 8006182:	d108      	bne.n	8006196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006194:	e031      	b.n	80061fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006196:	2308      	movs	r3, #8
 8006198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800619a:	2308      	movs	r3, #8
 800619c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	0e5b      	lsrs	r3, r3, #25
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	0f5b      	lsrs	r3, r3, #29
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	7b3a      	ldrb	r2, [r7, #12]
 80061c2:	4911      	ldr	r1, [pc, #68]	; (8006208 <UARTEx_SetNbDataToProcess+0x94>)
 80061c4:	5c8a      	ldrb	r2, [r1, r2]
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ca:	7b3a      	ldrb	r2, [r7, #12]
 80061cc:	490f      	ldr	r1, [pc, #60]	; (800620c <UARTEx_SetNbDataToProcess+0x98>)
 80061ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	7b7a      	ldrb	r2, [r7, #13]
 80061e0:	4909      	ldr	r1, [pc, #36]	; (8006208 <UARTEx_SetNbDataToProcess+0x94>)
 80061e2:	5c8a      	ldrb	r2, [r1, r2]
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061e8:	7b7a      	ldrb	r2, [r7, #13]
 80061ea:	4908      	ldr	r1, [pc, #32]	; (800620c <UARTEx_SetNbDataToProcess+0x98>)
 80061ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061fa:	bf00      	nop
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	08006d78 	.word	0x08006d78
 800620c:	08006d80 	.word	0x08006d80

08006210 <memset>:
 8006210:	4402      	add	r2, r0
 8006212:	4603      	mov	r3, r0
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	f803 1b01 	strb.w	r1, [r3], #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <strstr>:
 8006220:	780a      	ldrb	r2, [r1, #0]
 8006222:	b570      	push	{r4, r5, r6, lr}
 8006224:	b96a      	cbnz	r2, 8006242 <strstr+0x22>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	429a      	cmp	r2, r3
 800622a:	d109      	bne.n	8006240 <strstr+0x20>
 800622c:	460c      	mov	r4, r1
 800622e:	4605      	mov	r5, r0
 8006230:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f6      	beq.n	8006226 <strstr+0x6>
 8006238:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800623c:	429e      	cmp	r6, r3
 800623e:	d0f7      	beq.n	8006230 <strstr+0x10>
 8006240:	3001      	adds	r0, #1
 8006242:	7803      	ldrb	r3, [r0, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1ef      	bne.n	8006228 <strstr+0x8>
 8006248:	4618      	mov	r0, r3
 800624a:	e7ec      	b.n	8006226 <strstr+0x6>

0800624c <__libc_init_array>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4d0d      	ldr	r5, [pc, #52]	; (8006284 <__libc_init_array+0x38>)
 8006250:	4c0d      	ldr	r4, [pc, #52]	; (8006288 <__libc_init_array+0x3c>)
 8006252:	1b64      	subs	r4, r4, r5
 8006254:	10a4      	asrs	r4, r4, #2
 8006256:	2600      	movs	r6, #0
 8006258:	42a6      	cmp	r6, r4
 800625a:	d109      	bne.n	8006270 <__libc_init_array+0x24>
 800625c:	4d0b      	ldr	r5, [pc, #44]	; (800628c <__libc_init_array+0x40>)
 800625e:	4c0c      	ldr	r4, [pc, #48]	; (8006290 <__libc_init_array+0x44>)
 8006260:	f000 f818 	bl	8006294 <_init>
 8006264:	1b64      	subs	r4, r4, r5
 8006266:	10a4      	asrs	r4, r4, #2
 8006268:	2600      	movs	r6, #0
 800626a:	42a6      	cmp	r6, r4
 800626c:	d105      	bne.n	800627a <__libc_init_array+0x2e>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	f855 3b04 	ldr.w	r3, [r5], #4
 8006274:	4798      	blx	r3
 8006276:	3601      	adds	r6, #1
 8006278:	e7ee      	b.n	8006258 <__libc_init_array+0xc>
 800627a:	f855 3b04 	ldr.w	r3, [r5], #4
 800627e:	4798      	blx	r3
 8006280:	3601      	adds	r6, #1
 8006282:	e7f2      	b.n	800626a <__libc_init_array+0x1e>
 8006284:	08006d90 	.word	0x08006d90
 8006288:	08006d90 	.word	0x08006d90
 800628c:	08006d90 	.word	0x08006d90
 8006290:	08006d94 	.word	0x08006d94

08006294 <_init>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr

080062a0 <_fini>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	bf00      	nop
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr

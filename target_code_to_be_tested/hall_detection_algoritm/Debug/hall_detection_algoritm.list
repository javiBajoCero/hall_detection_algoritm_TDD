
hall_detection_algoritm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059cc  080059cc  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d4  080059d4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080059dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000024  08005a00  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08005a00  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001158c  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd6  00000000  00000000  00031623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba3  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023598  00000000  00000000  00035c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014942  00000000  00000000  00059233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da1ce  00000000  00000000  0006db75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea0  00000000  00000000  00147d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0014bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005994 	.word	0x08005994

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	08005994 	.word	0x08005994

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b970 	b.w	8000d8c <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000da4:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <MX_ADC1_Init+0xbc>)
 8000da6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000daa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000dd4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000df6:	f001 fc97 	bl	8002728 <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e00:	f001 f9fa 	bl	80021f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000e16:	f001 fdf9 	bl	8002a0c <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e20:	f001 f9ea 	bl	80021f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_ADC1_Init+0xb8>)
 8000e32:	f001 fdeb 	bl	8002a0c <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000e3c:	f001 f9dc 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000040 	.word	0x20000040
 8000e4c:	40012000 	.word	0x40012000

08000e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <HAL_ADC_MspInit+0xdc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d157      	bne.n	8000f22 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_ADC_MspInit+0xe0>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <HAL_ADC_MspInit+0xe0>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_ADC_MspInit+0xe0>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <HAL_ADC_MspInit+0xe0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <HAL_ADC_MspInit+0xe0>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_ADC_MspInit+0xe0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <HAL_ADC_MspInit+0xe4>)
 8000ebe:	f002 fcd7 	bl	8003870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_ADC_MspInit+0xec>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000f08:	f002 f942 	bl	8003190 <HAL_DMA_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f12:	f001 f971 	bl	80021f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_ADC_MspInit+0xe8>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000088 	.word	0x20000088
 8000f3c:	40026410 	.word	0x40026410

08000f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2038      	movs	r0, #56	; 0x38
 8000f68:	f002 f8db 	bl	8003122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f6c:	2038      	movs	r0, #56	; 0x38
 8000f6e:	f002 f8f4 	bl	800315a <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <MX_GPIO_Init+0xfc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a37      	ldr	r2, [pc, #220]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a30      	ldr	r2, [pc, #192]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_GPIO_Init+0xfc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	4824      	ldr	r0, [pc, #144]	; (8001080 <MX_GPIO_Init+0x100>)
 8000ff0:	f002 fdea 	bl	8003bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_GPIO_Init+0x104>)
 800100c:	f002 fc30 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_hall_C_Pin;
 8001010:	2302      	movs	r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_hall_C_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <MX_GPIO_Init+0x104>)
 8001024:	f002 fc24 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_hall_A_Pin;
 8001028:	2310      	movs	r3, #16
 800102a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_hall_A_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <MX_GPIO_Init+0x100>)
 800103c:	f002 fc18 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001040:	2320      	movs	r3, #32
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <MX_GPIO_Init+0x100>)
 8001058:	f002 fc0a 	bl	8003870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_hall_B_Pin;
 800105c:	2301      	movs	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_hall_B_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_GPIO_Init+0x108>)
 8001070:	f002 fbfe 	bl	8003870 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800
 8001088:	40020400 	.word	0x40020400

0800108c <Hall_start_detection>:

/**
* \brief
* \param
*/
void Hall_start_detection(){
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	detection_state=detection_ENABLED;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <Hall_start_detection+0x14>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200000ec 	.word	0x200000ec

080010a4 <Hall_is_detection_finished>:

/**
* \brief
* \param
*/
uint32_t Hall_is_detection_finished(){
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	if(detection_state==detection_DISABLED){
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <Hall_is_detection_finished+0x1c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <Hall_is_detection_finished+0x10>
		return YES;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <Hall_is_detection_finished+0x12>
	}else{
		return NO;
 80010b4:	2300      	movs	r3, #0
	}
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	200000ec 	.word	0x200000ec

080010c4 <Hall_Identification_Test_measurement>:
		hall_pin_info* H1_gpio,
		hall_pin_info* H2_gpio,
		hall_pin_info* H3_gpio,
		volatile float* ADCcurr1,
		volatile float* ADCcurr2
		){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
	switch (detection_state) {
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d846      	bhi.n	800116a <Hall_Identification_Test_measurement+0xa6>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <Hall_Identification_Test_measurement+0x20>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	080010fd 	.word	0x080010fd
 80010e8:	08001119 	.word	0x08001119
 80010ec:	08001133 	.word	0x08001133
 80010f0:	0800114d 	.word	0x0800114d
 80010f4:	08001157 	.word	0x08001157
 80010f8:	08001161 	.word	0x08001161
		case detection_ENABLED:
			ticks=0;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <Hall_Identification_Test_measurement+0xc4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
			resetVariables(&general);
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 8001104:	f000 f844 	bl	8001190 <resetVariables>
			detection_state=detection_WAIT_CURRENT_STATIONARY;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
			general.start_adquisition_ticks=ticks;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <Hall_Identification_Test_measurement+0xc4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 8001114:	6013      	str	r3, [r2, #0]
			break;
 8001116:	e02c      	b.n	8001172 <Hall_Identification_Test_measurement+0xae>
		case detection_WAIT_CURRENT_STATIONARY:
			wait_for_the_current_stationary(&detection_state,&general,H1_gpio,H2_gpio,H3_gpio,ADCcurr1,ADCcurr2);
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4918      	ldr	r1, [pc, #96]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 800112c:	f000 f840 	bl	80011b0 <wait_for_the_current_stationary>
			break;
 8001130:	e01f      	b.n	8001172 <Hall_Identification_Test_measurement+0xae>
		case detection_ADQUISITION:
			adquisition(&detection_state,&general,H1_gpio,H2_gpio,H3_gpio,ADCcurr1,ADCcurr2);
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4912      	ldr	r1, [pc, #72]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 8001146:	f000 f87b 	bl	8001240 <adquisition>
			break;
 800114a:	e012      	b.n	8001172 <Hall_Identification_Test_measurement+0xae>
		case detection_INTERPRETATION:
			interpretation(&detection_state, &general);
 800114c:	490f      	ldr	r1, [pc, #60]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 8001150:	f000 f8b0 	bl	80012b4 <interpretation>
			break;
 8001154:	e00d      	b.n	8001172 <Hall_Identification_Test_measurement+0xae>
		case detection_VALIDATION:
			validation(&detection_state,&general);
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 800115a:	f000 f8cd 	bl	80012f8 <validation>
			break;
 800115e:	e008      	b.n	8001172 <Hall_Identification_Test_measurement+0xae>
		case detection_PRESENTATION_FINISH:
			present_and_finish(&detection_state,&general);
 8001160:	490a      	ldr	r1, [pc, #40]	; (800118c <Hall_Identification_Test_measurement+0xc8>)
 8001162:	4808      	ldr	r0, [pc, #32]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 8001164:	f000 f9e2 	bl	800152c <present_and_finish>
			break;
 8001168:	e003      	b.n	8001172 <Hall_Identification_Test_measurement+0xae>
		case detection_ERROR_OR_TIMEOUT:
		case detection_DISABLED://do nothing
		default:
			detection_state=detection_DISABLED;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <Hall_Identification_Test_measurement+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
			break;
 8001170:	bf00      	nop
	}
	ticks++;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <Hall_Identification_Test_measurement+0xc4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <Hall_Identification_Test_measurement+0xc4>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000ec 	.word	0x200000ec
 8001188:	200000e8 	.word	0x200000e8
 800118c:	200000f0 	.word	0x200000f0

08001190 <resetVariables>:

/**
* \brief
* \param
*/
void resetVariables(hall_detection_general_struct *gen){
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	*gen=empty_general;		//set everything to 0, im not memsetting
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80011a0:	461a      	mov	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f004 fbca 	bl	800593c <memset>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <wait_for_the_current_stationary>:
		hall_pin_info* H1_gpio,
		hall_pin_info* H2_gpio,
		hall_pin_info* H3_gpio,
		volatile float* ADCcurr1,
		volatile float* ADCcurr2
		){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
	//timeout or currentisstationary
	fill_buffers(state, gen, H1_gpio, H2_gpio, H3_gpio, ADCcurr1, ADCcurr2);
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 fa4d 	bl	8001670 <fill_buffers>
	//timeout
	if( ticks>MAXTICKs){
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <wait_for_the_current_stationary+0x84>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <wait_for_the_current_stationary+0x88>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d903      	bls.n	80011e8 <wait_for_the_current_stationary+0x38>
		*state=detection_ERROR_OR_TIMEOUT;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2207      	movs	r2, #7
 80011e4:	701a      	strb	r2, [r3, #0]
		return;
 80011e6:	e022      	b.n	800122e <wait_for_the_current_stationary+0x7e>
	}

    //endofadquisition
	if(ticks>general.start_adquisition_ticks+2){//run alone signals_adquisition() to pre-fill the buffers
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <wait_for_the_current_stationary+0x8c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1c9a      	adds	r2, r3, #2
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <wait_for_the_current_stationary+0x84>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d21b      	bcs.n	800122e <wait_for_the_current_stationary+0x7e>
		if(detect_N_zerocrossings(gen,WAITING_STATIONARY_MAXZEROCROSSINGS)==YES){
 80011f6:	2103      	movs	r1, #3
 80011f8:	68b8      	ldr	r0, [r7, #8]
 80011fa:	f000 fa8b 	bl	8001714 <detect_N_zerocrossings>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d114      	bne.n	800122e <wait_for_the_current_stationary+0x7e>
			if(are_all_periods_stable(gen,WAITING_STATIONARY_MAXZEROCROSSINGS)==YES){
 8001204:	2103      	movs	r1, #3
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f000 fcba 	bl	8001b80 <are_all_periods_stable>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d10a      	bne.n	8001228 <wait_for_the_current_stationary+0x78>
				resetVariables(gen);
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	f7ff ffbc 	bl	8001190 <resetVariables>
				general.start_adquisition_ticks=ticks;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <wait_for_the_current_stationary+0x84>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <wait_for_the_current_stationary+0x8c>)
 800121e:	6013      	str	r3, [r2, #0]
				*state=detection_ADQUISITION;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2203      	movs	r2, #3
 8001224:	701a      	strb	r2, [r3, #0]
				return;
 8001226:	e002      	b.n	800122e <wait_for_the_current_stationary+0x7e>
			}else{
				resetVariables(gen);
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff ffb1 	bl	8001190 <resetVariables>
			}
		}
	}
}
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000e8 	.word	0x200000e8
 8001238:	000d9038 	.word	0x000d9038
 800123c:	200000f0 	.word	0x200000f0

08001240 <adquisition>:
		hall_pin_info* H1_gpio,
		hall_pin_info* H2_gpio,
		hall_pin_info* H3_gpio,
		volatile float* ADCcurr1,
		volatile float* ADCcurr2
		){
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af04      	add	r7, sp, #16
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]

	fill_buffers(state, gen, H1_gpio, H2_gpio, H3_gpio, ADCcurr1, ADCcurr2);
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 fa05 	bl	8001670 <fill_buffers>

	//timeout
	if( ticks>MAXTICKs){
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <adquisition+0x68>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <adquisition+0x6c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d903      	bls.n	8001278 <adquisition+0x38>
		*state=detection_ERROR_OR_TIMEOUT;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2207      	movs	r2, #7
 8001274:	701a      	strb	r2, [r3, #0]
		return;
 8001276:	e014      	b.n	80012a2 <adquisition+0x62>
	}

	if(ticks>general.start_adquisition_ticks+2){//run alone signals_adquisition() to pre-fill the buffers
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <adquisition+0x70>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1c9a      	adds	r2, r3, #2
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <adquisition+0x68>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d20d      	bcs.n	80012a2 <adquisition+0x62>
		if(detect_N_zerocrossings(gen,MAXZEROCROSSINGS)==YES){
 8001286:	2106      	movs	r1, #6
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f000 fa43 	bl	8001714 <detect_N_zerocrossings>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	d106      	bne.n	80012a2 <adquisition+0x62>
			calculateElectricPeriod_inTicks(gen,MAXZEROCROSSINGS);
 8001294:	2106      	movs	r1, #6
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f000 fb6a 	bl	8001970 <calculateElectricPeriod_inTicks>
			*state=detection_INTERPRETATION;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2204      	movs	r2, #4
 80012a0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200000e8 	.word	0x200000e8
 80012ac:	000d9038 	.word	0x000d9038
 80012b0:	200000f0 	.word	0x200000f0

080012b4 <interpretation>:

/**
* \brief
* \param
*/
void interpretation(detection_state_enum* state,hall_detection_general_struct *gen){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]

	//timeout
	if( ticks>MAXTICKs){
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <interpretation+0x3c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <interpretation+0x40>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d903      	bls.n	80012d0 <interpretation+0x1c>
		*state=detection_ERROR_OR_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2207      	movs	r2, #7
 80012cc:	701a      	strb	r2, [r3, #0]
		return;
 80012ce:	e00c      	b.n	80012ea <interpretation+0x36>
	}

	assign_closest_phase_to_hall(gen);
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f000 fc79 	bl	8001bc8 <assign_closest_phase_to_hall>
	//assign_polarity(gen);
	gen->numberOfresults++;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	*state=detection_VALIDATION;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2205      	movs	r2, #5
 80012e8:	701a      	strb	r2, [r3, #0]


}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000e8 	.word	0x200000e8
 80012f4:	000d9038 	.word	0x000d9038

080012f8 <validation>:

void validation(detection_state_enum* state,hall_detection_general_struct *gen){
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]

	//timeout
	if( ticks>MAXTICKs){
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <validation+0x22c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a88      	ldr	r2, [pc, #544]	; (8001528 <validation+0x230>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d903      	bls.n	8001314 <validation+0x1c>
		*state=detection_ERROR_OR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2207      	movs	r2, #7
 8001310:	701a      	strb	r2, [r3, #0]
		return;
 8001312:	e102      	b.n	800151a <validation+0x222>
	}

	//reached results buffer full capacity
	if(gen->numberOfresults>TOTAL_NUMBEROFRESULTS){
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800131a:	2b06      	cmp	r3, #6
 800131c:	d903      	bls.n	8001326 <validation+0x2e>
		*state=detection_ERROR_OR_TIMEOUT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2207      	movs	r2, #7
 8001322:	701a      	strb	r2, [r3, #0]
		return;
 8001324:	e0f9      	b.n	800151a <validation+0x222>
	}

	uint32_t all_phases_not_repeated=0;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0;  i < NUMBEROFPHASES; ++ i) {
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e03a      	b.n	80013a6 <validation+0xae>
		if(gen->results[gen->numberOfresults-1].hall_order[i]==hall_A){
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001336:	3b01      	subs	r3, #1
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	441a      	add	r2, r3
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4413      	add	r3, r2
 8001342:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d104      	bne.n	8001356 <validation+0x5e>
			all_phases_not_repeated|=(1<<hall_A);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	e024      	b.n	80013a0 <validation+0xa8>
		}else if(gen->results[gen->numberOfresults-1].hall_order[i]==hall_B){
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800135c:	3b01      	subs	r3, #1
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	441a      	add	r2, r3
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d104      	bne.n	800137c <validation+0x84>
			all_phases_not_repeated|=(1<<hall_B);
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e011      	b.n	80013a0 <validation+0xa8>
		}else if(gen->results[gen->numberOfresults-1].hall_order[i]==hall_C){
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001382:	3b01      	subs	r3, #1
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	441a      	add	r2, r3
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4413      	add	r3, r2
 800138e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d103      	bne.n	80013a0 <validation+0xa8>
			all_phases_not_repeated|=(1<<hall_C);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0;  i < NUMBEROFPHASES; ++ i) {
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d9c1      	bls.n	8001330 <validation+0x38>
		}
	}

	if(all_phases_not_repeated==((1<<hall_A)+(1<<hall_B)+(1<<hall_C))){
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d10a      	bne.n	80013c8 <validation+0xd0>
		gen->results[gen->numberOfresults-1].is_valid=YES;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013b8:	3b01      	subs	r3, #1
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	3315      	adds	r3, #21
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e009      	b.n	80013dc <validation+0xe4>
	}else{
		gen->results[gen->numberOfresults-1].is_valid=NO;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013ce:	3b01      	subs	r3, #1
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	3315      	adds	r3, #21
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
	}


	uint32_t number_of_results_matching=0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	if(gen->numberOfresults>=NUMBER_OF_VALID_MATCHING_RESULTS){			//only if enough adquisitions were made
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	f240 8093 	bls.w	8001512 <validation+0x21a>
		for (uint32_t i = 0; i < gen->numberOfresults; ++i) {			//loop trough results
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e087      	b.n	8001502 <validation+0x20a>
			number_of_results_matching=0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
			if(gen->results[i].is_valid==YES){							//skip the not valid results.
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3315      	adds	r3, #21
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d17a      	bne.n	80014fc <validation+0x204>
				for (uint32_t j = i+1; j < gen->numberOfresults; ++j) {	//compare that one result with the rest
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e070      	b.n	80014f0 <validation+0x1f8>
					if(
							gen->results[i].hall_order[0]==gen->results[j].hall_order[0] &&
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	440b      	add	r3, r1
 8001424:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001428:	781b      	ldrb	r3, [r3, #0]
					if(
 800142a:	429a      	cmp	r2, r3
 800142c:	d15d      	bne.n	80014ea <validation+0x1f2>
							gen->results[i].hall_order[1]==gen->results[j].hall_order[1] &&
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f203 1359 	addw	r3, r3, #345	; 0x159
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	440b      	add	r3, r1
 8001444:	f203 1359 	addw	r3, r3, #345	; 0x159
 8001448:	781b      	ldrb	r3, [r3, #0]
							gen->results[i].hall_order[0]==gen->results[j].hall_order[0] &&
 800144a:	429a      	cmp	r2, r3
 800144c:	d14d      	bne.n	80014ea <validation+0x1f2>
							gen->results[i].hall_order[2]==gen->results[j].hall_order[2] &&
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8001468:	781b      	ldrb	r3, [r3, #0]
							gen->results[i].hall_order[1]==gen->results[j].hall_order[1] &&
 800146a:	429a      	cmp	r2, r3
 800146c:	d13d      	bne.n	80014ea <validation+0x1f2>
							gen->results[i].hall_polarity[0]==gen->results[j].hall_polarity[0] &&
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	f203 135b 	addw	r3, r3, #347	; 0x15b
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	440b      	add	r3, r1
 8001484:	f203 135b 	addw	r3, r3, #347	; 0x15b
 8001488:	781b      	ldrb	r3, [r3, #0]
							gen->results[i].hall_order[2]==gen->results[j].hall_order[2] &&
 800148a:	429a      	cmp	r2, r3
 800148c:	d12d      	bne.n	80014ea <validation+0x1f2>
							gen->results[i].hall_polarity[1]==gen->results[j].hall_polarity[1] &&
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80014a8:	781b      	ldrb	r3, [r3, #0]
							gen->results[i].hall_polarity[0]==gen->results[j].hall_polarity[0] &&
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d11d      	bne.n	80014ea <validation+0x1f2>
							gen->results[i].hall_polarity[2]==gen->results[j].hall_polarity[2]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	6839      	ldr	r1, [r7, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80014c8:	781b      	ldrb	r3, [r3, #0]
							gen->results[i].hall_polarity[1]==gen->results[j].hall_polarity[1] &&
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d10d      	bne.n	80014ea <validation+0x1f2>
							){//do they match?
							number_of_results_matching++;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
						if(number_of_results_matching>=NUMBER_OF_VALID_MATCHING_RESULTS-1){
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d907      	bls.n	80014ea <validation+0x1f2>
							gen->indexOfcorrectResult=i;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
							*state=detection_PRESENTATION_FINISH;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2206      	movs	r2, #6
 80014e6:	701a      	strb	r2, [r3, #0]
							return;
 80014e8:	e017      	b.n	800151a <validation+0x222>
				for (uint32_t j = i+1; j < gen->numberOfresults; ++j) {	//compare that one result with the rest
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d388      	bcc.n	800140e <validation+0x116>
		for (uint32_t i = 0; i < gen->numberOfresults; ++i) {			//loop trough results
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	3301      	adds	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	429a      	cmp	r2, r3
 800150c:	f4ff af71 	bcc.w	80013f2 <validation+0xfa>
 8001510:	e003      	b.n	800151a <validation+0x222>
				}
			}

		}
	}else{
		*state=detection_ADQUISITION;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	701a      	strb	r2, [r3, #0]
		return;
 8001518:	bf00      	nop
	}
}
 800151a:	3724      	adds	r7, #36	; 0x24
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	200000e8 	.word	0x200000e8
 8001528:	000d9038 	.word	0x000d9038

0800152c <present_and_finish>:
void present_and_finish(detection_state_enum* state,hall_detection_general_struct *gen){
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]

	for (uint32_t i = 0; i < messageLength; ++i) {
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e009      	b.n	8001550 <present_and_finish+0x24>
		gen->message[i]=' ';
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8001546:	2220      	movs	r2, #32
 8001548:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < messageLength; ++i) {
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d9f2      	bls.n	800153c <present_and_finish+0x10>
	}

	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	e06c      	b.n	8001636 <present_and_finish+0x10a>
		if(gen->results[gen->indexOfcorrectResult].hall_order[i]==hall_A){
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	441a      	add	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4413      	add	r3, r2
 800156c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <present_and_finish+0x5c>
			gen->message[(i*2)+1]='A';
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	3301      	adds	r3, #1
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	2241      	movs	r2, #65	; 0x41
 8001582:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001586:	e02a      	b.n	80015de <present_and_finish+0xb2>
		}else if(gen->results[gen->indexOfcorrectResult].hall_order[i]==hall_B){
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	441a      	add	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <present_and_finish+0x88>
			gen->message[(i*2)+1]='B';
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	3301      	adds	r3, #1
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	2242      	movs	r2, #66	; 0x42
 80015ae:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 80015b2:	e014      	b.n	80015de <present_and_finish+0xb2>
		}else if(gen->results[gen->indexOfcorrectResult].hall_order[i]==hall_C){
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	441a      	add	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d107      	bne.n	80015de <present_and_finish+0xb2>
			gen->message[(i*2)+1]='C';
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	3301      	adds	r3, #1
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	2243      	movs	r2, #67	; 0x43
 80015da:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
		}

		if(gen->results[gen->indexOfcorrectResult].hall_polarity[i]==hall_direct){
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	441a      	add	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	f203 135b 	addw	r3, r3, #347	; 0x15b
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <present_and_finish+0xdc>
			gen->message[i*2]=' ';
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	2220      	movs	r2, #32
 8001602:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8001606:	e013      	b.n	8001630 <present_and_finish+0x104>
		}else if(gen->results[gen->indexOfcorrectResult].hall_polarity[i]==hall_inverse){
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	441a      	add	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4413      	add	r3, r2
 8001618:	f203 135b 	addw	r3, r3, #347	; 0x15b
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <present_and_finish+0x104>
			gen->message[i*2]='!';
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	2221      	movs	r2, #33	; 0x21
 800162c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3301      	adds	r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d98f      	bls.n	800155c <present_and_finish+0x30>
		}
	}

	gen->message[messageLength-2]='\n';//two last characters
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	220a      	movs	r2, #10
 8001640:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	gen->message[messageLength-1]='\r';
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	220d      	movs	r2, #13
 8001648:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7

#ifdef TESTuart
	HAL_UART_Transmit(&huart2, (const uint8_t *)&general.message, messageLength,100);
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	2208      	movs	r2, #8
 8001650:	4905      	ldr	r1, [pc, #20]	; (8001668 <present_and_finish+0x13c>)
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <present_and_finish+0x140>)
 8001654:	f003 fdfd 	bl	8005252 <HAL_UART_Transmit>
#endif

	*state=detection_DISABLED;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002a0 	.word	0x200002a0
 800166c:	20000300 	.word	0x20000300

08001670 <fill_buffers>:
		hall_pin_info* H1_gpio,
		hall_pin_info* H2_gpio,
		hall_pin_info* H3_gpio,
		volatile float* ADCcurr1,
		volatile float* ADCcurr2
		){
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
	gen->currC.two_samples_buffer[1]=gen->currC.two_samples_buffer[0];
	gen->currC.two_samples_buffer[0]= currentAplusBplusC-*ADCcurr1-*ADCcurr2;
#endif

#ifdef REAL_PHASES_A_C_calculated_B
	gen->currA.two_samples_buffer[1]=gen->currA.two_samples_buffer[0];
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	609a      	str	r2, [r3, #8]
	gen->currA.two_samples_buffer[0]= *ADCcurr1;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	605a      	str	r2, [r3, #4]
	//b=-a-c, NO REAL MEASUREMENT OF CURRENT B, assuming ABC currents ortogonality:
	gen->currB.two_samples_buffer[1]=gen->currB.two_samples_buffer[0];
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
	gen->currB.two_samples_buffer[0]= -*ADCcurr1-*ADCcurr2;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eeb1 7a67 	vneg.f32	s14, s15
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	gen->currC.two_samples_buffer[1]=gen->currC.two_samples_buffer[0];
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	661a      	str	r2, [r3, #96]	; 0x60
	gen->currC.two_samples_buffer[0]= *ADCcurr2;
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c
	gen->currC.two_samples_buffer[1]=gen->currC.two_samples_buffer[0];
	gen->currC.two_samples_buffer[0]= *ADCcurr2;
#endif


	gen->hallA.two_samples_buffer[1]=gen->hallA.two_samples_buffer[0];
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	gen->hallA.two_samples_buffer[0]= H1_gpio->state;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	79da      	ldrb	r2, [r3, #7]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	gen->hallB.two_samples_buffer[1]=gen->hallB.two_samples_buffer[0];
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gen->hallB.two_samples_buffer[0]= H2_gpio->state;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	79da      	ldrb	r2, [r3, #7]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

	gen->hallC.two_samples_buffer[1]=gen->hallC.two_samples_buffer[0];
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	gen->hallC.two_samples_buffer[0]= H3_gpio->state;
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	79da      	ldrb	r2, [r3, #7]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <detect_N_zerocrossings>:

/**
* \brief
* \param
*/
detection_YES_NO detect_N_zerocrossings(hall_detection_general_struct *gen,uint32_t N){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	if((ticks-general.start_adquisition_ticks)>2){ //skip the first two samples to fill the buffers
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <detect_N_zerocrossings+0xf0>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <detect_N_zerocrossings+0xf4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d941      	bls.n	80017b0 <detect_N_zerocrossings+0x9c>
		detect_N_current_zerocrossings((ticks-general.start_adquisition_ticks),&gen->currA,MAXZEROCROSSINGS);
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <detect_N_zerocrossings+0xf0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <detect_N_zerocrossings+0xf4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1ad0      	subs	r0, r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	2206      	movs	r2, #6
 800173c:	4619      	mov	r1, r3
 800173e:	f000 f865 	bl	800180c <detect_N_current_zerocrossings>
		detect_N_current_zerocrossings((ticks-general.start_adquisition_ticks),&gen->currB,MAXZEROCROSSINGS);
 8001742:	4b30      	ldr	r3, [pc, #192]	; (8001804 <detect_N_zerocrossings+0xf0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <detect_N_zerocrossings+0xf4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	1ad0      	subs	r0, r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3330      	adds	r3, #48	; 0x30
 8001750:	2206      	movs	r2, #6
 8001752:	4619      	mov	r1, r3
 8001754:	f000 f85a 	bl	800180c <detect_N_current_zerocrossings>
		detect_N_current_zerocrossings((ticks-general.start_adquisition_ticks),&gen->currC,MAXZEROCROSSINGS);
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <detect_N_zerocrossings+0xf0>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <detect_N_zerocrossings+0xf4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1ad0      	subs	r0, r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	335c      	adds	r3, #92	; 0x5c
 8001766:	2206      	movs	r2, #6
 8001768:	4619      	mov	r1, r3
 800176a:	f000 f84f 	bl	800180c <detect_N_current_zerocrossings>
		detect_N_hall_zerocrossings	((ticks-general.start_adquisition_ticks),&gen->hallA,MAXZEROCROSSINGS);
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <detect_N_zerocrossings+0xf0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <detect_N_zerocrossings+0xf4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	1ad0      	subs	r0, r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3388      	adds	r3, #136	; 0x88
 800177c:	2206      	movs	r2, #6
 800177e:	4619      	mov	r1, r3
 8001780:	f000 f8bf 	bl	8001902 <detect_N_hall_zerocrossings>
		detect_N_hall_zerocrossings	((ticks-general.start_adquisition_ticks),&gen->hallB,MAXZEROCROSSINGS);
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <detect_N_zerocrossings+0xf0>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <detect_N_zerocrossings+0xf4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1ad0      	subs	r0, r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	33b0      	adds	r3, #176	; 0xb0
 8001792:	2206      	movs	r2, #6
 8001794:	4619      	mov	r1, r3
 8001796:	f000 f8b4 	bl	8001902 <detect_N_hall_zerocrossings>
		detect_N_hall_zerocrossings	((ticks-general.start_adquisition_ticks),&gen->hallC,MAXZEROCROSSINGS);
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <detect_N_zerocrossings+0xf0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <detect_N_zerocrossings+0xf4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad0      	subs	r0, r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	33d8      	adds	r3, #216	; 0xd8
 80017a8:	2206      	movs	r2, #6
 80017aa:	4619      	mov	r1, r3
 80017ac:	f000 f8a9 	bl	8001902 <detect_N_hall_zerocrossings>
	}
	if(//if all buffers are full
			(gen->currA.numberof_zerocrossings>=N) &&
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	if(//if all buffers are full
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d81e      	bhi.n	80017f8 <detect_N_zerocrossings+0xe4>
			(gen->currB.numberof_zerocrossings>=N) &&
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
			(gen->currA.numberof_zerocrossings>=N) &&
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d819      	bhi.n	80017f8 <detect_N_zerocrossings+0xe4>
			(gen->currC.numberof_zerocrossings>=N) &&
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
			(gen->currB.numberof_zerocrossings>=N) &&
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d813      	bhi.n	80017f8 <detect_N_zerocrossings+0xe4>
			(gen->hallA.numberof_zerocrossings>=N) &&
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
			(gen->currC.numberof_zerocrossings>=N) &&
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d80d      	bhi.n	80017f8 <detect_N_zerocrossings+0xe4>
			(gen->hallB.numberof_zerocrossings>=N) &&
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
			(gen->hallA.numberof_zerocrossings>=N) &&
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d807      	bhi.n	80017f8 <detect_N_zerocrossings+0xe4>
			(gen->hallC.numberof_zerocrossings>=N)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
			(gen->hallB.numberof_zerocrossings>=N) &&
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d801      	bhi.n	80017f8 <detect_N_zerocrossings+0xe4>
			){
		return YES;//done detecting
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <detect_N_zerocrossings+0xe6>
	}else{
		return NO;//still ongoing
 80017f8:	2300      	movs	r3, #0
	}
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000e8 	.word	0x200000e8
 8001808:	200000f0 	.word	0x200000f0

0800180c <detect_N_current_zerocrossings>:

/**
* \brief
* \param
*/
void detect_N_current_zerocrossings(uint32_t ticks,current_or_hall_measurements_struct* currx,uint32_t N){
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	if(	   (((currx->two_samples_buffer[0]-currentADCoffset)*
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	ed93 7a00 	vldr	s14, [r3]
			 (currx->two_samples_buffer[1]-currentADCoffset))<=0)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	edd3 7a01 	vldr	s15, [r3, #4]
	if(	   (((currx->two_samples_buffer[0]-currentADCoffset)*
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d900      	bls.n	8001834 <detect_N_current_zerocrossings+0x28>
					}
					currx->numberof_zerocrossings++;
			}
		}
	}
}
 8001832:	e060      	b.n	80018f6 <detect_N_current_zerocrossings+0xea>
			 && currx->numberof_zerocrossings<N
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d95b      	bls.n	80018f6 <detect_N_current_zerocrossings+0xea>
		if(currx->numberof_zerocrossings==0){			//only if this is the first zerocrossing detected
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	d126      	bne.n	8001894 <detect_N_current_zerocrossings+0x88>
					currx->zerocrossings_tick[currx->numberof_zerocrossings]=ticks;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3202      	adds	r2, #2
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if(currx->two_samples_buffer[0]>currx->two_samples_buffer[1]){
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	dd07      	ble.n	800187a <detect_N_current_zerocrossings+0x6e>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=rising_polarity;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2020 	strb.w	r2, [r3, #32]
 8001878:	e006      	b.n	8001888 <detect_N_current_zerocrossings+0x7c>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=falling_polarity;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	4413      	add	r3, r2
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2020 	strb.w	r2, [r3, #32]
					currx->numberof_zerocrossings++;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001892:	e030      	b.n	80018f6 <detect_N_current_zerocrossings+0xea>
			if((int32_t)(ticks-(currx->zerocrossings_tick[currx->numberof_zerocrossings-1]))>lowpassfilter_ticks){ //not the first zerocrossing, compare with the previous one to filter noisy signals
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3202      	adds	r2, #2
 800189e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	dd25      	ble.n	80018f6 <detect_N_current_zerocrossings+0xea>
					currx->zerocrossings_tick[currx->numberof_zerocrossings]=ticks;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3202      	adds	r2, #2
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if(currx->two_samples_buffer[0]>currx->two_samples_buffer[1]){
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	dd07      	ble.n	80018de <detect_N_current_zerocrossings+0xd2>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=rising_polarity;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	4413      	add	r3, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2020 	strb.w	r2, [r3, #32]
 80018dc:	e006      	b.n	80018ec <detect_N_current_zerocrossings+0xe0>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=falling_polarity;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4413      	add	r3, r2
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]
					currx->numberof_zerocrossings++;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <detect_N_hall_zerocrossings>:

/**
* \brief
* \param
*/
void detect_N_hall_zerocrossings(uint32_t ticks,hall_measurements_struct* hallx,uint32_t N){
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
	if(hallx->two_samples_buffer[0]!=hallx->two_samples_buffer[1]){
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	429a      	cmp	r2, r3
 800191c:	d022      	beq.n	8001964 <detect_N_hall_zerocrossings+0x62>
		if(hallx->numberof_zerocrossings<N){
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	d91d      	bls.n	8001964 <detect_N_hall_zerocrossings+0x62>
			hallx->zerocrossings_tick[hallx->numberof_zerocrossings]=ticks;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]
			if(hallx->two_samples_buffer[0]!=0){
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <detect_N_hall_zerocrossings+0x4c>
				hallx->zerocrossings_polarity[hallx->numberof_zerocrossings]=rising_polarity;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	4413      	add	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	771a      	strb	r2, [r3, #28]
 800194c:	e005      	b.n	800195a <detect_N_hall_zerocrossings+0x58>
			}else{
				hallx->zerocrossings_polarity[hallx->numberof_zerocrossings]=falling_polarity;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	4413      	add	r3, r2
 8001956:	2201      	movs	r2, #1
 8001958:	771a      	strb	r2, [r3, #28]
			}
			hallx->numberof_zerocrossings++;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <calculateElectricPeriod_inTicks>:

/**
* \brief
* \param
*/
void calculateElectricPeriod_inTicks(hall_detection_general_struct *gen, uint32_t samples){
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	uint32_t averagedsemiPeriod=0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < samples-1; ++i) {
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	e055      	b.n	8001a30 <calculateElectricPeriod_inTicks+0xc0>
		averagedsemiPeriod+=(gen->currA.zerocrossings_tick[i+1]-gen->currA.zerocrossings_tick[i]);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3301      	adds	r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	3302      	adds	r3, #2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3302      	adds	r3, #2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(gen->currB.zerocrossings_tick[i+1]-gen->currB.zerocrossings_tick[i]);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	320e      	adds	r2, #14
 80019ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	310e      	adds	r1, #14
 80019b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(gen->hallA.zerocrossings_tick[i+1]-gen->hallA.zerocrossings_tick[i]);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3301      	adds	r3, #1
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	3322      	adds	r3, #34	; 0x22
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3322      	adds	r3, #34	; 0x22
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(gen->hallB.zerocrossings_tick[i+1]-gen->hallB.zerocrossings_tick[i]);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3301      	adds	r3, #1
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	332c      	adds	r3, #44	; 0x2c
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	332c      	adds	r3, #44	; 0x2c
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(gen->hallC.zerocrossings_tick[i+1]-gen->hallC.zerocrossings_tick[i]);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	3336      	adds	r3, #54	; 0x36
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3336      	adds	r3, #54	; 0x36
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < samples-1; ++i) {
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d3a4      	bcc.n	8001984 <calculateElectricPeriod_inTicks+0x14>
	}

	averagedsemiPeriod/=(samples-1);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	60fb      	str	r3, [r7, #12]
	averagedsemiPeriod/=5;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <calculateElectricPeriod_inTicks+0x104>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	60fb      	str	r3, [r7, #12]

	gen->results[gen->numberOfresults].electricPeriod_ticks=averagedsemiPeriod*2; //FOR torrot emulated this should be 66*2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	0052      	lsls	r2, r2, #1
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	3315      	adds	r3, #21
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	440b      	add	r3, r1
 8001a64:	3304      	adds	r3, #4
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	cccccccd 	.word	0xcccccccd

08001a78 <is_deviation_from_period_acceptable>:
* \brief
* \param
*/


detection_YES_NO is_deviation_from_period_acceptable(hall_detection_general_struct *gen, float tolerance_factor,uint32_t samples){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a84:	6079      	str	r1, [r7, #4]
	float _semiperiod=gen->results[gen->numberOfresults].electricPeriod_ticks/2.0;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	3315      	adds	r3, #21
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
 8001a94:	3304      	adds	r3, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fcf7 	bl	800048c <__aeabi_ui2d>
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa6:	f7fe fe95 	bl	80007d4 <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe ff9f 	bl	80009f4 <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	623b      	str	r3, [r7, #32]
	uint32_t _deviation_top=	_semiperiod +_semiperiod*tolerance_factor;
 8001aba:	ed97 7a08 	vldr	s14, [r7, #32]
 8001abe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	61fb      	str	r3, [r7, #28]
	uint32_t _deviation_bottom=	_semiperiod	-_semiperiod*tolerance_factor;
 8001ad8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	61bb      	str	r3, [r7, #24]
	uint32_t _sampled_period=0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]

	for (uint32_t i = 0; i < samples-1; ++i) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	e034      	b.n	8001b6a <is_deviation_from_period_acceptable+0xf2>
		_sampled_period=(gen->currA.zerocrossings_tick[i+1]-gen->currA.zerocrossings_tick[i]);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3301      	adds	r3, #1
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	3302      	adds	r3, #2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	3302      	adds	r3, #2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
		if((_sampled_period<(_deviation_bottom))||(_sampled_period>(_deviation_top))){
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d303      	bcc.n	8001b2e <is_deviation_from_period_acceptable+0xb6>
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d901      	bls.n	8001b32 <is_deviation_from_period_acceptable+0xba>
			return NO;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e021      	b.n	8001b76 <is_deviation_from_period_acceptable+0xfe>
		}

		_sampled_period=(gen->currC.zerocrossings_tick[i+1]-gen->currC.zerocrossings_tick[i]);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3318      	adds	r3, #24
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
		if((_sampled_period<(_deviation_bottom))||(_sampled_period>(_deviation_top))){
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d303      	bcc.n	8001b60 <is_deviation_from_period_acceptable+0xe8>
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d901      	bls.n	8001b64 <is_deviation_from_period_acceptable+0xec>
			return NO;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e008      	b.n	8001b76 <is_deviation_from_period_acceptable+0xfe>
	for (uint32_t i = 0; i < samples-1; ++i) {
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3c5      	bcc.n	8001b00 <is_deviation_from_period_acceptable+0x88>
		}
	}
	return YES;//acceptable
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <are_all_periods_stable>:

/**
* \brief
* \param
*/
detection_YES_NO are_all_periods_stable(hall_detection_general_struct *gen, uint32_t samples){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
			calculateElectricPeriod_inTicks(gen,samples);
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff feef 	bl	8001970 <calculateElectricPeriod_inTicks>
	return 	is_deviation_from_period_acceptable(gen,TOLERANCE_FACTOR_FOR_STATIONARY_CURRENTS,samples);
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001ba8 <are_all_periods_stable+0x28>
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff6d 	bl	8001a78 <is_deviation_from_period_acceptable>
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	3dcccccd 	.word	0x3dcccccd

08001bac <absolute>:
/**
* \brief
* \param
*/

int32_t absolute(int32_t x){
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    return (int32_t)x < (int32_t)0 ? -x : x;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bfb8      	it	lt
 8001bba:	425b      	neglt	r3, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <assign_closest_phase_to_hall>:
//
/**
* \brief
* \param
*/
void assign_closest_phase_to_hall(hall_detection_general_struct *gen){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	; 0x38
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

	for (uint32_t i = 0; i < MAXZEROCROSSINGS; ++i) {// all zerocrossings loop
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd4:	e0e0      	b.n	8001d98 <assign_closest_phase_to_hall+0x1d0>
		gen->differences_phaseA[phase_A]+=absolute((int32_t)gen->currA.zerocrossings_tick[i]-(int32_t)gen->hallA.zerocrossings_tick[i]);
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	3302      	adds	r3, #2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4619      	mov	r1, r3
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	3322      	adds	r3, #34	; 0x22
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	1acb      	subs	r3, r1, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ffda 	bl	8001bac <absolute>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		gen->differences_phaseA[phase_B]+=absolute((int32_t)gen->currA.zerocrossings_tick[i]-(int32_t)gen->hallB.zerocrossings_tick[i]);
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4619      	mov	r1, r3
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	332c      	adds	r3, #44	; 0x2c
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	1acb      	subs	r3, r1, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ffc1 	bl	8001bac <absolute>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001c32:	441a      	add	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		gen->differences_phaseA[phase_C]+=absolute((int32_t)gen->currA.zerocrossings_tick[i]-(int32_t)gen->hallC.zerocrossings_tick[i]);
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3e:	3302      	adds	r3, #2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4619      	mov	r1, r3
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	3336      	adds	r3, #54	; 0x36
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	1acb      	subs	r3, r1, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffa8 	bl	8001bac <absolute>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c64:	441a      	add	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		gen->differences_phaseB[phase_A]+=absolute((int32_t)gen->currB.zerocrossings_tick[i]-(int32_t)gen->hallA.zerocrossings_tick[i]);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c70:	320e      	adds	r2, #14
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	4619      	mov	r1, r3
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	3322      	adds	r3, #34	; 0x22
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	1acb      	subs	r3, r1, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff90 	bl	8001bac <absolute>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c94:	441a      	add	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		gen->differences_phaseB[phase_B]+=absolute((int32_t)gen->currB.zerocrossings_tick[i]-(int32_t)gen->hallB.zerocrossings_tick[i]);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca0:	320e      	adds	r2, #14
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	332c      	adds	r3, #44	; 0x2c
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	1acb      	subs	r3, r1, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff78 	bl	8001bac <absolute>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001cc4:	441a      	add	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		gen->differences_phaseB[phase_C]+=absolute((int32_t)gen->currB.zerocrossings_tick[i]-(int32_t)gen->hallC.zerocrossings_tick[i]);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd0:	320e      	adds	r2, #14
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	3336      	adds	r3, #54	; 0x36
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	1acb      	subs	r3, r1, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff60 	bl	8001bac <absolute>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001cf4:	441a      	add	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		gen->differences_phaseC[phase_A]+=absolute((int32_t)gen->currC.zerocrossings_tick[i]-(int32_t)gen->hallA.zerocrossings_tick[i]);
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d00:	3318      	adds	r3, #24
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	3322      	adds	r3, #34	; 0x22
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	1acb      	subs	r3, r1, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff47 	bl	8001bac <absolute>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001d26:	441a      	add	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		gen->differences_phaseC[phase_B]+=absolute((int32_t)gen->currC.zerocrossings_tick[i]-(int32_t)gen->hallB.zerocrossings_tick[i]);
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	3318      	adds	r3, #24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	332c      	adds	r3, #44	; 0x2c
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	1acb      	subs	r3, r1, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff2e 	bl	8001bac <absolute>
 8001d50:	4602      	mov	r2, r0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001d58:	441a      	add	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		gen->differences_phaseC[phase_C]+=absolute((int32_t)gen->currC.zerocrossings_tick[i]-(int32_t)gen->hallC.zerocrossings_tick[i]);
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	3318      	adds	r3, #24
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	3336      	adds	r3, #54	; 0x36
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	1acb      	subs	r3, r1, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff15 	bl	8001bac <absolute>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001d8a:	441a      	add	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	for (uint32_t i = 0; i < MAXZEROCROSSINGS; ++i) {// all zerocrossings loop
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	3301      	adds	r3, #1
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	f67f af1b 	bls.w	8001bd6 <assign_closest_phase_to_hall+0xe>
	}

	int32_t _bottom_limit	=(int32_t)((gen->results[gen->numberOfresults].electricPeriod_ticks/2)*0.95);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	3315      	adds	r3, #21
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb69 	bl	800048c <__aeabi_ui2d>
 8001dba:	a3ac      	add	r3, pc, #688	; (adr r3, 800206c <assign_closest_phase_to_hall+0x4a4>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fbde 	bl	8000580 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fdea 	bl	80009a4 <__aeabi_d2iz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]
	int32_t _top_limit		=(int32_t)(gen->results[gen->numberOfresults].electricPeriod_ticks);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	3315      	adds	r3, #21
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
 8001dec:	e0ad      	b.n	8001f4a <assign_closest_phase_to_hall+0x382>
		gen->differences_phaseA[i]/=MAXZEROCROSSINGS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df2:	3240      	adds	r2, #64	; 0x40
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	4a9b      	ldr	r2, [pc, #620]	; (8002068 <assign_closest_phase_to_hall+0x4a0>)
 8001dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dfe:	17db      	asrs	r3, r3, #31
 8001e00:	1ad1      	subs	r1, r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e06:	3240      	adds	r2, #64	; 0x40
 8001e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gen->differences_phaseB[i]/=MAXZEROCROSSINGS;
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	3342      	adds	r3, #66	; 0x42
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a93      	ldr	r2, [pc, #588]	; (8002068 <assign_closest_phase_to_hall+0x4a0>)
 8001e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1e:	17db      	asrs	r3, r3, #31
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	3342      	adds	r3, #66	; 0x42
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	605a      	str	r2, [r3, #4]
		gen->differences_phaseC[i]/=MAXZEROCROSSINGS;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e32:	3246      	adds	r2, #70	; 0x46
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	4a8b      	ldr	r2, [pc, #556]	; (8002068 <assign_closest_phase_to_hall+0x4a0>)
 8001e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3e:	17db      	asrs	r3, r3, #31
 8001e40:	1ad1      	subs	r1, r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e46:	3246      	adds	r2, #70	; 0x46
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//sometimes the toggled polarity is detected from a non relevant phase, in this case we are wrongly applying te toggle, TODO lets increase the toogle array, and make it case sensitive, if the togled signals is actually the one we use do something if not just do nothing
		if(gen->differences_phaseA[i]>_bottom_limit && gen->differences_phaseA[i]<_top_limit){
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e50:	3240      	adds	r2, #64	; 0x40
 8001e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	da1f      	bge.n	8001e9c <assign_closest_phase_to_hall+0x2d4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e60:	3240      	adds	r2, #64	; 0x40
 8001e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dd17      	ble.n	8001e9c <assign_closest_phase_to_hall+0x2d4>
			gen->differences_phaseA[i]%=_bottom_limit;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e70:	3240      	adds	r2, #64	; 0x40
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	fb01 f202 	mul.w	r2, r1, r2
 8001e82:	1a99      	subs	r1, r3, r2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e88:	3240      	adds	r2, #64	; 0x40
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gen->shifted_polarity[hall_A][i]=1;
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	3348      	adds	r3, #72	; 0x48
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	2201      	movs	r2, #1
 8001e9a:	605a      	str	r2, [r3, #4]
		}

		if(gen->differences_phaseB[i]>_bottom_limit && gen->differences_phaseB[i]<_top_limit){
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	3342      	adds	r3, #66	; 0x42
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	da22      	bge.n	8001ef4 <assign_closest_phase_to_hall+0x32c>
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	3342      	adds	r3, #66	; 0x42
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dd19      	ble.n	8001ef4 <assign_closest_phase_to_hall+0x32c>
			gen->differences_phaseB[i]%=_bottom_limit;
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	3342      	adds	r3, #66	; 0x42
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	fb93 f2f2 	sdiv	r2, r3, r2
 8001ed2:	6939      	ldr	r1, [r7, #16]
 8001ed4:	fb01 f202 	mul.w	r2, r1, r2
 8001ed8:	1a9a      	subs	r2, r3, r2
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	3342      	adds	r3, #66	; 0x42
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	605a      	str	r2, [r3, #4]
			gen->shifted_polarity[hall_B][i]=1;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	334b      	adds	r3, #75	; 0x4b
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	605a      	str	r2, [r3, #4]
		}

		if(gen->differences_phaseC[i]>_bottom_limit && gen->differences_phaseC[i]<_top_limit){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ef8:	3246      	adds	r2, #70	; 0x46
 8001efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da1f      	bge.n	8001f44 <assign_closest_phase_to_hall+0x37c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f08:	3246      	adds	r2, #70	; 0x46
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dd17      	ble.n	8001f44 <assign_closest_phase_to_hall+0x37c>
			gen->differences_phaseC[i]%=_bottom_limit;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f18:	3246      	adds	r2, #70	; 0x46
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	fb93 f2f2 	sdiv	r2, r3, r2
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	fb01 f202 	mul.w	r2, r1, r2
 8001f2a:	1a99      	subs	r1, r3, r2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f30:	3246      	adds	r2, #70	; 0x46
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gen->shifted_polarity[hall_C][i]=1;
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	334e      	adds	r3, #78	; 0x4e
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	2201      	movs	r2, #1
 8001f42:	605a      	str	r2, [r3, #4]
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	3301      	adds	r3, #1
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	f67f af4e 	bls.w	8001dee <assign_closest_phase_to_hall+0x226>
		}
	}

	int32_t minimum=0xFF;
 8001f52:	23ff      	movs	r3, #255	; 0xff
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5a:	e010      	b.n	8001f7e <assign_closest_phase_to_hall+0x3b6>
		if(gen->differences_phaseA[i]<minimum){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f60:	3240      	adds	r2, #64	; 0x40
 8001f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dd05      	ble.n	8001f78 <assign_closest_phase_to_hall+0x3b0>
			minimum=gen->differences_phaseA[i];
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f70:	3240      	adds	r2, #64	; 0x40
 8001f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d9eb      	bls.n	8001f5c <assign_closest_phase_to_hall+0x394>
		}
	}
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	e016      	b.n	8001fb8 <assign_closest_phase_to_hall+0x3f0>
		if(gen->differences_phaseA[i]==minimum){
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	3240      	adds	r2, #64	; 0x40
 8001f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d10b      	bne.n	8001fb2 <assign_closest_phase_to_hall+0x3ea>
			gen->results[gen->numberOfresults].hall_order[i]=phase_A;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	441a      	add	r2, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d9e5      	bls.n	8001f8a <assign_closest_phase_to_hall+0x3c2>
		}
	}

	minimum=0xFF;
 8001fbe:	23ff      	movs	r3, #255	; 0xff
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	e012      	b.n	8001fee <assign_closest_phase_to_hall+0x426>
		if(gen->differences_phaseB[i]<minimum){
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	3342      	adds	r3, #66	; 0x42
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dd06      	ble.n	8001fe8 <assign_closest_phase_to_hall+0x420>
			minimum=gen->differences_phaseB[i];
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	3342      	adds	r3, #66	; 0x42
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	3301      	adds	r3, #1
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d9e9      	bls.n	8001fc8 <assign_closest_phase_to_hall+0x400>
		}
	}
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e017      	b.n	800202a <assign_closest_phase_to_hall+0x462>
		if(gen->differences_phaseB[i]==minimum){
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3342      	adds	r3, #66	; 0x42
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002008:	429a      	cmp	r2, r3
 800200a:	d10b      	bne.n	8002024 <assign_closest_phase_to_hall+0x45c>
			gen->results[gen->numberOfresults].hall_order[i]=phase_B;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	441a      	add	r2, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3301      	adds	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d9e4      	bls.n	8001ffa <assign_closest_phase_to_hall+0x432>
		}
	}

	minimum=0xFF;
 8002030:	23ff      	movs	r3, #255	; 0xff
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	e010      	b.n	800205c <assign_closest_phase_to_hall+0x494>
		if(gen->differences_phaseC[i]<minimum){
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	3246      	adds	r2, #70	; 0x46
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002046:	429a      	cmp	r2, r3
 8002048:	dd05      	ble.n	8002056 <assign_closest_phase_to_hall+0x48e>
			minimum=gen->differences_phaseC[i];
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	3246      	adds	r2, #70	; 0x46
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3301      	adds	r3, #1
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d9eb      	bls.n	800203a <assign_closest_phase_to_hall+0x472>
		}
	}
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e01c      	b.n	80020a2 <assign_closest_phase_to_hall+0x4da>
 8002068:	2aaaaaab 	.word	0x2aaaaaab
 800206c:	66666666 	.word	0x66666666
 8002070:	3fee6666 	.word	0x3fee6666
		if(gen->differences_phaseC[i]==minimum){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	3246      	adds	r2, #70	; 0x46
 800207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002080:	429a      	cmp	r2, r3
 8002082:	d10b      	bne.n	800209c <assign_closest_phase_to_hall+0x4d4>
			gen->results[gen->numberOfresults].hall_order[i]=phase_C;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	441a      	add	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4413      	add	r3, r2
 8002094:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002098:	2202      	movs	r2, #2
 800209a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBEROFPHASES; ++i) {
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d9e5      	bls.n	8002074 <assign_closest_phase_to_hall+0x4ac>
		}
	}

}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3738      	adds	r7, #56	; 0x38
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop

080020b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b8:	f000 faa0 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020bc:	f000 f82a 	bl	8002114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c0:	f7fe ff5e 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 80020c4:	f7fe ff3c 	bl	8000f40 <MX_DMA_Init>
  MX_ADC1_Init();
 80020c8:	f7fe fe62 	bl	8000d90 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80020cc:	f000 f9fa 	bl	80024c4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80020d0:	f000 f980 	bl	80023d4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
 HAL_ADC_Start_DMA(&hadc1, ADCreadings, numberofADCchannels);
 80020d4:	2202      	movs	r2, #2
 80020d6:	490b      	ldr	r1, [pc, #44]	; (8002104 <main+0x50>)
 80020d8:	480b      	ldr	r0, [pc, #44]	; (8002108 <main+0x54>)
 80020da:	f000 fb69 	bl	80027b0 <HAL_ADC_Start_DMA>
 HAL_TIM_Base_Start_IT(&htim8);
 80020de:	480b      	ldr	r0, [pc, #44]	; (800210c <main+0x58>)
 80020e0:	f002 fc2e 	bl	8004940 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 Hall_start_detection();
 80020e4:	f7fe ffd2 	bl	800108c <Hall_start_detection>
  while (1)
  {
	  if(Hall_is_detection_finished()){
 80020e8:	f7fe ffdc 	bl	80010a4 <Hall_is_detection_finished>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0fa      	beq.n	80020e8 <main+0x34>
		  HAL_Delay(70);
 80020f2:	2046      	movs	r0, #70	; 0x46
 80020f4:	f000 faf4 	bl	80026e0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80020f8:	2120      	movs	r1, #32
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <main+0x5c>)
 80020fc:	f001 fd7d 	bl	8003bfa <HAL_GPIO_TogglePin>
	  if(Hall_is_detection_finished()){
 8002100:	e7f2      	b.n	80020e8 <main+0x34>
 8002102:	bf00      	nop
 8002104:	200002a8 	.word	0x200002a8
 8002108:	20000040 	.word	0x20000040
 800210c:	200002b8 	.word	0x200002b8
 8002110:	40020000 	.word	0x40020000

08002114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b094      	sub	sp, #80	; 0x50
 8002118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	2234      	movs	r2, #52	; 0x34
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fc0a 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <SystemClock_Config+0xdc>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <SystemClock_Config+0xdc>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
 8002148:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <SystemClock_Config+0xdc>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <SystemClock_Config+0xe0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <SystemClock_Config+0xe0>)
 800215e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <SystemClock_Config+0xe0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002170:	2302      	movs	r3, #2
 8002172:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002174:	2301      	movs	r3, #1
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002178:	2310      	movs	r3, #16
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217c:	2302      	movs	r3, #2
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002180:	2300      	movs	r3, #0
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002184:	2308      	movs	r3, #8
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002188:	23b4      	movs	r3, #180	; 0xb4
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800218c:	2302      	movs	r3, #2
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002190:	2302      	movs	r3, #2
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002194:	2302      	movs	r3, #2
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4618      	mov	r0, r3
 800219e:	f002 f8e1 	bl	8004364 <HAL_RCC_OscConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021a8:	f000 f826 	bl	80021f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021ac:	f001 fd40 	bl	8003c30 <HAL_PWREx_EnableOverDrive>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021b6:	f000 f81f 	bl	80021f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ba:	230f      	movs	r3, #15
 80021bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021be:	2302      	movs	r3, #2
 80021c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	2105      	movs	r1, #5
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 fd79 	bl	8003cd0 <HAL_RCC_ClockConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021e4:	f000 f808 	bl	80021f8 <Error_Handler>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3750      	adds	r7, #80	; 0x50
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40007000 	.word	0x40007000

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	e7fe      	b.n	8002200 <Error_Handler+0x8>
	...

08002204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_MspInit+0x4c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_MspInit+0x4c>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002242:	2007      	movs	r0, #7
 8002244:	f000 ff62 	bl	800310c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f000 f9fe 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

	//read all hall gpios before handling the algorythm
	H1.state=HAL_GPIO_ReadPin(H1.gpio_port, H1.gpio_pin);
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <TIM8_UP_TIM13_IRQHandler+0xd8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a33      	ldr	r2, [pc, #204]	; (8002380 <TIM8_UP_TIM13_IRQHandler+0xd8>)
 80022b4:	8892      	ldrh	r2, [r2, #4]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 fc6d 	bl	8003b98 <HAL_GPIO_ReadPin>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <TIM8_UP_TIM13_IRQHandler+0xd8>)
 80022c4:	71da      	strb	r2, [r3, #7]
	H2.state=HAL_GPIO_ReadPin(H2.gpio_port, H2.gpio_pin);
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <TIM8_UP_TIM13_IRQHandler+0xdc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <TIM8_UP_TIM13_IRQHandler+0xdc>)
 80022cc:	8892      	ldrh	r2, [r2, #4]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fc61 	bl	8003b98 <HAL_GPIO_ReadPin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <TIM8_UP_TIM13_IRQHandler+0xdc>)
 80022dc:	71da      	strb	r2, [r3, #7]
	H3.state=HAL_GPIO_ReadPin(H3.gpio_port, H3.gpio_pin);
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <TIM8_UP_TIM13_IRQHandler+0xe0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a29      	ldr	r2, [pc, #164]	; (8002388 <TIM8_UP_TIM13_IRQHandler+0xe0>)
 80022e4:	8892      	ldrh	r2, [r2, #4]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fc55 	bl	8003b98 <HAL_GPIO_ReadPin>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <TIM8_UP_TIM13_IRQHandler+0xe0>)
 80022f4:	71da      	strb	r2, [r3, #7]

	//translate all currents to more coherent 1.0 float values isntead of raw ADC values
	translated_to_float_current0=(float)((int32_t)ADCreadings[0]-(float)0xFFF/2.0)/20.0;// making up the gain to "look" coherent to real measurements but is not exact
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <TIM8_UP_TIM13_IRQHandler+0xe4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f8d6 	bl	80004ac <__aeabi_i2d>
 8002300:	a31d      	add	r3, pc, #116	; (adr r3, 8002378 <TIM8_UP_TIM13_IRQHandler+0xd0>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ff83 	bl	8000210 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fb6f 	bl	80009f4 <__aeabi_d2f>
 8002316:	ee06 0a90 	vmov	s13, r0
 800231a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800231e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <TIM8_UP_TIM13_IRQHandler+0xe8>)
 8002324:	edc3 7a00 	vstr	s15, [r3]
	translated_to_float_current1=(float)((int32_t)ADCreadings[1]-(float)0xFFF/2.0)/20.0;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <TIM8_UP_TIM13_IRQHandler+0xe4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f8bd 	bl	80004ac <__aeabi_i2d>
 8002332:	a311      	add	r3, pc, #68	; (adr r3, 8002378 <TIM8_UP_TIM13_IRQHandler+0xd0>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fd ff6a 	bl	8000210 <__aeabi_dsub>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fb56 	bl	80009f4 <__aeabi_d2f>
 8002348:	ee06 0a90 	vmov	s13, r0
 800234c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <TIM8_UP_TIM13_IRQHandler+0xec>)
 8002356:	edc3 7a00 	vstr	s15, [r3]

	//alright, now run the algorythm
	Hall_Identification_Test_measurement(&H1,&H2,&H3,&translated_to_float_current0,&translated_to_float_current1);
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <TIM8_UP_TIM13_IRQHandler+0xec>)
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <TIM8_UP_TIM13_IRQHandler+0xe8>)
 8002360:	4a09      	ldr	r2, [pc, #36]	; (8002388 <TIM8_UP_TIM13_IRQHandler+0xe0>)
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <TIM8_UP_TIM13_IRQHandler+0xdc>)
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <TIM8_UP_TIM13_IRQHandler+0xd8>)
 8002366:	f7fe fead 	bl	80010c4 <Hall_Identification_Test_measurement>

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800236a:	480b      	ldr	r0, [pc, #44]	; (8002398 <TIM8_UP_TIM13_IRQHandler+0xf0>)
 800236c:	f002 fb58 	bl	8004a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	00000000 	.word	0x00000000
 800237c:	409ffe00 	.word	0x409ffe00
 8002380:	20000000 	.word	0x20000000
 8002384:	20000008 	.word	0x20000008
 8002388:	20000010 	.word	0x20000010
 800238c:	200002a8 	.word	0x200002a8
 8002390:	200002b0 	.word	0x200002b0
 8002394:	200002b4 	.word	0x200002b4
 8002398:	200002b8 	.word	0x200002b8

0800239c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <DMA2_Stream0_IRQHandler+0x10>)
 80023a2:	f000 fffb 	bl	800339c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000088 	.word	0x20000088

080023b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e8:	463b      	mov	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <MX_TIM8_Init+0x98>)
 80023f2:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <MX_TIM8_Init+0x9c>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <MX_TIM8_Init+0x98>)
 80023f8:	22b3      	movs	r2, #179	; 0xb3
 80023fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <MX_TIM8_Init+0x98>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_TIM8_Init+0x98>)
 8002404:	2231      	movs	r2, #49	; 0x31
 8002406:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_TIM8_Init+0x98>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_TIM8_Init+0x98>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <MX_TIM8_Init+0x98>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <MX_TIM8_Init+0x98>)
 800241c:	f002 fa40 	bl	80048a0 <HAL_TIM_Base_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8002426:	f7ff fee7 	bl	80021f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002430:	f107 0308 	add.w	r3, r7, #8
 8002434:	4619      	mov	r1, r3
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <MX_TIM8_Init+0x98>)
 8002438:	f002 fbfa 	bl	8004c30 <HAL_TIM_ConfigClockSource>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 8002442:	f7ff fed9 	bl	80021f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002446:	2320      	movs	r3, #32
 8002448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800244e:	463b      	mov	r3, r7
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <MX_TIM8_Init+0x98>)
 8002454:	f002 fe20 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 800245e:	f7ff fecb 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200002b8 	.word	0x200002b8
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_TIM_Base_MspInit+0x48>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d115      	bne.n	80024b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_TIM_Base_MspInit+0x4c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	202c      	movs	r0, #44	; 0x2c
 80024a8:	f000 fe3b 	bl	8003122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80024ac:	202c      	movs	r0, #44	; 0x2c
 80024ae:	f000 fe54 	bl	800315a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40010400 	.word	0x40010400
 80024c0:	40023800 	.word	0x40023800

080024c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <MX_USART2_UART_Init+0x50>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024fa:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_USART2_UART_Init+0x4c>)
 80024fc:	f002 fe5c 	bl	80051b8 <HAL_UART_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002506:	f7ff fe77 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000300 	.word	0x20000300
 8002514:	40004400 	.word	0x40004400

08002518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_UART_MspInit+0x84>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12b      	bne.n	8002592 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_UART_MspInit+0x88>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_UART_MspInit+0x88>)
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_UART_MspInit+0x88>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_UART_MspInit+0x88>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_UART_MspInit+0x88>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_UART_MspInit+0x88>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002572:	230c      	movs	r3, #12
 8002574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002582:	2307      	movs	r3, #7
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <HAL_UART_MspInit+0x8c>)
 800258e:	f001 f96f 	bl	8003870 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40004400 	.word	0x40004400
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020000 	.word	0x40020000

080025a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ae:	490e      	ldr	r1, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c4:	4c0b      	ldr	r4, [pc, #44]	; (80025f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d2:	f7ff feed 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f003 f9b9 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025da:	f7ff fd6b 	bl	80020b4 <main>
  bx  lr    
 80025de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80025ec:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 80025f0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80025f4:	20000348 	.word	0x20000348

080025f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC_IRQHandler>
	...

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <HAL_Init+0x40>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_Init+0x40>)
 8002612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_Init+0x40>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f000 fd71 	bl	800310c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262a:	2000      	movs	r0, #0
 800262c:	f000 f808 	bl	8002640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7ff fde8 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00

08002640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x54>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002656:	fbb3 f3f1 	udiv	r3, r3, r1
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fd89 	bl	8003176 <HAL_SYSTICK_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00e      	b.n	800268c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d80a      	bhi.n	800268a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f000 fd51 	bl	8003122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002680:	4a06      	ldr	r2, [pc, #24]	; (800269c <HAL_InitTick+0x5c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000018 	.word	0x20000018
 8002698:	20000020 	.word	0x20000020
 800269c:	2000001c 	.word	0x2000001c

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000020 	.word	0x20000020
 80026c4:	20000344 	.word	0x20000344

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000344 	.word	0x20000344

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000020 	.word	0x20000020

08002728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e033      	b.n	80027a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fb82 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276e:	f023 0302 	bic.w	r3, r3, #2
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa78 	bl	8002c70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	e001      	b.n	800279c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Start_DMA+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0e9      	b.n	80029a2 <HAL_ADC_Start_DMA+0x1f2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d018      	beq.n	8002816 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_ADC_Start_DMA+0x1fc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6d      	ldr	r2, [pc, #436]	; (80029b0 <HAL_ADC_Start_DMA+0x200>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9a      	lsrs	r2, r3, #18
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	3b01      	subs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002824:	d107      	bne.n	8002836 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002834:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80a1 	bne.w	8002988 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002870:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d106      	bne.n	8002894 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f023 0206 	bic.w	r2, r3, #6
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
 8002892:	e002      	b.n	800289a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_ADC_Start_DMA+0x204>)
 80028a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	4a43      	ldr	r2, [pc, #268]	; (80029b8 <HAL_ADC_Start_DMA+0x208>)
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	4a42      	ldr	r2, [pc, #264]	; (80029bc <HAL_ADC_Start_DMA+0x20c>)
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	4a41      	ldr	r2, [pc, #260]	; (80029c0 <HAL_ADC_Start_DMA+0x210>)
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	334c      	adds	r3, #76	; 0x4c
 80028f2:	4619      	mov	r1, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f000 fcf8 	bl	80032ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2b00      	cmp	r3, #0
 8002906:	d12a      	bne.n	800295e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <HAL_ADC_Start_DMA+0x214>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d015      	beq.n	800293e <HAL_ADC_Start_DMA+0x18e>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <HAL_ADC_Start_DMA+0x218>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d105      	bne.n	8002928 <HAL_ADC_Start_DMA+0x178>
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_ADC_Start_DMA+0x204>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a27      	ldr	r2, [pc, #156]	; (80029cc <HAL_ADC_Start_DMA+0x21c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d136      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_ADC_Start_DMA+0x204>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d130      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d129      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e020      	b.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_ADC_Start_DMA+0x214>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d11b      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d114      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	e00b      	b.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000018 	.word	0x20000018
 80029b0:	431bde83 	.word	0x431bde83
 80029b4:	40012300 	.word	0x40012300
 80029b8:	08002e69 	.word	0x08002e69
 80029bc:	08002f23 	.word	0x08002f23
 80029c0:	08002f3f 	.word	0x08002f3f
 80029c4:	40012000 	.word	0x40012000
 80029c8:	40012100 	.word	0x40012100
 80029cc:	40012200 	.word	0x40012200

080029d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1c>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e113      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x244>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d925      	bls.n	8002a84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b1e      	subs	r3, #30
 8002a4e:	2207      	movs	r2, #7
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43da      	mvns	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68d9      	ldr	r1, [r3, #12]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4603      	mov	r3, r0
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4403      	add	r3, r0
 8002a76:	3b1e      	subs	r3, #30
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	e022      	b.n	8002aca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6919      	ldr	r1, [r3, #16]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	2207      	movs	r2, #7
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6919      	ldr	r1, [r3, #16]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4403      	add	r3, r0
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d824      	bhi.n	8002b1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b05      	subs	r3, #5
 8002ae4:	221f      	movs	r2, #31
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	400a      	ands	r2, r1
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4618      	mov	r0, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b05      	subs	r3, #5
 8002b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
 8002b1a:	e04c      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d824      	bhi.n	8002b6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	3b23      	subs	r3, #35	; 0x23
 8002b36:	221f      	movs	r2, #31
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	400a      	ands	r2, r1
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b23      	subs	r3, #35	; 0x23
 8002b60:	fa00 f203 	lsl.w	r2, r0, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6c:	e023      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b41      	subs	r3, #65	; 0x41
 8002b80:	221f      	movs	r2, #31
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b41      	subs	r3, #65	; 0x41
 8002baa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <HAL_ADC_ConfigChannel+0x250>)
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_ADC_ConfigChannel+0x254>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d10f      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d8>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b12      	cmp	r3, #18
 8002bca:	d10b      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_ADC_ConfigChannel+0x254>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d12b      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x23a>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_ADC_ConfigChannel+0x258>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0x1f4>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b11      	cmp	r3, #17
 8002bfe:	d122      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <HAL_ADC_ConfigChannel+0x258>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d111      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_ADC_ConfigChannel+0x25c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_ADC_ConfigChannel+0x260>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9a      	lsrs	r2, r3, #18
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40012300 	.word	0x40012300
 8002c60:	40012000 	.word	0x40012000
 8002c64:	10000012 	.word	0x10000012
 8002c68:	20000018 	.word	0x20000018
 8002c6c:	431bde83 	.word	0x431bde83

08002c70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <ADC_Init+0x1f0>)
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	021a      	lsls	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <ADC_Init+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e00f      	b.n	8002d6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0202 	bic.w	r2, r2, #2
 8002d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6899      	ldr	r1, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7e1b      	ldrb	r3, [r3, #24]
 8002d88:	005a      	lsls	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002daa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	035a      	lsls	r2, r3, #13
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e007      	b.n	8002de4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	051a      	lsls	r2, r3, #20
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e26:	025a      	lsls	r2, r3, #9
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	029a      	lsls	r2, r3, #10
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40012300 	.word	0x40012300
 8002e64:	0f000001 	.word	0x0f000001

08002e68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d13c      	bne.n	8002efc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d12b      	bne.n	8002ef4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d127      	bne.n	8002ef4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d119      	bne.n	8002ef4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0220 	bic.w	r2, r2, #32
 8002ece:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff fd6b 	bl	80029d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002efa:	e00e      	b.n	8002f1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fd75 	bl	80029f8 <HAL_ADC_ErrorCallback>
}
 8002f0e:	e004      	b.n	8002f1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff fd57 	bl	80029e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff fd4a 	bl	80029f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	; (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	; (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	; (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	4313      	orrs	r3, r2
         );
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	; 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d8:	d301      	bcc.n	80030de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030da:	2301      	movs	r3, #1
 80030dc:	e00f      	b.n	80030fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <SysTick_Config+0x40>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e6:	210f      	movs	r1, #15
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7ff ff8e 	bl	800300c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <SysTick_Config+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <SysTick_Config+0x40>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff29 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff3e 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff8e 	bl	8003060 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5d 	bl	800300c <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff31 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa2 	bl	80030c8 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff fa94 	bl	80026c8 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e099      	b.n	80032e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	e00f      	b.n	80031ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ce:	f7ff fa7b 	bl	80026c8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d908      	bls.n	80031ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e078      	b.n	80032e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e8      	bne.n	80031ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_DMA_Init+0x158>)
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b04      	cmp	r3, #4
 8003246:	d107      	bne.n	8003258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4313      	orrs	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0307 	bic.w	r3, r3, #7
 800326e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b04      	cmp	r3, #4
 8003280:	d117      	bne.n	80032b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa6f 	bl	8003778 <DMA_CheckFifoParam>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2240      	movs	r2, #64	; 0x40
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ae:	2301      	movs	r3, #1
 80032b0:	e016      	b.n	80032e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fa26 	bl	800370c <DMA_CalcBaseAndBitshift>
 80032c0:	4603      	mov	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	223f      	movs	r2, #63	; 0x3f
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	f010803f 	.word	0xf010803f

080032ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Start_IT+0x26>
 800330e:	2302      	movs	r3, #2
 8003310:	e040      	b.n	8003394 <HAL_DMA_Start_IT+0xa8>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d12f      	bne.n	8003386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f9b8 	bl	80036b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0216 	orr.w	r2, r2, #22
 800335a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e005      	b.n	8003392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800338e:	2302      	movs	r3, #2
 8003390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003392:	7dfb      	ldrb	r3, [r7, #23]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a8:	4b8e      	ldr	r3, [pc, #568]	; (80035e4 <HAL_DMA_IRQHandler+0x248>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a8e      	ldr	r2, [pc, #568]	; (80035e8 <HAL_DMA_IRQHandler+0x24c>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2208      	movs	r2, #8
 80033c8:	409a      	lsls	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01a      	beq.n	8003408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2208      	movs	r2, #8
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2201      	movs	r2, #1
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	2204      	movs	r2, #4
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2204      	movs	r2, #4
 8003462:	409a      	lsls	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	2210      	movs	r2, #16
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d043      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03c      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003496:	2210      	movs	r2, #16
 8003498:	409a      	lsls	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d018      	beq.n	80034de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
 80034ca:	e01f      	b.n	800350c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
 80034dc:	e016      	b.n	800350c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0208 	bic.w	r2, r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2220      	movs	r2, #32
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 808f 	beq.w	800363c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8087 	beq.w	800363c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	2220      	movs	r2, #32
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b05      	cmp	r3, #5
 8003544:	d136      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0216 	bic.w	r2, r2, #22
 8003554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_DMA_IRQHandler+0x1da>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0208 	bic.w	r2, r2, #8
 8003584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	223f      	movs	r2, #63	; 0x3f
 800358c:	409a      	lsls	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d07e      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
        }
        return;
 80035b2:	e079      	b.n	80036a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01d      	beq.n	80035fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d031      	beq.n	800363c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e02c      	b.n	800363c <HAL_DMA_IRQHandler+0x2a0>
 80035e2:	bf00      	nop
 80035e4:	20000018 	.word	0x20000018
 80035e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d023      	beq.n	800363c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e01e      	b.n	800363c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0210 	bic.w	r2, r2, #16
 800361a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	2b00      	cmp	r3, #0
 8003642:	d032      	beq.n	80036aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d022      	beq.n	8003696 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2205      	movs	r2, #5
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	3301      	adds	r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	d307      	bcc.n	8003684 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f2      	bne.n	8003668 <HAL_DMA_IRQHandler+0x2cc>
 8003682:	e000      	b.n	8003686 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003684:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
 80036a6:	e000      	b.n	80036aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a8:	bf00      	nop
    }
  }
}
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d108      	bne.n	80036f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ee:	e007      	b.n	8003700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3b10      	subs	r3, #16
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <DMA_CalcBaseAndBitshift+0x64>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003726:	4a13      	ldr	r2, [pc, #76]	; (8003774 <DMA_CalcBaseAndBitshift+0x68>)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d909      	bls.n	800374e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	1d1a      	adds	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	; 0x58
 800374c:	e007      	b.n	800375e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	aaaaaaab 	.word	0xaaaaaaab
 8003774:	080059c4 	.word	0x080059c4

08003778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11f      	bne.n	80037d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d856      	bhi.n	8003846 <DMA_CheckFifoParam+0xce>
 8003798:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <DMA_CheckFifoParam+0x28>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037c3 	.word	0x080037c3
 80037a8:	080037b1 	.word	0x080037b1
 80037ac:	08003847 	.word	0x08003847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d046      	beq.n	800384a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e043      	b.n	800384a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ca:	d140      	bne.n	800384e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d0:	e03d      	b.n	800384e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037da:	d121      	bne.n	8003820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d837      	bhi.n	8003852 <DMA_CheckFifoParam+0xda>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <DMA_CheckFifoParam+0x70>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	080037ff 	.word	0x080037ff
 80037f0:	080037f9 	.word	0x080037f9
 80037f4:	08003811 	.word	0x08003811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e030      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d025      	beq.n	8003856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380e:	e022      	b.n	8003856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003818:	d11f      	bne.n	800385a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800381e:	e01c      	b.n	800385a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d903      	bls.n	800382e <DMA_CheckFifoParam+0xb6>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d003      	beq.n	8003834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800382c:	e018      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      break;
 8003832:	e015      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e00b      	b.n	800385e <DMA_CheckFifoParam+0xe6>
      break;
 8003846:	bf00      	nop
 8003848:	e00a      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e008      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e006      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 8003852:	bf00      	nop
 8003854:	e004      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;   
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <DMA_CheckFifoParam+0xe8>
      break;
 800385e:	bf00      	nop
    }
  } 
  
  return status; 
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	e165      	b.n	8003b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	f040 8154 	bne.w	8003b52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d005      	beq.n	80038c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d130      	bne.n	8003924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	2203      	movs	r2, #3
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 0201 	and.w	r2, r3, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d017      	beq.n	8003960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d123      	bne.n	80039b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	08da      	lsrs	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3208      	adds	r2, #8
 8003974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	220f      	movs	r2, #15
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80ae 	beq.w	8003b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <HAL_GPIO_Init+0x300>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	4a5c      	ldr	r2, [pc, #368]	; (8003b70 <HAL_GPIO_Init+0x300>)
 8003a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a04:	6453      	str	r3, [r2, #68]	; 0x44
 8003a06:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <HAL_GPIO_Init+0x300>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a12:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4f      	ldr	r2, [pc, #316]	; (8003b78 <HAL_GPIO_Init+0x308>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d025      	beq.n	8003a8a <HAL_GPIO_Init+0x21a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4e      	ldr	r2, [pc, #312]	; (8003b7c <HAL_GPIO_Init+0x30c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d01f      	beq.n	8003a86 <HAL_GPIO_Init+0x216>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4d      	ldr	r2, [pc, #308]	; (8003b80 <HAL_GPIO_Init+0x310>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d019      	beq.n	8003a82 <HAL_GPIO_Init+0x212>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4c      	ldr	r2, [pc, #304]	; (8003b84 <HAL_GPIO_Init+0x314>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_GPIO_Init+0x20e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_GPIO_Init+0x318>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00d      	beq.n	8003a7a <HAL_GPIO_Init+0x20a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_GPIO_Init+0x31c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <HAL_GPIO_Init+0x206>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a49      	ldr	r2, [pc, #292]	; (8003b90 <HAL_GPIO_Init+0x320>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_GPIO_Init+0x202>
 8003a6e:	2306      	movs	r3, #6
 8003a70:	e00c      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a72:	2307      	movs	r3, #7
 8003a74:	e00a      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a76:	2305      	movs	r3, #5
 8003a78:	e008      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e004      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x21c>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	f002 0203 	and.w	r2, r2, #3
 8003a92:	0092      	lsls	r2, r2, #2
 8003a94:	4093      	lsls	r3, r2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a9c:	4935      	ldr	r1, [pc, #212]	; (8003b74 <HAL_GPIO_Init+0x304>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ace:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af8:	4a26      	ldr	r2, [pc, #152]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003afe:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_GPIO_Init+0x324>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	f67f ae96 	bls.w	800388c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	40020800 	.word	0x40020800
 8003b84:	40020c00 	.word	0x40020c00
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40021400 	.word	0x40021400
 8003b90:	40021800 	.word	0x40021800
 8003b94:	40013c00 	.word	0x40013c00

08003b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e001      	b.n	8003bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be4:	e003      	b.n	8003bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	041a      	lsls	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	619a      	str	r2, [r3, #24]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4013      	ands	r3, r2
 8003c12:	041a      	lsls	r2, r3, #16
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	887b      	ldrh	r3, [r7, #2]
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	619a      	str	r2, [r3, #24]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c5c:	f7fe fd34 	bl	80026c8 <HAL_GetTick>
 8003c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c62:	e009      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c64:	f7fe fd30 	bl	80026c8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c72:	d901      	bls.n	8003c78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e01f      	b.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d1ee      	bne.n	8003c64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c8c:	f7fe fd1c 	bl	80026c8 <HAL_GetTick>
 8003c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c92:	e009      	b.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c94:	f7fe fd18 	bl	80026c8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca2:	d901      	bls.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e007      	b.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb4:	d1ee      	bne.n	8003c94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	420e0040 	.word	0x420e0040
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	420e0044 	.word	0x420e0044

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cc      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce4:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d90c      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a58      	ldr	r2, [pc, #352]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a52      	ldr	r2, [pc, #328]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d044      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d119      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e06f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e067      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dae:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4934      	ldr	r1, [pc, #208]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc0:	f7fe fc82 	bl	80026c8 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fe fc7e 	bl	80026c8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 020c 	and.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1eb      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d20c      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f855 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1c8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fbe2 	bl	8002640 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	080059ac 	.word	0x080059ac
 8003e94:	20000018 	.word	0x20000018
 8003e98:	2000001c 	.word	0x2000001c

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000018 	.word	0x20000018

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	080059bc 	.word	0x080059bc

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	080059bc 	.word	0x080059bc

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b0ae      	sub	sp, #184	; 0xb8
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f2a:	4bcb      	ldr	r3, [pc, #812]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	f200 8206 	bhi.w	8004344 <HAL_RCC_GetSysClockFreq+0x440>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08004345 	.word	0x08004345
 8003f48:	08004345 	.word	0x08004345
 8003f4c:	08004345 	.word	0x08004345
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08004345 	.word	0x08004345
 8003f58:	08004345 	.word	0x08004345
 8003f5c:	08004345 	.word	0x08004345
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08004345 	.word	0x08004345
 8003f68:	08004345 	.word	0x08004345
 8003f6c:	08004345 	.word	0x08004345
 8003f70:	08004175 	.word	0x08004175
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4bb9      	ldr	r3, [pc, #740]	; (800425c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f7a:	e1e7      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7c:	4bb8      	ldr	r3, [pc, #736]	; (8004260 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f82:	e1e3      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4bb4      	ldr	r3, [pc, #720]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f90:	4bb1      	ldr	r3, [pc, #708]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d071      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4bae      	ldr	r3, [pc, #696]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fa8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	f04f 0000 	mov.w	r0, #0
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	0159      	lsls	r1, r3, #5
 8003fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd4:	0150      	lsls	r0, r2, #5
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4621      	mov	r1, r4
 8003fdc:	1a51      	subs	r1, r2, r1
 8003fde:	6439      	str	r1, [r7, #64]	; 0x40
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	018b      	lsls	r3, r1, #6
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffe:	4641      	mov	r1, r8
 8004000:	018a      	lsls	r2, r1, #6
 8004002:	4641      	mov	r1, r8
 8004004:	1a51      	subs	r1, r2, r1
 8004006:	63b9      	str	r1, [r7, #56]	; 0x38
 8004008:	4649      	mov	r1, r9
 800400a:	eb63 0301 	sbc.w	r3, r3, r1
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800401c:	4649      	mov	r1, r9
 800401e:	00cb      	lsls	r3, r1, #3
 8004020:	4641      	mov	r1, r8
 8004022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004026:	4641      	mov	r1, r8
 8004028:	00ca      	lsls	r2, r1, #3
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	4603      	mov	r3, r0
 8004030:	4622      	mov	r2, r4
 8004032:	189b      	adds	r3, r3, r2
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
 8004036:	462b      	mov	r3, r5
 8004038:	460a      	mov	r2, r1
 800403a:	eb42 0303 	adc.w	r3, r2, r3
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800404c:	4629      	mov	r1, r5
 800404e:	024b      	lsls	r3, r1, #9
 8004050:	4621      	mov	r1, r4
 8004052:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004056:	4621      	mov	r1, r4
 8004058:	024a      	lsls	r2, r1, #9
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004068:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800406c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004070:	f7fc fd10 	bl	8000a94 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800407e:	e067      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4b75      	ldr	r3, [pc, #468]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	67bb      	str	r3, [r7, #120]	; 0x78
 800409a:	2300      	movs	r3, #0
 800409c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800409e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	0159      	lsls	r1, r3, #5
 80040b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b4:	0150      	lsls	r0, r2, #5
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4621      	mov	r1, r4
 80040bc:	1a51      	subs	r1, r2, r1
 80040be:	62b9      	str	r1, [r7, #40]	; 0x28
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb63 0301 	sbc.w	r3, r3, r1
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80040d4:	4649      	mov	r1, r9
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	4641      	mov	r1, r8
 80040da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040de:	4641      	mov	r1, r8
 80040e0:	018a      	lsls	r2, r1, #6
 80040e2:	4641      	mov	r1, r8
 80040e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e8:	4649      	mov	r1, r9
 80040ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004102:	4692      	mov	sl, r2
 8004104:	469b      	mov	fp, r3
 8004106:	4623      	mov	r3, r4
 8004108:	eb1a 0303 	adds.w	r3, sl, r3
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	462b      	mov	r3, r5
 8004110:	eb4b 0303 	adc.w	r3, fp, r3
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004122:	4629      	mov	r1, r5
 8004124:	028b      	lsls	r3, r1, #10
 8004126:	4621      	mov	r1, r4
 8004128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800412c:	4621      	mov	r1, r4
 800412e:	028a      	lsls	r2, r1, #10
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004138:	2200      	movs	r2, #0
 800413a:	673b      	str	r3, [r7, #112]	; 0x70
 800413c:	677a      	str	r2, [r7, #116]	; 0x74
 800413e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004142:	f7fc fca7 	bl	8000a94 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4613      	mov	r3, r2
 800414c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004172:	e0eb      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004174:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d06b      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCC_GetSysClockFreq+0x354>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	2200      	movs	r2, #0
 8004194:	66bb      	str	r3, [r7, #104]	; 0x68
 8004196:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	663b      	str	r3, [r7, #96]	; 0x60
 80041a0:	2300      	movs	r3, #0
 80041a2:	667b      	str	r3, [r7, #100]	; 0x64
 80041a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	0159      	lsls	r1, r3, #5
 80041b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ba:	0150      	lsls	r0, r2, #5
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4621      	mov	r1, r4
 80041c2:	1a51      	subs	r1, r2, r1
 80041c4:	61b9      	str	r1, [r7, #24]
 80041c6:	4629      	mov	r1, r5
 80041c8:	eb63 0301 	sbc.w	r3, r3, r1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041da:	4659      	mov	r1, fp
 80041dc:	018b      	lsls	r3, r1, #6
 80041de:	4651      	mov	r1, sl
 80041e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041e4:	4651      	mov	r1, sl
 80041e6:	018a      	lsls	r2, r1, #6
 80041e8:	4651      	mov	r1, sl
 80041ea:	ebb2 0801 	subs.w	r8, r2, r1
 80041ee:	4659      	mov	r1, fp
 80041f0:	eb63 0901 	sbc.w	r9, r3, r1
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004204:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004208:	4690      	mov	r8, r2
 800420a:	4699      	mov	r9, r3
 800420c:	4623      	mov	r3, r4
 800420e:	eb18 0303 	adds.w	r3, r8, r3
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	462b      	mov	r3, r5
 8004216:	eb49 0303 	adc.w	r3, r9, r3
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004228:	4629      	mov	r1, r5
 800422a:	024b      	lsls	r3, r1, #9
 800422c:	4621      	mov	r1, r4
 800422e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004232:	4621      	mov	r1, r4
 8004234:	024a      	lsls	r2, r1, #9
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800423e:	2200      	movs	r2, #0
 8004240:	65bb      	str	r3, [r7, #88]	; 0x58
 8004242:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004248:	f7fc fc24 	bl	8000a94 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4613      	mov	r3, r2
 8004252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004256:	e065      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x420>
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b3d      	ldr	r3, [pc, #244]	; (800435c <HAL_RCC_GetSysClockFreq+0x458>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	4618      	mov	r0, r3
 800426e:	4611      	mov	r1, r2
 8004270:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
 8004276:	2300      	movs	r3, #0
 8004278:	657b      	str	r3, [r7, #84]	; 0x54
 800427a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004290:	0150      	lsls	r0, r2, #5
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4641      	mov	r1, r8
 8004298:	1a51      	subs	r1, r2, r1
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	4649      	mov	r1, r9
 800429e:	eb63 0301 	sbc.w	r3, r3, r1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042b0:	4659      	mov	r1, fp
 80042b2:	018b      	lsls	r3, r1, #6
 80042b4:	4651      	mov	r1, sl
 80042b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ba:	4651      	mov	r1, sl
 80042bc:	018a      	lsls	r2, r1, #6
 80042be:	4651      	mov	r1, sl
 80042c0:	1a54      	subs	r4, r2, r1
 80042c2:	4659      	mov	r1, fp
 80042c4:	eb63 0501 	sbc.w	r5, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	00eb      	lsls	r3, r5, #3
 80042d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	18e3      	adds	r3, r4, r3
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	464b      	mov	r3, r9
 80042e4:	eb45 0303 	adc.w	r3, r5, r3
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f6:	4629      	mov	r1, r5
 80042f8:	028b      	lsls	r3, r1, #10
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004300:	4621      	mov	r1, r4
 8004302:	028a      	lsls	r2, r1, #10
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800430c:	2200      	movs	r2, #0
 800430e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004310:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004312:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004316:	f7fc fbbd 	bl	8000a94 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4613      	mov	r3, r2
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_GetSysClockFreq+0x458>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0f1b      	lsrs	r3, r3, #28
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004342:	e003      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800434a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004350:	4618      	mov	r0, r3
 8004352:	37b8      	adds	r7, #184	; 0xb8
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400

08004364 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e28d      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8083 	beq.w	800448a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004384:	4b94      	ldr	r3, [pc, #592]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b04      	cmp	r3, #4
 800438e:	d019      	beq.n	80043c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004390:	4b91      	ldr	r3, [pc, #580]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004398:	2b08      	cmp	r3, #8
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800439c:	4b8e      	ldr	r3, [pc, #568]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a8:	d00c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d112      	bne.n	80043dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b6:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c2:	d10b      	bne.n	80043dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	4b84      	ldr	r3, [pc, #528]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05b      	beq.n	8004488 <HAL_RCC_OscConfig+0x124>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d157      	bne.n	8004488 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e25a      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x90>
 80043e6:	4b7c      	ldr	r3, [pc, #496]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7b      	ldr	r2, [pc, #492]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e01d      	b.n	8004430 <HAL_RCC_OscConfig+0xcc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0xb4>
 80043fe:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a72      	ldr	r2, [pc, #456]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e00b      	b.n	8004430 <HAL_RCC_OscConfig+0xcc>
 8004418:	4b6f      	ldr	r3, [pc, #444]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6e      	ldr	r2, [pc, #440]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6b      	ldr	r2, [pc, #428]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800442a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe f946 	bl	80026c8 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004440:	f7fe f942 	bl	80026c8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e21f      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b61      	ldr	r3, [pc, #388]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0xdc>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe f932 	bl	80026c8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fe f92e 	bl	80026c8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e20b      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x104>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d06f      	beq.n	8004576 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004496:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d017      	beq.n	80044d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044a2:	4b4d      	ldr	r3, [pc, #308]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d105      	bne.n	80044ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ae:	4b4a      	ldr	r3, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x186>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1d3      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4937      	ldr	r1, [pc, #220]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x278>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fe f8db 	bl	80026c8 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fe f8d7 	bl	80026c8 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e1b4      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4925      	ldr	r1, [pc, #148]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_RCC_OscConfig+0x278>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe f8ba 	bl	80026c8 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fe f8b6 	bl	80026c8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e193      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d036      	beq.n	80045f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCC_OscConfig+0x27c>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe f89a 	bl	80026c8 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fe f896 	bl	80026c8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e173      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x274>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x234>
 80045b6:	e01b      	b.n	80045f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fe f883 	bl	80026c8 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e00e      	b.n	80045e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fe f87f 	bl	80026c8 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d907      	bls.n	80045e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e15c      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	4b8a      	ldr	r3, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ea      	bne.n	80045c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8097 	beq.w	800472c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	4b7f      	ldr	r3, [pc, #508]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a7e      	ldr	r2, [pc, #504]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b7c      	ldr	r3, [pc, #496]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462e:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a75      	ldr	r2, [pc, #468]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004646:	f7fe f83f 	bl	80026c8 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fe f83b 	bl	80026c8 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e118      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b6c      	ldr	r3, [pc, #432]	; (8004814 <HAL_RCC_OscConfig+0x4b0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x31e>
 8004674:	4b66      	ldr	r3, [pc, #408]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	4a65      	ldr	r2, [pc, #404]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	; 0x70
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x358>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x340>
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a60      	ldr	r2, [pc, #384]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	f043 0304 	orr.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	4b5e      	ldr	r3, [pc, #376]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5d      	ldr	r2, [pc, #372]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x358>
 80046a4:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a59      	ldr	r2, [pc, #356]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a56      	ldr	r2, [pc, #344]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fe f800 	bl	80026c8 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fd fffc 	bl	80026c8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0d7      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ee      	beq.n	80046cc <HAL_RCC_OscConfig+0x368>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fd ffea 	bl	80026c8 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fd ffe6 	bl	80026c8 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0c1      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	4b40      	ldr	r3, [pc, #256]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ee      	bne.n	80046f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004720:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a3a      	ldr	r2, [pc, #232]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80ad 	beq.w	8004890 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d060      	beq.n	8004804 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d145      	bne.n	80047d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b33      	ldr	r3, [pc, #204]	; (8004818 <HAL_RCC_OscConfig+0x4b4>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd ffba 	bl	80026c8 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd ffb6 	bl	80026c8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e093      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	019b      	lsls	r3, r3, #6
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	3b01      	subs	r3, #1
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	491b      	ldr	r1, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x4b4>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd ff8b 	bl	80026c8 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fd ff87 	bl	80026c8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e064      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x452>
 80047d4:	e05c      	b.n	8004890 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_OscConfig+0x4b4>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd ff74 	bl	80026c8 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fd ff70 	bl	80026c8 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e04d      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x480>
 8004802:	e045      	b.n	8004890 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e040      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000
 8004818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800481c:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_RCC_OscConfig+0x538>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d030      	beq.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d129      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d122      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004854:	4293      	cmp	r3, r2
 8004856:	d119      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	3b01      	subs	r3, #1
 8004866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d10f      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fdd4 	bl	8002474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 faa0 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d001      	beq.n	8004958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e04e      	b.n	80049f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d022      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d01d      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d018      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d009      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x80>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d111      	bne.n	80049e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d010      	beq.n	80049f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	e007      	b.n	80049f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40010400 	.word	0x40010400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40001800 	.word	0x40001800

08004a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d122      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d11b      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0202 	mvn.w	r2, #2
 8004a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9bf 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9b1 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f9c2 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0204 	mvn.w	r2, #4
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f995 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f987 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f998 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0208 	mvn.w	r2, #8
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2204      	movs	r2, #4
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f96b 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f95d 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f96e 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0210 	mvn.w	r2, #16
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f941 	bl	8004de6 <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f933 	bl	8004dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f944 	bl	8004dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0201 	mvn.w	r2, #1
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f90d 	bl	8004dbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 faea 	bl	80051a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f909 	bl	8004e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0220 	mvn.w	r2, #32
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fab4 	bl	8005190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_ConfigClockSource+0x1c>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0b4      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x186>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c84:	d03e      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0xd4>
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8a:	f200 8087 	bhi.w	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	f000 8086 	beq.w	8004da2 <HAL_TIM_ConfigClockSource+0x172>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d87f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b70      	cmp	r3, #112	; 0x70
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ca0:	2b70      	cmp	r3, #112	; 0x70
 8004ca2:	d87b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d050      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x11a>
 8004ca8:	2b60      	cmp	r3, #96	; 0x60
 8004caa:	d877      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d03c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xfa>
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d873      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d058      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x13a>
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d86f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b30      	cmp	r3, #48	; 0x30
 8004cbe:	d064      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d86b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d060      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d867      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d05a      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	e062      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f000 f9b7 	bl	8005058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
      break;
 8004d02:	e04f      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f000 f9a0 	bl	8005058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d26:	609a      	str	r2, [r3, #8]
      break;
 8004d28:	e03c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 f914 	bl	8004f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2150      	movs	r1, #80	; 0x50
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f96d 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004d48:	e02c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 f933 	bl	8004fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2160      	movs	r1, #96	; 0x60
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f95d 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004d68:	e01c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 f8f4 	bl	8004f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f94d 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004d88:	e00c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 f944 	bl	8005022 <TIM_ITRx_SetConfig>
      break;
 8004d9a:	e003      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e000      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a40      	ldr	r2, [pc, #256]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d00f      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <TIM_Base_SetConfig+0x118>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <TIM_Base_SetConfig+0x11c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <TIM_Base_SetConfig+0x120>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02b      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d027      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <TIM_Base_SetConfig+0x118>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d023      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	; (8004f40 <TIM_Base_SetConfig+0x11c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01f      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <TIM_Base_SetConfig+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01b      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a29      	ldr	r2, [pc, #164]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d017      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <TIM_Base_SetConfig+0x128>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <TIM_Base_SetConfig+0x12c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <TIM_Base_SetConfig+0x130>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <TIM_Base_SetConfig+0x134>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <TIM_Base_SetConfig+0x138>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <TIM_Base_SetConfig+0x13c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0xf8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40010400 	.word	0x40010400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800
 8004f58:	40001800 	.word	0x40001800
 8004f5c:	40001c00 	.word	0x40001c00
 8004f60:	40002000 	.word	0x40002000

08004f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0201 	bic.w	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 030a 	bic.w	r3, r3, #10
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0210 	bic.w	r2, r3, #16
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	031b      	lsls	r3, r3, #12
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	f043 0307 	orr.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	021a      	lsls	r2, r3, #8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	431a      	orrs	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4313      	orrs	r3, r2
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e05a      	b.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d022      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d01d      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d018      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00e      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a15      	ldr	r2, [pc, #84]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10c      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4313      	orrs	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800
 8005180:	40000c00 	.word	0x40000c00
 8005184:	40010400 	.word	0x40010400
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800

08005190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e03f      	b.n	800524a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd f99a 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f929 	bl	8005454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b08a      	sub	sp, #40	; 0x28
 8005256:	af02      	add	r7, sp, #8
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b20      	cmp	r3, #32
 8005270:	d17c      	bne.n	800536c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_UART_Transmit+0x2c>
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e075      	b.n	800536e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_UART_Transmit+0x3e>
 800528c:	2302      	movs	r3, #2
 800528e:	e06e      	b.n	800536e <HAL_UART_Transmit+0x11c>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2221      	movs	r2, #33	; 0x21
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a6:	f7fd fa0f 	bl	80026c8 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	88fa      	ldrh	r2, [r7, #6]
 80052b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c0:	d108      	bne.n	80052d4 <HAL_UART_Transmit+0x82>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e003      	b.n	80052dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052e4:	e02a      	b.n	800533c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f840 	bl	8005376 <UART_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e036      	b.n	800536e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	3302      	adds	r3, #2
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	e007      	b.n	800532e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	781a      	ldrb	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3301      	adds	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1cf      	bne.n	80052e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	2140      	movs	r1, #64	; 0x40
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f810 	bl	8005376 <UART_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e006      	b.n	800536e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b090      	sub	sp, #64	; 0x40
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005386:	e050      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d04c      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005396:	f7fd f997 	bl	80026c8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d241      	bcs.n	800542a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053c6:	637a      	str	r2, [r7, #52]	; 0x34
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3314      	adds	r3, #20
 80053e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3314      	adds	r3, #20
 80053f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053fa:	623a      	str	r2, [r7, #32]
 80053fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	69f9      	ldr	r1, [r7, #28]
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	61bb      	str	r3, [r7, #24]
   return(result);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e00f      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	429a      	cmp	r2, r3
 8005446:	d09f      	beq.n	8005388 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3740      	adds	r7, #64	; 0x40
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b0c0      	sub	sp, #256	; 0x100
 800545a:	af00      	add	r7, sp, #0
 800545c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	68d9      	ldr	r1, [r3, #12]
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	ea40 0301 	orr.w	r3, r0, r1
 800547c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	431a      	orrs	r2, r3
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	431a      	orrs	r2, r3
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054ac:	f021 010c 	bic.w	r1, r1, #12
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054ba:	430b      	orrs	r3, r1
 80054bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	ea40 0301 	orr.w	r3, r0, r1
 80054da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b8f      	ldr	r3, [pc, #572]	; (8005720 <UART_SetConfig+0x2cc>)
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d005      	beq.n	80054f4 <UART_SetConfig+0xa0>
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8d      	ldr	r3, [pc, #564]	; (8005724 <UART_SetConfig+0x2d0>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d104      	bne.n	80054fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7fe fcf2 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 80054f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054fc:	e003      	b.n	8005506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054fe:	f7fe fcd9 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005510:	f040 810c 	bne.w	800572c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005518:	2200      	movs	r2, #0
 800551a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800551e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	1891      	adds	r1, r2, r2
 800552c:	65b9      	str	r1, [r7, #88]	; 0x58
 800552e:	415b      	adcs	r3, r3
 8005530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005536:	4621      	mov	r1, r4
 8005538:	eb12 0801 	adds.w	r8, r2, r1
 800553c:	4629      	mov	r1, r5
 800553e:	eb43 0901 	adc.w	r9, r3, r1
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005556:	4690      	mov	r8, r2
 8005558:	4699      	mov	r9, r3
 800555a:	4623      	mov	r3, r4
 800555c:	eb18 0303 	adds.w	r3, r8, r3
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005564:	462b      	mov	r3, r5
 8005566:	eb49 0303 	adc.w	r3, r9, r3
 800556a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800557a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800557e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005582:	460b      	mov	r3, r1
 8005584:	18db      	adds	r3, r3, r3
 8005586:	653b      	str	r3, [r7, #80]	; 0x50
 8005588:	4613      	mov	r3, r2
 800558a:	eb42 0303 	adc.w	r3, r2, r3
 800558e:	657b      	str	r3, [r7, #84]	; 0x54
 8005590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005598:	f7fb fa7c 	bl	8000a94 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4b61      	ldr	r3, [pc, #388]	; (8005728 <UART_SetConfig+0x2d4>)
 80055a2:	fba3 2302 	umull	r2, r3, r3, r2
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	011c      	lsls	r4, r3, #4
 80055aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	1891      	adds	r1, r2, r2
 80055c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80055c4:	415b      	adcs	r3, r3
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055cc:	4641      	mov	r1, r8
 80055ce:	eb12 0a01 	adds.w	sl, r2, r1
 80055d2:	4649      	mov	r1, r9
 80055d4:	eb43 0b01 	adc.w	fp, r3, r1
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ec:	4692      	mov	sl, r2
 80055ee:	469b      	mov	fp, r3
 80055f0:	4643      	mov	r3, r8
 80055f2:	eb1a 0303 	adds.w	r3, sl, r3
 80055f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055fa:	464b      	mov	r3, r9
 80055fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
 8005626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800562a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800562e:	f7fb fa31 	bl	8000a94 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4611      	mov	r1, r2
 8005638:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <UART_SetConfig+0x2d4>)
 800563a:	fba3 2301 	umull	r2, r3, r3, r1
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2264      	movs	r2, #100	; 0x64
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	1acb      	subs	r3, r1, r3
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800564e:	4b36      	ldr	r3, [pc, #216]	; (8005728 <UART_SetConfig+0x2d4>)
 8005650:	fba3 2302 	umull	r2, r3, r3, r2
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800565c:	441c      	add	r4, r3
 800565e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800566c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	1891      	adds	r1, r2, r2
 8005676:	63b9      	str	r1, [r7, #56]	; 0x38
 8005678:	415b      	adcs	r3, r3
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005680:	4641      	mov	r1, r8
 8005682:	1851      	adds	r1, r2, r1
 8005684:	6339      	str	r1, [r7, #48]	; 0x30
 8005686:	4649      	mov	r1, r9
 8005688:	414b      	adcs	r3, r1
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005698:	4659      	mov	r1, fp
 800569a:	00cb      	lsls	r3, r1, #3
 800569c:	4651      	mov	r1, sl
 800569e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a2:	4651      	mov	r1, sl
 80056a4:	00ca      	lsls	r2, r1, #3
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	4642      	mov	r2, r8
 80056ae:	189b      	adds	r3, r3, r2
 80056b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b4:	464b      	mov	r3, r9
 80056b6:	460a      	mov	r2, r1
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056d4:	460b      	mov	r3, r1
 80056d6:	18db      	adds	r3, r3, r3
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056da:	4613      	mov	r3, r2
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056ea:	f7fb f9d3 	bl	8000a94 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <UART_SetConfig+0x2d4>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	; 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	3332      	adds	r3, #50	; 0x32
 8005706:	4a08      	ldr	r2, [pc, #32]	; (8005728 <UART_SetConfig+0x2d4>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 0207 	and.w	r2, r3, #7
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4422      	add	r2, r4
 800571a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800571c:	e106      	b.n	800592c <UART_SetConfig+0x4d8>
 800571e:	bf00      	nop
 8005720:	40011000 	.word	0x40011000
 8005724:	40011400 	.word	0x40011400
 8005728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005730:	2200      	movs	r2, #0
 8005732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800573a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800573e:	4642      	mov	r2, r8
 8005740:	464b      	mov	r3, r9
 8005742:	1891      	adds	r1, r2, r2
 8005744:	6239      	str	r1, [r7, #32]
 8005746:	415b      	adcs	r3, r3
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800574e:	4641      	mov	r1, r8
 8005750:	1854      	adds	r4, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb43 0501 	adc.w	r5, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	00eb      	lsls	r3, r5, #3
 8005762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005766:	00e2      	lsls	r2, r4, #3
 8005768:	4614      	mov	r4, r2
 800576a:	461d      	mov	r5, r3
 800576c:	4643      	mov	r3, r8
 800576e:	18e3      	adds	r3, r4, r3
 8005770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005774:	464b      	mov	r3, r9
 8005776:	eb45 0303 	adc.w	r3, r5, r3
 800577a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800578a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800579a:	4629      	mov	r1, r5
 800579c:	008b      	lsls	r3, r1, #2
 800579e:	4621      	mov	r1, r4
 80057a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a4:	4621      	mov	r1, r4
 80057a6:	008a      	lsls	r2, r1, #2
 80057a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057ac:	f7fb f972 	bl	8000a94 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4b60      	ldr	r3, [pc, #384]	; (8005938 <UART_SetConfig+0x4e4>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011c      	lsls	r4, r3, #4
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	61b9      	str	r1, [r7, #24]
 80057d8:	415b      	adcs	r3, r3
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e0:	4641      	mov	r1, r8
 80057e2:	1851      	adds	r1, r2, r1
 80057e4:	6139      	str	r1, [r7, #16]
 80057e6:	4649      	mov	r1, r9
 80057e8:	414b      	adcs	r3, r1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057f8:	4659      	mov	r1, fp
 80057fa:	00cb      	lsls	r3, r1, #3
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005802:	4651      	mov	r1, sl
 8005804:	00ca      	lsls	r2, r1, #3
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	4603      	mov	r3, r0
 800580c:	4642      	mov	r2, r8
 800580e:	189b      	adds	r3, r3, r2
 8005810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005814:	464b      	mov	r3, r9
 8005816:	460a      	mov	r2, r1
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	67bb      	str	r3, [r7, #120]	; 0x78
 800582a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005838:	4649      	mov	r1, r9
 800583a:	008b      	lsls	r3, r1, #2
 800583c:	4641      	mov	r1, r8
 800583e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005842:	4641      	mov	r1, r8
 8005844:	008a      	lsls	r2, r1, #2
 8005846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800584a:	f7fb f923 	bl	8000a94 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4611      	mov	r1, r2
 8005854:	4b38      	ldr	r3, [pc, #224]	; (8005938 <UART_SetConfig+0x4e4>)
 8005856:	fba3 2301 	umull	r2, r3, r3, r1
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2264      	movs	r2, #100	; 0x64
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	1acb      	subs	r3, r1, r3
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	3332      	adds	r3, #50	; 0x32
 8005868:	4a33      	ldr	r2, [pc, #204]	; (8005938 <UART_SetConfig+0x4e4>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005874:	441c      	add	r4, r3
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	673b      	str	r3, [r7, #112]	; 0x70
 800587e:	677a      	str	r2, [r7, #116]	; 0x74
 8005880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	415b      	adcs	r3, r3
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c6:	464b      	mov	r3, r9
 80058c8:	460a      	mov	r2, r1
 80058ca:	eb42 0303 	adc.w	r3, r2, r3
 80058ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60
 80058da:	667a      	str	r2, [r7, #100]	; 0x64
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058e8:	4649      	mov	r1, r9
 80058ea:	008b      	lsls	r3, r1, #2
 80058ec:	4641      	mov	r1, r8
 80058ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f2:	4641      	mov	r1, r8
 80058f4:	008a      	lsls	r2, r1, #2
 80058f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058fa:	f7fb f8cb 	bl	8000a94 <__aeabi_uldivmod>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <UART_SetConfig+0x4e4>)
 8005904:	fba3 1302 	umull	r1, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	2164      	movs	r1, #100	; 0x64
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	3332      	adds	r3, #50	; 0x32
 8005916:	4a08      	ldr	r2, [pc, #32]	; (8005938 <UART_SetConfig+0x4e4>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4422      	add	r2, r4
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005938:	51eb851f 	.word	0x51eb851f

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4d0d      	ldr	r5, [pc, #52]	; (8005984 <__libc_init_array+0x38>)
 8005950:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005952:	1b64      	subs	r4, r4, r5
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	2600      	movs	r6, #0
 8005958:	42a6      	cmp	r6, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	4d0b      	ldr	r5, [pc, #44]	; (800598c <__libc_init_array+0x40>)
 800595e:	4c0c      	ldr	r4, [pc, #48]	; (8005990 <__libc_init_array+0x44>)
 8005960:	f000 f818 	bl	8005994 <_init>
 8005964:	1b64      	subs	r4, r4, r5
 8005966:	10a4      	asrs	r4, r4, #2
 8005968:	2600      	movs	r6, #0
 800596a:	42a6      	cmp	r6, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f855 3b04 	ldr.w	r3, [r5], #4
 8005974:	4798      	blx	r3
 8005976:	3601      	adds	r6, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f855 3b04 	ldr.w	r3, [r5], #4
 800597e:	4798      	blx	r3
 8005980:	3601      	adds	r6, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	080059d4 	.word	0x080059d4
 8005988:	080059d4 	.word	0x080059d4
 800598c:	080059d4 	.word	0x080059d4
 8005990:	080059d8 	.word	0x080059d8

08005994 <_init>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr

080059a0 <_fini>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr

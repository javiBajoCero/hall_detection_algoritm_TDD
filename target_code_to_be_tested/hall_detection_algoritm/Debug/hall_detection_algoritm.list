
hall_detection_algoritm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004644  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004828  08004828  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004830  08004830  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004834  08004834  00014834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000014  0800484c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800484c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010785  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002afe  00000000  00000000  0003080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00033310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b73  00000000  00000000  000341d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023513  00000000  00000000  00034d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145b3  00000000  00000000  00058256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ddd  00000000  00000000  0006c809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c4c  00000000  00000000  001465e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0014a234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080047f0 	.word	0x080047f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080047f0 	.word	0x080047f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000514:	4a29      	ldr	r2, [pc, #164]	; (80005bc <MX_ADC1_Init+0xbc>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_ADC1_Init+0xb8>)
 800051a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000528:	2201      	movs	r2, #1
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_ADC1_Init+0xb8>)
 800052e:	2201      	movs	r2, #1
 8000530:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ADC1_Init+0xb8>)
 800053c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000544:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_ADC1_Init+0xb8>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000552:	2202      	movs	r2, #2
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000558:	2201      	movs	r2, #1
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000566:	f001 f90d 	bl	8001784 <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000570:	f000 fedc 	bl	800132c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800057c:	2301      	movs	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_ADC1_Init+0xb8>)
 8000586:	f001 fa6f 	bl	8001a68 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000590:	f000 fecc 	bl	800132c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000594:	2301      	movs	r3, #1
 8000596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_ADC1_Init+0xb8>)
 80005a2:	f001 fa61 	bl	8001a68 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005ac:	f000 febe 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000030 	.word	0x20000030
 80005bc:	40012000 	.word	0x40012000

080005c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a2f      	ldr	r2, [pc, #188]	; (800069c <HAL_ADC_MspInit+0xdc>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d157      	bne.n	8000692 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <HAL_ADC_MspInit+0xe0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800061a:	2303      	movs	r3, #3
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	481d      	ldr	r0, [pc, #116]	; (80006a4 <HAL_ADC_MspInit+0xe4>)
 800062e:	f002 f94d 	bl	80028cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000634:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <HAL_ADC_MspInit+0xec>)
 8000636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 800064c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 800065c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 8000678:	f001 fdb8 	bl	80021ec <HAL_DMA_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000682:	f000 fe53 	bl	800132c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 800068a:	639a      	str	r2, [r3, #56]	; 0x38
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_ADC_MspInit+0xe8>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	20000078 	.word	0x20000078
 80006ac:	40026410 	.word	0x40026410

080006b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA_Init+0x3c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <MX_DMA_Init+0x3c>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_DMA_Init+0x3c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2038      	movs	r0, #56	; 0x38
 80006d8:	f001 fd51 	bl	800217e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006dc:	2038      	movs	r0, #56	; 0x38
 80006de:	f001 fd6a 	bl	80021b6 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <MX_GPIO_Init+0xfc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a37      	ldr	r2, [pc, #220]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a30      	ldr	r2, [pc, #192]	; (80007ec <MX_GPIO_Init+0xfc>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_GPIO_Init+0xfc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4824      	ldr	r0, [pc, #144]	; (80007f0 <MX_GPIO_Init+0x100>)
 8000760:	f002 fa60 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	481e      	ldr	r0, [pc, #120]	; (80007f4 <MX_GPIO_Init+0x104>)
 800077c:	f002 f8a6 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_hall_C_Pin;
 8000780:	2302      	movs	r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_hall_C_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <MX_GPIO_Init+0x104>)
 8000794:	f002 f89a 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_hall_A_Pin;
 8000798:	2310      	movs	r3, #16
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_hall_A_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x100>)
 80007ac:	f002 f88e 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b0:	2320      	movs	r3, #32
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <MX_GPIO_Init+0x100>)
 80007c8:	f002 f880 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = input_hall_B_Pin;
 80007cc:	2301      	movs	r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_hall_B_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x108>)
 80007e0:	f002 f874 	bl	80028cc <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020400 	.word	0x40020400

080007fc <run_hall_detection_inside_20Khz_interruption>:

/**
* \brief
* \param
*/
void run_hall_detection_inside_20Khz_interruption(detection_state_enum* enabled_or_disabled){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(*enabled_or_disabled==detection_ENABLED){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d10e      	bne.n	800082a <run_hall_detection_inside_20Khz_interruption+0x2e>
		signals_adquisition();
 800080c:	f000 f814 	bl	8000838 <signals_adquisition>
		detect_all_zerocrossings();
 8000810:	f000 f86c 	bl	80008ec <detect_all_zerocrossings>
		end_detection(enabled_or_disabled);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f93d 	bl	8000a94 <end_detection>
		evaluate_and_present_results(enabled_or_disabled);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f976 	bl	8000b0c <evaluate_and_present_results>
		ticks++;
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <run_hall_detection_inside_20Khz_interruption+0x38>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a03      	ldr	r2, [pc, #12]	; (8000834 <run_hall_detection_inside_20Khz_interruption+0x38>)
 8000828:	6013      	str	r3, [r2, #0]
	}

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000d8 	.word	0x200000d8

08000838 <signals_adquisition>:

/**
* \brief
* \param
*/
void signals_adquisition(){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	currA.two_samples_buffer[1]=currA.two_samples_buffer[0];
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <signals_adquisition+0x8c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <signals_adquisition+0x8c>)
 8000842:	6053      	str	r3, [r2, #4]
	currA.two_samples_buffer[0]= ADCreadings[0]; //i suspect ADC measurements are one sample late, because of the ADC being triggered at the end of the TIM interruption
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <signals_adquisition+0x90>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <signals_adquisition+0x8c>)
 800084a:	6013      	str	r3, [r2, #0]

	currB.two_samples_buffer[1]=currB.two_samples_buffer[0];
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <signals_adquisition+0x94>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <signals_adquisition+0x94>)
 8000852:	6053      	str	r3, [r2, #4]
	currB.two_samples_buffer[0]= ADCreadings[1];
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <signals_adquisition+0x90>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <signals_adquisition+0x94>)
 800085a:	6013      	str	r3, [r2, #0]
	//c=-a-b, NO REAL MEASUREMENT OF CURRENT C, assuming ABC currents ortogonality:
	currC.two_samples_buffer[1]=currC.two_samples_buffer[0];
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <signals_adquisition+0x98>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <signals_adquisition+0x98>)
 8000862:	6053      	str	r3, [r2, #4]
	currC.two_samples_buffer[0]= currentAplusBplusC-ADCreadings[0]-ADCreadings[1];
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <signals_adquisition+0x90>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <signals_adquisition+0x90>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4413      	add	r3, r2
 800086e:	f5c3 53c0 	rsb	r3, r3, #6144	; 0x1800
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <signals_adquisition+0x98>)
 8000874:	6013      	str	r3, [r2, #0]

	hallA.two_samples_buffer[1]=hallA.two_samples_buffer[0];
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <signals_adquisition+0x9c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <signals_adquisition+0x9c>)
 800087c:	6053      	str	r3, [r2, #4]
	hallA.two_samples_buffer[0]=HAL_GPIO_ReadPin(input_hall_A_GPIO_Port, input_hall_A_Pin);
 800087e:	2110      	movs	r1, #16
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <signals_adquisition+0xa0>)
 8000882:	f002 f9b7 	bl	8002bf4 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <signals_adquisition+0x9c>)
 800088c:	601a      	str	r2, [r3, #0]

	hallB.two_samples_buffer[1]=hallB.two_samples_buffer[0];
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <signals_adquisition+0xa4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <signals_adquisition+0xa4>)
 8000894:	6053      	str	r3, [r2, #4]
	hallB.two_samples_buffer[0]=HAL_GPIO_ReadPin(input_hall_B_GPIO_Port, input_hall_B_Pin);
 8000896:	2101      	movs	r1, #1
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <signals_adquisition+0xa8>)
 800089a:	f002 f9ab 	bl	8002bf4 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <signals_adquisition+0xa4>)
 80008a4:	601a      	str	r2, [r3, #0]

	hallC.two_samples_buffer[1]=hallC.two_samples_buffer[0];
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <signals_adquisition+0xac>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <signals_adquisition+0xac>)
 80008ac:	6053      	str	r3, [r2, #4]
	hallC.two_samples_buffer[0]=HAL_GPIO_ReadPin(input_hall_C_GPIO_Port, input_hall_C_Pin);
 80008ae:	2102      	movs	r1, #2
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <signals_adquisition+0xb0>)
 80008b2:	f002 f99f 	bl	8002bf4 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <signals_adquisition+0xac>)
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	200001f4 	.word	0x200001f4
 80008cc:	20000108 	.word	0x20000108
 80008d0:	20000134 	.word	0x20000134
 80008d4:	20000160 	.word	0x20000160
 80008d8:	40020000 	.word	0x40020000
 80008dc:	2000018c 	.word	0x2000018c
 80008e0:	40020400 	.word	0x40020400
 80008e4:	200001b8 	.word	0x200001b8
 80008e8:	40020800 	.word	0x40020800

080008ec <detect_all_zerocrossings>:

/**
* \brief
* \param
*/
void detect_all_zerocrossings(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if(ticks>2){ //skip the first two samples to fill the buffers
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <detect_all_zerocrossings+0x34>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d911      	bls.n	800091c <detect_all_zerocrossings+0x30>
		detect_current_zerocrossings(&currA);
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <detect_all_zerocrossings+0x38>)
 80008fa:	f000 f81f 	bl	800093c <detect_current_zerocrossings>
		detect_current_zerocrossings(&currB);
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <detect_all_zerocrossings+0x3c>)
 8000900:	f000 f81c 	bl	800093c <detect_current_zerocrossings>
		detect_current_zerocrossings(&currC);
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <detect_all_zerocrossings+0x40>)
 8000906:	f000 f819 	bl	800093c <detect_current_zerocrossings>
		detect_hall_zerocrossings(&hallA);
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <detect_all_zerocrossings+0x44>)
 800090c:	f000 f88c 	bl	8000a28 <detect_hall_zerocrossings>
		detect_hall_zerocrossings(&hallB);
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <detect_all_zerocrossings+0x48>)
 8000912:	f000 f889 	bl	8000a28 <detect_hall_zerocrossings>
		detect_hall_zerocrossings(&hallC);
 8000916:	4808      	ldr	r0, [pc, #32]	; (8000938 <detect_all_zerocrossings+0x4c>)
 8000918:	f000 f886 	bl	8000a28 <detect_hall_zerocrossings>
	}
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000d8 	.word	0x200000d8
 8000924:	200000dc 	.word	0x200000dc
 8000928:	20000108 	.word	0x20000108
 800092c:	20000134 	.word	0x20000134
 8000930:	20000160 	.word	0x20000160
 8000934:	2000018c 	.word	0x2000018c
 8000938:	200001b8 	.word	0x200001b8

0800093c <detect_current_zerocrossings>:

/**
* \brief
* \param
*/
void detect_current_zerocrossings(current_or_hall_measurements_struct* currx){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if(	   (((int32_t)(currx->two_samples_buffer[0]-currentADCoffset)*
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <detect_current_zerocrossings+0xe4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	4619      	mov	r1, r3
			 (int32_t)(currx->two_samples_buffer[1]-currentADCoffset))<=0)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <detect_current_zerocrossings+0xe4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1ad3      	subs	r3, r2, r3
	if(	   (((int32_t)(currx->two_samples_buffer[0]-currentADCoffset)*
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	dc58      	bgt.n	8000a14 <detect_current_zerocrossings+0xd8>
			 && currx->numberof_zerocrossings<MAXZEROCROSSINGS
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	2b05      	cmp	r3, #5
 8000968:	d854      	bhi.n	8000a14 <detect_current_zerocrossings+0xd8>
			){

		if(currx->numberof_zerocrossings==0){			//only if this is the first zerocrossing detected
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096e:	2b00      	cmp	r3, #0
 8000970:	d122      	bne.n	80009b8 <detect_current_zerocrossings+0x7c>
					currx->zerocrossings_tick[currx->numberof_zerocrossings]=ticks;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <detect_current_zerocrossings+0xe8>)
 8000978:	6819      	ldr	r1, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3202      	adds	r2, #2
 800097e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if(currx->two_samples_buffer[0]>currx->two_samples_buffer[1]){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	d907      	bls.n	800099e <detect_current_zerocrossings+0x62>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=rising_polarity;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2020 	strb.w	r2, [r3, #32]
 800099c:	e006      	b.n	80009ac <detect_current_zerocrossings+0x70>
					}else{
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=falling_polarity;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2201      	movs	r2, #1
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
					}
					currx->numberof_zerocrossings++;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
					}
					currx->numberof_zerocrossings++;
			}
		}
	}
}
 80009b6:	e02d      	b.n	8000a14 <detect_current_zerocrossings+0xd8>
			if((int32_t)(ticks-(currx->zerocrossings_tick[currx->numberof_zerocrossings-1]))>lowpassfilter_ticks){ //not the first zerocrossing, compare with the previous one to filter noisy signals
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <detect_current_zerocrossings+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	1e59      	subs	r1, r3, #1
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3102      	adds	r1, #2
 80009c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	2b0a      	cmp	r3, #10
 80009ce:	dd21      	ble.n	8000a14 <detect_current_zerocrossings+0xd8>
					currx->zerocrossings_tick[currx->numberof_zerocrossings]=ticks;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <detect_current_zerocrossings+0xe8>)
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3202      	adds	r2, #2
 80009dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if(currx->two_samples_buffer[0]>currx->two_samples_buffer[1]){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d907      	bls.n	80009fc <detect_current_zerocrossings+0xc0>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=rising_polarity;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]
 80009fa:	e006      	b.n	8000a0a <detect_current_zerocrossings+0xce>
						currx->zerocrossings_polarity[currx->numberof_zerocrossings]=falling_polarity;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
					currx->numberof_zerocrossings++;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200000d8 	.word	0x200000d8

08000a28 <detect_hall_zerocrossings>:

/**
* \brief
* \param
*/
void detect_hall_zerocrossings(current_or_hall_measurements_struct* hallx){
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	if(hallx->two_samples_buffer[0]!=hallx->two_samples_buffer[1]){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d023      	beq.n	8000a84 <detect_hall_zerocrossings+0x5c>
		if(hallx->numberof_zerocrossings<MAXZEROCROSSINGS){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a40:	2b05      	cmp	r3, #5
 8000a42:	d81f      	bhi.n	8000a84 <detect_hall_zerocrossings+0x5c>
			hallx->zerocrossings_tick[hallx->numberof_zerocrossings]=ticks;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <detect_hall_zerocrossings+0x68>)
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3202      	adds	r2, #2
 8000a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if(hallx->two_samples_buffer[0]==GPIO_PIN_SET){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d107      	bne.n	8000a6c <detect_hall_zerocrossings+0x44>
				hallx->zerocrossings_polarity[hallx->numberof_zerocrossings]=rising_polarity;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]
 8000a6a:	e006      	b.n	8000a7a <detect_hall_zerocrossings+0x52>
			}else{
				hallx->zerocrossings_polarity[hallx->numberof_zerocrossings]=falling_polarity;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	2201      	movs	r2, #1
 8000a76:	f883 2020 	strb.w	r2, [r3, #32]
			}
			hallx->numberof_zerocrossings++;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	200000d8 	.word	0x200000d8

08000a94 <end_detection>:

/**
* \brief
* \param
*/
void end_detection(detection_state_enum* enabled_or_disabled){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(
			(currA.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <end_detection+0x5c>)
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if(
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d917      	bls.n	8000ad4 <end_detection+0x40>
			(currB.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <end_detection+0x60>)
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			(currA.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000aa8:	2b05      	cmp	r3, #5
 8000aaa:	d913      	bls.n	8000ad4 <end_detection+0x40>
			(currC.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <end_detection+0x64>)
 8000aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			(currB.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d90f      	bls.n	8000ad4 <end_detection+0x40>
			(hallA.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <end_detection+0x68>)
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			(currC.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000ab8:	2b05      	cmp	r3, #5
 8000aba:	d90b      	bls.n	8000ad4 <end_detection+0x40>
			(hallB.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <end_detection+0x6c>)
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			(hallA.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000ac0:	2b05      	cmp	r3, #5
 8000ac2:	d907      	bls.n	8000ad4 <end_detection+0x40>
			(hallC.numberof_zerocrossings>=MAXZEROCROSSINGS)
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <end_detection+0x70>)
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			(hallB.numberof_zerocrossings>=MAXZEROCROSSINGS) &&
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d903      	bls.n	8000ad4 <end_detection+0x40>
	){
		*enabled_or_disabled=detection_DISABLED; //end of detection because the zerocrossing buffers are full
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	}else if(ticks>=MAXTICKs){
		*enabled_or_disabled=detection_DISABLED; //end of detection because of timeout
	}
}
 8000ad2:	e007      	b.n	8000ae4 <end_detection+0x50>
	}else if(ticks>=MAXTICKs){
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <end_detection+0x74>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000adc:	d302      	bcc.n	8000ae4 <end_detection+0x50>
		*enabled_or_disabled=detection_DISABLED; //end of detection because of timeout
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	200000dc 	.word	0x200000dc
 8000af4:	20000108 	.word	0x20000108
 8000af8:	20000134 	.word	0x20000134
 8000afc:	20000160 	.word	0x20000160
 8000b00:	2000018c 	.word	0x2000018c
 8000b04:	200001b8 	.word	0x200001b8
 8000b08:	200000d8 	.word	0x200000d8

08000b0c <evaluate_and_present_results>:

/**
* \brief
* \param
*/
void evaluate_and_present_results(detection_state_enum* enabled_or_disabled){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(*enabled_or_disabled==detection_DISABLED){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <evaluate_and_present_results+0x22>
		calculateElectricPeriod_inTicks(&results.electricPeriod_ticks);
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <evaluate_and_present_results+0x2c>)
 8000b1e:	f000 f80d 	bl	8000b3c <calculateElectricPeriod_inTicks>
		assign_closest_phase_to_hall(&results);
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <evaluate_and_present_results+0x2c>)
 8000b24:	f000 f898 	bl	8000c58 <assign_closest_phase_to_hall>
		assign_polarity(&results);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <evaluate_and_present_results+0x2c>)
 8000b2a:	f000 fa9d 	bl	8001068 <assign_polarity>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200001e4 	.word	0x200001e4

08000b3c <calculateElectricPeriod_inTicks>:

/**
* \brief
* \param
*/
void calculateElectricPeriod_inTicks(uint32_t* resulting_period){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	uint32_t averagedsemiPeriod=0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < MAXZEROCROSSINGS-1; ++i) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	e05c      	b.n	8000c08 <calculateElectricPeriod_inTicks+0xcc>
		averagedsemiPeriod+=(currA.zerocrossings_tick[i+1]-currA.zerocrossings_tick[i]);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <calculateElectricPeriod_inTicks+0x100>)
 8000b54:	3302      	adds	r3, #2
 8000b56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b5a:	4938      	ldr	r1, [pc, #224]	; (8000c3c <calculateElectricPeriod_inTicks+0x100>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(currB.zerocrossings_tick[i+1]-currB.zerocrossings_tick[i]);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a33      	ldr	r2, [pc, #204]	; (8000c40 <calculateElectricPeriod_inTicks+0x104>)
 8000b72:	3302      	adds	r3, #2
 8000b74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b78:	4931      	ldr	r1, [pc, #196]	; (8000c40 <calculateElectricPeriod_inTicks+0x104>)
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(currC.zerocrossings_tick[i+1]-currC.zerocrossings_tick[i]);
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <calculateElectricPeriod_inTicks+0x108>)
 8000b90:	3302      	adds	r3, #2
 8000b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b96:	492b      	ldr	r1, [pc, #172]	; (8000c44 <calculateElectricPeriod_inTicks+0x108>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(hallA.zerocrossings_tick[i+1]-hallA.zerocrossings_tick[i]);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <calculateElectricPeriod_inTicks+0x10c>)
 8000bae:	3302      	adds	r3, #2
 8000bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bb4:	4924      	ldr	r1, [pc, #144]	; (8000c48 <calculateElectricPeriod_inTicks+0x10c>)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(hallB.zerocrossings_tick[i+1]-hallB.zerocrossings_tick[i]);
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <calculateElectricPeriod_inTicks+0x110>)
 8000bcc:	3302      	adds	r3, #2
 8000bce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bd2:	491e      	ldr	r1, [pc, #120]	; (8000c4c <calculateElectricPeriod_inTicks+0x110>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
		averagedsemiPeriod+=(hallC.zerocrossings_tick[i+1]-hallC.zerocrossings_tick[i]);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <calculateElectricPeriod_inTicks+0x114>)
 8000bea:	3302      	adds	r3, #2
 8000bec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf0:	4917      	ldr	r1, [pc, #92]	; (8000c50 <calculateElectricPeriod_inTicks+0x114>)
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < MAXZEROCROSSINGS-1; ++i) {
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d99f      	bls.n	8000b4e <calculateElectricPeriod_inTicks+0x12>
	}

	averagedsemiPeriod/=(MAXZEROCROSSINGS-1);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <calculateElectricPeriod_inTicks+0x118>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
	averagedsemiPeriod/=5;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <calculateElectricPeriod_inTicks+0x118>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]

	*resulting_period=averagedsemiPeriod*2; //FOR torrot emulated this should be 66*2
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	005a      	lsls	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000dc 	.word	0x200000dc
 8000c40:	20000108 	.word	0x20000108
 8000c44:	20000134 	.word	0x20000134
 8000c48:	20000160 	.word	0x20000160
 8000c4c:	2000018c 	.word	0x2000018c
 8000c50:	200001b8 	.word	0x200001b8
 8000c54:	cccccccd 	.word	0xcccccccd

08000c58 <assign_closest_phase_to_hall>:

/**
* \brief
* \param
*/
void assign_closest_phase_to_hall(detection_results_struct* res){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b092      	sub	sp, #72	; 0x48
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	int32_t hall_orderA[number_of_phases]={0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
	int32_t hall_orderB[number_of_phases]={0};
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
	int32_t hall_orderC[number_of_phases]={0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]

	for (uint32_t i = 0; i < MAXZEROCROSSINGS; ++i) {// all zerocrossings loop
 8000c84:	2300      	movs	r3, #0
 8000c86:	647b      	str	r3, [r7, #68]	; 0x44
 8000c88:	e0ad      	b.n	8000de6 <assign_closest_phase_to_hall+0x18e>
		hall_orderA[phase_A]+=absolute((int32_t)currA.zerocrossings_tick[i]-(int32_t)hallA.zerocrossings_tick[i]);
 8000c8a:	4aba      	ldr	r2, [pc, #744]	; (8000f74 <assign_closest_phase_to_hall+0x31c>)
 8000c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4ab8      	ldr	r2, [pc, #736]	; (8000f78 <assign_closest_phase_to_hall+0x320>)
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f9d2 	bl	800104c <absolute>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	4413      	add	r3, r2
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
		hall_orderA[phase_B]+=absolute((int32_t)currA.zerocrossings_tick[i]-(int32_t)hallB.zerocrossings_tick[i]);
 8000cb0:	4ab0      	ldr	r2, [pc, #704]	; (8000f74 <assign_closest_phase_to_hall+0x31c>)
 8000cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4aaf      	ldr	r2, [pc, #700]	; (8000f7c <assign_closest_phase_to_hall+0x324>)
 8000cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	1acb      	subs	r3, r1, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f9bf 	bl	800104c <absolute>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd2:	4413      	add	r3, r2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
		hall_orderA[phase_C]+=absolute((int32_t)currA.zerocrossings_tick[i]-(int32_t)hallC.zerocrossings_tick[i]);
 8000cd6:	4aa7      	ldr	r2, [pc, #668]	; (8000f74 <assign_closest_phase_to_hall+0x31c>)
 8000cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4aa7      	ldr	r2, [pc, #668]	; (8000f80 <assign_closest_phase_to_hall+0x328>)
 8000ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	1acb      	subs	r3, r1, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f9ac 	bl	800104c <absolute>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		hall_orderB[phase_A]+=absolute((int32_t)currB.zerocrossings_tick[i]-(int32_t)hallA.zerocrossings_tick[i]);
 8000cfc:	4aa1      	ldr	r2, [pc, #644]	; (8000f84 <assign_closest_phase_to_hall+0x32c>)
 8000cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d00:	3302      	adds	r3, #2
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4a9b      	ldr	r2, [pc, #620]	; (8000f78 <assign_closest_phase_to_hall+0x320>)
 8000d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f999 	bl	800104c <absolute>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	4413      	add	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
		hall_orderB[phase_B]+=absolute((int32_t)currB.zerocrossings_tick[i]-(int32_t)hallB.zerocrossings_tick[i]);
 8000d22:	4a98      	ldr	r2, [pc, #608]	; (8000f84 <assign_closest_phase_to_hall+0x32c>)
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	3302      	adds	r3, #2
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4a93      	ldr	r2, [pc, #588]	; (8000f7c <assign_closest_phase_to_hall+0x324>)
 8000d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d32:	3302      	adds	r3, #2
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f986 	bl	800104c <absolute>
 8000d40:	4602      	mov	r2, r0
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	4413      	add	r3, r2
 8000d46:	61fb      	str	r3, [r7, #28]
		hall_orderB[phase_C]+=absolute((int32_t)currB.zerocrossings_tick[i]-(int32_t)hallC.zerocrossings_tick[i]);
 8000d48:	4a8e      	ldr	r2, [pc, #568]	; (8000f84 <assign_closest_phase_to_hall+0x32c>)
 8000d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4a8a      	ldr	r2, [pc, #552]	; (8000f80 <assign_closest_phase_to_hall+0x328>)
 8000d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	1acb      	subs	r3, r1, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f973 	bl	800104c <absolute>
 8000d66:	4602      	mov	r2, r0
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	623b      	str	r3, [r7, #32]

		hall_orderC[phase_A]+=absolute((int32_t)currC.zerocrossings_tick[i]-(int32_t)hallA.zerocrossings_tick[i]);
 8000d6e:	4a86      	ldr	r2, [pc, #536]	; (8000f88 <assign_closest_phase_to_hall+0x330>)
 8000d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4a7f      	ldr	r2, [pc, #508]	; (8000f78 <assign_closest_phase_to_hall+0x320>)
 8000d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d7e:	3302      	adds	r3, #2
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f960 	bl	800104c <absolute>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
		hall_orderC[phase_B]+=absolute((int32_t)currC.zerocrossings_tick[i]-(int32_t)hallB.zerocrossings_tick[i]);
 8000d94:	4a7c      	ldr	r2, [pc, #496]	; (8000f88 <assign_closest_phase_to_hall+0x330>)
 8000d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4a76      	ldr	r2, [pc, #472]	; (8000f7c <assign_closest_phase_to_hall+0x324>)
 8000da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	1acb      	subs	r3, r1, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f94d 	bl	800104c <absolute>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4413      	add	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
		hall_orderC[phase_C]+=absolute((int32_t)currC.zerocrossings_tick[i]-(int32_t)hallC.zerocrossings_tick[i]);
 8000dba:	4a73      	ldr	r2, [pc, #460]	; (8000f88 <assign_closest_phase_to_hall+0x330>)
 8000dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <assign_closest_phase_to_hall+0x328>)
 8000dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	1acb      	subs	r3, r1, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f93a 	bl	800104c <absolute>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	4413      	add	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < MAXZEROCROSSINGS; ++i) {// all zerocrossings loop
 8000de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000de2:	3301      	adds	r3, #1
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
 8000de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	f67f af4e 	bls.w	8000c8a <assign_closest_phase_to_hall+0x32>
	}

	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	643b      	str	r3, [r7, #64]	; 0x40
 8000df2:	e0b6      	b.n	8000f62 <assign_closest_phase_to_hall+0x30a>
		hall_orderA[i]/=MAXZEROCROSSINGS;
 8000df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	3348      	adds	r3, #72	; 0x48
 8000dfa:	443b      	add	r3, r7
 8000dfc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000e00:	4a62      	ldr	r2, [pc, #392]	; (8000f8c <assign_closest_phase_to_hall+0x334>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	17db      	asrs	r3, r3, #31
 8000e08:	1ad2      	subs	r2, r2, r3
 8000e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	3348      	adds	r3, #72	; 0x48
 8000e10:	443b      	add	r3, r7
 8000e12:	f843 2c24 	str.w	r2, [r3, #-36]
		hall_orderB[i]/=MAXZEROCROSSINGS;
 8000e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3348      	adds	r3, #72	; 0x48
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000e22:	4a5a      	ldr	r2, [pc, #360]	; (8000f8c <assign_closest_phase_to_hall+0x334>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	17db      	asrs	r3, r3, #31
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	3348      	adds	r3, #72	; 0x48
 8000e32:	443b      	add	r3, r7
 8000e34:	f843 2c30 	str.w	r2, [r3, #-48]
		hall_orderC[i]/=MAXZEROCROSSINGS;
 8000e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	3348      	adds	r3, #72	; 0x48
 8000e3e:	443b      	add	r3, r7
 8000e40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000e44:	4a51      	ldr	r2, [pc, #324]	; (8000f8c <assign_closest_phase_to_hall+0x334>)
 8000e46:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4a:	17db      	asrs	r3, r3, #31
 8000e4c:	1ad2      	subs	r2, r2, r3
 8000e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	3348      	adds	r3, #72	; 0x48
 8000e54:	443b      	add	r3, r7
 8000e56:	f843 2c3c 	str.w	r2, [r3, #-60]

		if(hall_orderA[i]>((res->electricPeriod_ticks/2)-lowpassfilter_ticks) && hall_orderA[i]<(res->electricPeriod_ticks)){
 8000e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	3348      	adds	r3, #72	; 0x48
 8000e60:	443b      	add	r3, r7
 8000e62:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000e66:	461a      	mov	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	3b0a      	subs	r3, #10
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d91d      	bls.n	8000eb0 <assign_closest_phase_to_hall+0x258>
 8000e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	3348      	adds	r3, #72	; 0x48
 8000e7a:	443b      	add	r3, r7
 8000e7c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000e80:	461a      	mov	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d212      	bcs.n	8000eb0 <assign_closest_phase_to_hall+0x258>
			hall_orderA[i]-=(res->electricPeriod_ticks/2)-lowpassfilter_ticks;
 8000e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	3348      	adds	r3, #72	; 0x48
 8000e90:	443b      	add	r3, r7
 8000e92:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	085b      	lsrs	r3, r3, #1
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	330a      	adds	r3, #10
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	3348      	adds	r3, #72	; 0x48
 8000eaa:	443b      	add	r3, r7
 8000eac:	f843 2c24 	str.w	r2, [r3, #-36]
		}

		if(hall_orderB[i]>((res->electricPeriod_ticks/2)-lowpassfilter_ticks) && hall_orderB[i]<(res->electricPeriod_ticks)){
 8000eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	3348      	adds	r3, #72	; 0x48
 8000eb6:	443b      	add	r3, r7
 8000eb8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	3b0a      	subs	r3, #10
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d91d      	bls.n	8000f06 <assign_closest_phase_to_hall+0x2ae>
 8000eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	3348      	adds	r3, #72	; 0x48
 8000ed0:	443b      	add	r3, r7
 8000ed2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d212      	bcs.n	8000f06 <assign_closest_phase_to_hall+0x2ae>
			hall_orderB[i]-=(res->electricPeriod_ticks/2)-lowpassfilter_ticks;
 8000ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	3348      	adds	r3, #72	; 0x48
 8000ee6:	443b      	add	r3, r7
 8000ee8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	085b      	lsrs	r3, r3, #1
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	330a      	adds	r3, #10
 8000ef8:	461a      	mov	r2, r3
 8000efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	3348      	adds	r3, #72	; 0x48
 8000f00:	443b      	add	r3, r7
 8000f02:	f843 2c30 	str.w	r2, [r3, #-48]
		}

		if(hall_orderC[i]>((res->electricPeriod_ticks/2)-lowpassfilter_ticks) && hall_orderC[i]<(res->electricPeriod_ticks)){
 8000f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	3348      	adds	r3, #72	; 0x48
 8000f0c:	443b      	add	r3, r7
 8000f0e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000f12:	461a      	mov	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	3b0a      	subs	r3, #10
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d91d      	bls.n	8000f5c <assign_closest_phase_to_hall+0x304>
 8000f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3348      	adds	r3, #72	; 0x48
 8000f26:	443b      	add	r3, r7
 8000f28:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d212      	bcs.n	8000f5c <assign_closest_phase_to_hall+0x304>
			hall_orderC[i]-=(res->electricPeriod_ticks/2)-lowpassfilter_ticks;
 8000f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	3348      	adds	r3, #72	; 0x48
 8000f3c:	443b      	add	r3, r7
 8000f3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	330a      	adds	r3, #10
 8000f4e:	461a      	mov	r2, r3
 8000f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	3348      	adds	r3, #72	; 0x48
 8000f56:	443b      	add	r3, r7
 8000f58:	f843 2c3c 	str.w	r2, [r3, #-60]
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8000f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f5e:	3301      	adds	r3, #1
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
 8000f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	f67f af45 	bls.w	8000df4 <assign_closest_phase_to_hall+0x19c>
		}
	}

	int32_t minimum=0xFF;
 8000f6a:	23ff      	movs	r3, #255	; 0xff
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f72:	e024      	b.n	8000fbe <assign_closest_phase_to_hall+0x366>
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	20000160 	.word	0x20000160
 8000f7c:	2000018c 	.word	0x2000018c
 8000f80:	200001b8 	.word	0x200001b8
 8000f84:	20000108 	.word	0x20000108
 8000f88:	20000134 	.word	0x20000134
 8000f8c:	2aaaaaab 	.word	0x2aaaaaab
		if(hall_orderA[i]<minimum){
 8000f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	3348      	adds	r3, #72	; 0x48
 8000f96:	443b      	add	r3, r7
 8000f98:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dd0a      	ble.n	8000fb8 <assign_closest_phase_to_hall+0x360>
			minimum=hall_orderA[i];
 8000fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	3348      	adds	r3, #72	; 0x48
 8000fa8:	443b      	add	r3, r7
 8000faa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
			res->hall_order[phase_A]=i;
 8000fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	711a      	strb	r2, [r3, #4]
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8000fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fba:	3301      	adds	r3, #1
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d9e5      	bls.n	8000f90 <assign_closest_phase_to_hall+0x338>
		}
	}

	minimum=0xFF;
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
 8000fcc:	e016      	b.n	8000ffc <assign_closest_phase_to_hall+0x3a4>
		if(hall_orderB[i]<minimum){
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	3348      	adds	r3, #72	; 0x48
 8000fd4:	443b      	add	r3, r7
 8000fd6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dd0a      	ble.n	8000ff6 <assign_closest_phase_to_hall+0x39e>
			minimum=hall_orderB[i];
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	3348      	adds	r3, #72	; 0x48
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
			res->hall_order[phase_B]=i;
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	715a      	strb	r2, [r3, #5]
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8000ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d9e5      	bls.n	8000fce <assign_closest_phase_to_hall+0x376>
		}
	}

	minimum=0xFF;
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
 800100a:	e016      	b.n	800103a <assign_closest_phase_to_hall+0x3e2>
		if(hall_orderC[i]<minimum){
 800100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	3348      	adds	r3, #72	; 0x48
 8001012:	443b      	add	r3, r7
 8001014:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800101a:	429a      	cmp	r2, r3
 800101c:	dd0a      	ble.n	8001034 <assign_closest_phase_to_hall+0x3dc>
			minimum=hall_orderC[i];
 800101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	3348      	adds	r3, #72	; 0x48
 8001024:	443b      	add	r3, r7
 8001026:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
			res->hall_order[phase_C]=i;
 800102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102e:	b2da      	uxtb	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	719a      	strb	r2, [r3, #6]
	for (uint32_t i = 0; i < number_of_phases; ++i) {
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	3301      	adds	r3, #1
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	2b02      	cmp	r3, #2
 800103e:	d9e5      	bls.n	800100c <assign_closest_phase_to_hall+0x3b4>
		}
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3748      	adds	r7, #72	; 0x48
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop

0800104c <absolute>:

/**
* \brief
* \param
*/
int32_t absolute(int32_t x){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    return (int32_t)x < (int32_t)0 ? -x : x;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bfb8      	it	lt
 800105a:	425b      	neglt	r3, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <assign_polarity>:

/**
* \brief
* \param
*/
void assign_polarity(detection_results_struct* res){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

	if (res->hall_order[phase_A]==hall_A) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10f      	bne.n	8001098 <assign_polarity+0x30>
		if(currA.zerocrossings_polarity[0]==hallA.zerocrossings_polarity[0]){
 8001078:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <assign_polarity+0x178>)
 800107a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800107e:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <assign_polarity+0x17c>)
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	429a      	cmp	r2, r3
 8001086:	d103      	bne.n	8001090 <assign_polarity+0x28>
			res->hall_polarity[phase_A]=hall_direct;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	811a      	strh	r2, [r3, #8]
 800108e:	e02a      	b.n	80010e6 <assign_polarity+0x7e>
		}else{
			res->hall_polarity[phase_A]=hall_inverse;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	811a      	strh	r2, [r3, #8]
 8001096:	e026      	b.n	80010e6 <assign_polarity+0x7e>
		}
	}else if (res->hall_order[phase_A]==hall_B) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10f      	bne.n	80010c0 <assign_polarity+0x58>
		if(currA.zerocrossings_polarity[0]==hallB.zerocrossings_polarity[0]){
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <assign_polarity+0x178>)
 80010a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <assign_polarity+0x180>)
 80010a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d103      	bne.n	80010b8 <assign_polarity+0x50>
			res->hall_polarity[phase_A]=hall_direct;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	811a      	strh	r2, [r3, #8]
 80010b6:	e016      	b.n	80010e6 <assign_polarity+0x7e>
		}else{
			res->hall_polarity[phase_A]=hall_inverse;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	811a      	strh	r2, [r3, #8]
 80010be:	e012      	b.n	80010e6 <assign_polarity+0x7e>
		}
	}else if (res->hall_order[phase_A]==hall_C) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	791b      	ldrb	r3, [r3, #4]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d10e      	bne.n	80010e6 <assign_polarity+0x7e>
		if(currA.zerocrossings_polarity[0]==hallC.zerocrossings_polarity[0]){
 80010c8:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <assign_polarity+0x178>)
 80010ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <assign_polarity+0x184>)
 80010d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d103      	bne.n	80010e0 <assign_polarity+0x78>
			res->hall_polarity[phase_A]=hall_direct;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	811a      	strh	r2, [r3, #8]
 80010de:	e002      	b.n	80010e6 <assign_polarity+0x7e>
		}else{
			res->hall_polarity[phase_A]=hall_inverse;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	811a      	strh	r2, [r3, #8]
		}
	}

	if (res->hall_order[phase_B]==hall_A) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	795b      	ldrb	r3, [r3, #5]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10f      	bne.n	800110e <assign_polarity+0xa6>
		if(currB.zerocrossings_polarity[0]==hallA.zerocrossings_polarity[0]){
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <assign_polarity+0x188>)
 80010f0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <assign_polarity+0x17c>)
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d103      	bne.n	8001106 <assign_polarity+0x9e>
			res->hall_polarity[phase_B]=hall_direct;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	815a      	strh	r2, [r3, #10]
 8001104:	e02a      	b.n	800115c <assign_polarity+0xf4>
		}else{
			res->hall_polarity[phase_B]=hall_inverse;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	815a      	strh	r2, [r3, #10]
 800110c:	e026      	b.n	800115c <assign_polarity+0xf4>
		}
	}else if (res->hall_order[phase_B]==hall_B) {
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	795b      	ldrb	r3, [r3, #5]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d10f      	bne.n	8001136 <assign_polarity+0xce>
		if(currB.zerocrossings_polarity[0]==hallB.zerocrossings_polarity[0]){
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <assign_polarity+0x188>)
 8001118:	f893 2020 	ldrb.w	r2, [r3, #32]
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <assign_polarity+0x180>)
 800111e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001122:	429a      	cmp	r2, r3
 8001124:	d103      	bne.n	800112e <assign_polarity+0xc6>
			res->hall_polarity[phase_B]=hall_direct;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	815a      	strh	r2, [r3, #10]
 800112c:	e016      	b.n	800115c <assign_polarity+0xf4>
		}else{
			res->hall_polarity[phase_B]=hall_inverse;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	815a      	strh	r2, [r3, #10]
 8001134:	e012      	b.n	800115c <assign_polarity+0xf4>
		}
	}else if (res->hall_order[phase_B]==hall_C) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d10e      	bne.n	800115c <assign_polarity+0xf4>
		if(currB.zerocrossings_polarity[0]==hallC.zerocrossings_polarity[0]){
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <assign_polarity+0x188>)
 8001140:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <assign_polarity+0x184>)
 8001146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114a:	429a      	cmp	r2, r3
 800114c:	d103      	bne.n	8001156 <assign_polarity+0xee>
			res->hall_polarity[phase_B]=hall_direct;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	815a      	strh	r2, [r3, #10]
 8001154:	e002      	b.n	800115c <assign_polarity+0xf4>
		}else{
			res->hall_polarity[phase_B]=hall_inverse;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	815a      	strh	r2, [r3, #10]
		}
	}

	if (res->hall_order[phase_C]==hall_A) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	799b      	ldrb	r3, [r3, #6]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <assign_polarity+0x11c>
		if(currC.zerocrossings_polarity[0]==hallA.zerocrossings_polarity[0]){
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <assign_polarity+0x18c>)
 8001166:	f893 2020 	ldrb.w	r2, [r3, #32]
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <assign_polarity+0x17c>)
 800116c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001170:	429a      	cmp	r2, r3
 8001172:	d103      	bne.n	800117c <assign_polarity+0x114>
			res->hall_polarity[phase_C]=hall_direct;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	819a      	strh	r2, [r3, #12]
		}else{
			res->hall_polarity[phase_C]=hall_inverse;
		}
	}

}
 800117a:	e02a      	b.n	80011d2 <assign_polarity+0x16a>
			res->hall_polarity[phase_C]=hall_inverse;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	819a      	strh	r2, [r3, #12]
}
 8001182:	e026      	b.n	80011d2 <assign_polarity+0x16a>
	}else if (res->hall_order[phase_C]==hall_B) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	799b      	ldrb	r3, [r3, #6]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10f      	bne.n	80011ac <assign_polarity+0x144>
		if(currC.zerocrossings_polarity[0]==hallB.zerocrossings_polarity[0]){
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <assign_polarity+0x18c>)
 800118e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <assign_polarity+0x180>)
 8001194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001198:	429a      	cmp	r2, r3
 800119a:	d103      	bne.n	80011a4 <assign_polarity+0x13c>
			res->hall_polarity[phase_C]=hall_direct;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	819a      	strh	r2, [r3, #12]
}
 80011a2:	e016      	b.n	80011d2 <assign_polarity+0x16a>
			res->hall_polarity[phase_C]=hall_inverse;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	819a      	strh	r2, [r3, #12]
}
 80011aa:	e012      	b.n	80011d2 <assign_polarity+0x16a>
	}else if (res->hall_order[phase_C]==hall_C) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	799b      	ldrb	r3, [r3, #6]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d10e      	bne.n	80011d2 <assign_polarity+0x16a>
		if(currC.zerocrossings_polarity[0]==hallC.zerocrossings_polarity[0]){
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <assign_polarity+0x18c>)
 80011b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <assign_polarity+0x184>)
 80011bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d103      	bne.n	80011cc <assign_polarity+0x164>
			res->hall_polarity[phase_C]=hall_direct;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	819a      	strh	r2, [r3, #12]
}
 80011ca:	e002      	b.n	80011d2 <assign_polarity+0x16a>
			res->hall_polarity[phase_C]=hall_inverse;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	819a      	strh	r2, [r3, #12]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200000dc 	.word	0x200000dc
 80011e4:	20000160 	.word	0x20000160
 80011e8:	2000018c 	.word	0x2000018c
 80011ec:	200001b8 	.word	0x200001b8
 80011f0:	20000108 	.word	0x20000108
 80011f4:	20000134 	.word	0x20000134

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fa2c 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f822 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f7ff fa74 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001208:	f7ff fa52 	bl	80006b0 <MX_DMA_Init>
  MX_ADC1_Init();
 800120c:	f7ff f978 	bl	8000500 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001210:	f000 f986 	bl	8001520 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001214:	f000 f90c 	bl	8001430 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
 HAL_ADC_Start_DMA(&hadc1, ADCreadings, numberofADCchannels);
 8001218:	2202      	movs	r2, #2
 800121a:	4907      	ldr	r1, [pc, #28]	; (8001238 <main+0x40>)
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <main+0x44>)
 800121e:	f000 faf5 	bl	800180c <HAL_ADC_Start_DMA>
 HAL_TIM_Base_Start_IT(&htim8);
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <main+0x48>)
 8001224:	f002 fbba 	bl	800399c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8001228:	2064      	movs	r0, #100	; 0x64
 800122a:	f000 fa87 	bl	800173c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800122e:	2120      	movs	r1, #32
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <main+0x4c>)
 8001232:	f001 fd10 	bl	8002c56 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001236:	e7f7      	b.n	8001228 <main+0x30>
 8001238:	200001f4 	.word	0x200001f4
 800123c:	20000030 	.word	0x20000030
 8001240:	200001fc 	.word	0x200001fc
 8001244:	40020000 	.word	0x40020000

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2234      	movs	r2, #52	; 0x34
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fa9e 	bl	8004798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <SystemClock_Config+0xdc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <SystemClock_Config+0xdc>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <SystemClock_Config+0xdc>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <SystemClock_Config+0xe0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a25      	ldr	r2, [pc, #148]	; (8001328 <SystemClock_Config+0xe0>)
 8001292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <SystemClock_Config+0xe0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2310      	movs	r3, #16
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b0:	2302      	movs	r3, #2
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b8:	2308      	movs	r3, #8
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012bc:	23b4      	movs	r3, #180	; 0xb4
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 f875 	bl	80033c0 <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012dc:	f000 f826 	bl	800132c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012e0:	f001 fcd4 	bl	8002c8c <HAL_PWREx_EnableOverDrive>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ea:	f000 f81f 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2302      	movs	r3, #2
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	2105      	movs	r1, #5
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fd0d 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001318:	f000 f808 	bl	800132c <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3750      	adds	r7, #80	; 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001376:	2007      	movs	r0, #7
 8001378:	f000 fef6 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800138c:	e7fe      	b.n	800138c <NMI_Handler+0x4>

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler+0x4>

0800139a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f992 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	run_hall_detection_inside_20Khz_interruption(&detection_state);
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80013e2:	f7ff fa0b 	bl	80007fc <run_hall_detection_inside_20Khz_interruption>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80013e8:	f002 fb48 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000004 	.word	0x20000004
 80013f4:	200001fc 	.word	0x200001fc

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f000 fffb 	bl	80023f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000078 	.word	0x20000078

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_TIM8_Init+0x98>)
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <MX_TIM8_Init+0x9c>)
 8001450:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM8_Init+0x98>)
 8001454:	22b3      	movs	r2, #179	; 0xb3
 8001456:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_TIM8_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM8_Init+0x98>)
 8001460:	2231      	movs	r2, #49	; 0x31
 8001462:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM8_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_TIM8_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM8_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001476:	4814      	ldr	r0, [pc, #80]	; (80014c8 <MX_TIM8_Init+0x98>)
 8001478:	f002 fa40 	bl	80038fc <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8001482:	f7ff ff53 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM8_Init+0x98>)
 8001494:	f002 fbfa 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 800149e:	f7ff ff45 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a2:	2320      	movs	r3, #32
 80014a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM8_Init+0x98>)
 80014b0:	f002 fe20 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80014ba:	f7ff ff37 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001fc 	.word	0x200001fc
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d115      	bne.n	800150e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_TIM_Base_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_TIM_Base_MspInit+0x4c>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_TIM_Base_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	202c      	movs	r0, #44	; 0x2c
 8001504:	f000 fe3b 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001508:	202c      	movs	r0, #44	; 0x2c
 800150a:	f000 fe54 	bl	80021b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40010400 	.word	0x40010400
 800151c:	40023800 	.word	0x40023800

08001520 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART2_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001558:	f002 fe5c 	bl	8004214 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f7ff fee3 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000244 	.word	0x20000244
 8001570:	40004400 	.word	0x40004400

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_UART_MspInit+0x84>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d12b      	bne.n	80015ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_UART_MspInit+0x88>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_UART_MspInit+0x88>)
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_UART_MspInit+0x88>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_UART_MspInit+0x88>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_UART_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ce:	230c      	movs	r3, #12
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015de:	2307      	movs	r3, #7
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_UART_MspInit+0x8c>)
 80015ea:	f001 f96f 	bl	80028cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160a:	490e      	ldr	r1, [pc, #56]	; (8001644 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001620:	4c0b      	ldr	r4, [pc, #44]	; (8001650 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800162e:	f7ff feed 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001632:	f003 f8b9 	bl	80047a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fddf 	bl	80011f8 <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001648:	08004838 	.word	0x08004838
  ldr r2, =_sbss
 800164c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001650:	2000028c 	.word	0x2000028c

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_Init+0x40>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_Init+0x40>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_Init+0x40>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 fd71 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fe54 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd89 	bl	80021d2 <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 fd51 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000010 	.word	0x20000010
 80016f8:	2000000c 	.word	0x2000000c

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000010 	.word	0x20000010
 8001720:	20000288 	.word	0x20000288

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000288 	.word	0x20000288

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000010 	.word	0x20000010

08001784 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e033      	b.n	8001802 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe ff0c 	bl	80005c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d118      	bne.n	80017f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ca:	f023 0302 	bic.w	r3, r3, #2
 80017ce:	f043 0202 	orr.w	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fa78 	bl	8001ccc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
 80017f2:	e001      	b.n	80017f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Start_DMA+0x1e>
 8001826:	2302      	movs	r3, #2
 8001828:	e0e9      	b.n	80019fe <HAL_ADC_Start_DMA+0x1f2>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d018      	beq.n	8001872 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001850:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <HAL_ADC_Start_DMA+0x1fc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6d      	ldr	r2, [pc, #436]	; (8001a0c <HAL_ADC_Start_DMA+0x200>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9a      	lsrs	r2, r3, #18
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001864:	e002      	b.n	800186c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3b01      	subs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001880:	d107      	bne.n	8001892 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001890:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 80a1 	bne.w	80019e4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f023 0206 	bic.w	r2, r3, #6
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
 80018ee:	e002      	b.n	80018f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_ADC_Start_DMA+0x204>)
 8001900:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_ADC_Start_DMA+0x208>)
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <HAL_ADC_Start_DMA+0x20c>)
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	4a41      	ldr	r2, [pc, #260]	; (8001a1c <HAL_ADC_Start_DMA+0x210>)
 8001918:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001922:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001932:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001942:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	334c      	adds	r3, #76	; 0x4c
 800194e:	4619      	mov	r1, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f000 fcf8 	bl	8002348 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2b00      	cmp	r3, #0
 8001962:	d12a      	bne.n	80019ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <HAL_ADC_Start_DMA+0x214>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d015      	beq.n	800199a <HAL_ADC_Start_DMA+0x18e>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <HAL_ADC_Start_DMA+0x218>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d105      	bne.n	8001984 <HAL_ADC_Start_DMA+0x178>
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_ADC_Start_DMA+0x204>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00a      	beq.n	800199a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <HAL_ADC_Start_DMA+0x21c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d136      	bne.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_ADC_Start_DMA+0x204>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d130      	bne.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d129      	bne.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e020      	b.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_ADC_Start_DMA+0x214>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d11b      	bne.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d114      	bne.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	e00b      	b.n	80019fc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	40012300 	.word	0x40012300
 8001a14:	08001ec5 	.word	0x08001ec5
 8001a18:	08001f7f 	.word	0x08001f7f
 8001a1c:	08001f9b 	.word	0x08001f9b
 8001a20:	40012000 	.word	0x40012000
 8001a24:	40012100 	.word	0x40012100
 8001a28:	40012200 	.word	0x40012200

08001a2c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e113      	b.n	8001cac <HAL_ADC_ConfigChannel+0x244>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b09      	cmp	r3, #9
 8001a92:	d925      	bls.n	8001ae0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68d9      	ldr	r1, [r3, #12]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b1e      	subs	r3, #30
 8001aaa:	2207      	movs	r2, #7
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68d9      	ldr	r1, [r3, #12]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4403      	add	r3, r0
 8001ad2:	3b1e      	subs	r3, #30
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	e022      	b.n	8001b26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	2207      	movs	r2, #7
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	400a      	ands	r2, r1
 8001b02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4618      	mov	r0, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4403      	add	r3, r0
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d824      	bhi.n	8001b78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b05      	subs	r3, #5
 8001b40:	221f      	movs	r2, #31
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b05      	subs	r3, #5
 8001b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
 8001b76:	e04c      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d824      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b23      	subs	r3, #35	; 0x23
 8001b92:	221f      	movs	r2, #31
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b23      	subs	r3, #35	; 0x23
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc8:	e023      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b41      	subs	r3, #65	; 0x41
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b41      	subs	r3, #65	; 0x41
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_ADC_ConfigChannel+0x250>)
 8001c14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <HAL_ADC_ConfigChannel+0x254>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d10f      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d8>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d10b      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_ADC_ConfigChannel+0x254>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12b      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x23a>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_ADC_ConfigChannel+0x258>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d003      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0x1f4>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b11      	cmp	r3, #17
 8001c5a:	d122      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_ADC_ConfigChannel+0x258>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d111      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_ADC_ConfigChannel+0x25c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_ADC_ConfigChannel+0x260>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9a      	lsrs	r2, r3, #18
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40012300 	.word	0x40012300
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	10000012 	.word	0x10000012
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <ADC_Init+0x1f0>)
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	021a      	lsls	r2, r3, #8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6899      	ldr	r1, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <ADC_Init+0x1f4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d022      	beq.n	8001daa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6899      	ldr	r1, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6899      	ldr	r1, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	e00f      	b.n	8001dca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0202 	bic.w	r2, r2, #2
 8001dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6899      	ldr	r1, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e1b      	ldrb	r3, [r3, #24]
 8001de4:	005a      	lsls	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	3b01      	subs	r3, #1
 8001e24:	035a      	lsls	r2, r3, #13
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	e007      	b.n	8001e40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	051a      	lsls	r2, r3, #20
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e82:	025a      	lsls	r2, r3, #9
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6899      	ldr	r1, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	029a      	lsls	r2, r3, #10
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40012300 	.word	0x40012300
 8001ec0:	0f000001 	.word	0x0f000001

08001ec4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d13c      	bne.n	8001f58 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d12b      	bne.n	8001f50 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d127      	bne.n	8001f50 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d119      	bne.n	8001f50 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0220 	bic.w	r2, r2, #32
 8001f2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff fd6b 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f56:	e00e      	b.n	8001f76 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fd75 	bl	8001a54 <HAL_ADC_ErrorCallback>
}
 8001f6a:	e004      	b.n	8001f76 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff fd57 	bl	8001a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff fd4a 	bl	8001a54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff3e 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8e 	bl	80020bc <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5d 	bl	8002068 <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff31 	bl	800202c <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa2 	bl	8002124 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fa94 	bl	8001724 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e099      	b.n	800233c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002228:	e00f      	b.n	800224a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222a:	f7ff fa7b 	bl	8001724 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b05      	cmp	r3, #5
 8002236:	d908      	bls.n	800224a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e078      	b.n	800233c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e8      	bne.n	800222a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_DMA_Init+0x158>)
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d107      	bne.n	80022b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4313      	orrs	r3, r2
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0307 	bic.w	r3, r3, #7
 80022ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d117      	bne.n	800230e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fa6f 	bl	80027d4 <DMA_CheckFifoParam>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800230a:	2301      	movs	r3, #1
 800230c:	e016      	b.n	800233c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa26 	bl	8002768 <DMA_CalcBaseAndBitshift>
 800231c:	4603      	mov	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	223f      	movs	r2, #63	; 0x3f
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f010803f 	.word	0xf010803f

08002348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_DMA_Start_IT+0x26>
 800236a:	2302      	movs	r3, #2
 800236c:	e040      	b.n	80023f0 <HAL_DMA_Start_IT+0xa8>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d12f      	bne.n	80023e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f9b8 	bl	800270c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	223f      	movs	r2, #63	; 0x3f
 80023a2:	409a      	lsls	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0216 	orr.w	r2, r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0208 	orr.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e005      	b.n	80023ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
 80023ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002404:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <HAL_DMA_IRQHandler+0x248>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a8e      	ldr	r2, [pc, #568]	; (8002644 <HAL_DMA_IRQHandler+0x24c>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2208      	movs	r2, #8
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01a      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2208      	movs	r2, #8
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f043 0202 	orr.w	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2204      	movs	r2, #4
 80024a0:	409a      	lsls	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	2204      	movs	r2, #4
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f043 0204 	orr.w	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2210      	movs	r2, #16
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d043      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2210      	movs	r2, #16
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d024      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
 8002526:	e01f      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e016      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0208 	bic.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2220      	movs	r2, #32
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 808f 	beq.w	8002698 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8087 	beq.w	8002698 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	2220      	movs	r2, #32
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d136      	bne.n	8002610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x1da>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	223f      	movs	r2, #63	; 0x3f
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d07e      	beq.n	8002704 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
        }
        return;
 800260e:	e079      	b.n	8002704 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01d      	beq.n	800265a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	2b00      	cmp	r3, #0
 8002632:	d031      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
 800263c:	e02c      	b.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008
 8002644:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e01e      	b.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10f      	bne.n	8002688 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0210 	bic.w	r2, r2, #16
 8002676:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	2b00      	cmp	r3, #0
 800269e:	d032      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d022      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2205      	movs	r2, #5
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d307      	bcc.n	80026e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x2cc>
 80026de:	e000      	b.n	80026e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e000      	b.n	8002706 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002704:	bf00      	nop
    }
  }
}
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d108      	bne.n	800274c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800274a:	e007      	b.n	800275c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3b10      	subs	r3, #16
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <DMA_CalcBaseAndBitshift+0x64>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d909      	bls.n	80027aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58
 80027a8:	e007      	b.n	80027ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	aaaaaaab 	.word	0xaaaaaaab
 80027d0:	08004820 	.word	0x08004820

080027d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11f      	bne.n	800282e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d856      	bhi.n	80028a2 <DMA_CheckFifoParam+0xce>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <DMA_CheckFifoParam+0x28>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	0800281f 	.word	0x0800281f
 8002804:	0800280d 	.word	0x0800280d
 8002808:	080028a3 	.word	0x080028a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d046      	beq.n	80028a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e043      	b.n	80028a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002826:	d140      	bne.n	80028aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e03d      	b.n	80028aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002836:	d121      	bne.n	800287c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d837      	bhi.n	80028ae <DMA_CheckFifoParam+0xda>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <DMA_CheckFifoParam+0x70>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002855 	.word	0x08002855
 8002848:	0800285b 	.word	0x0800285b
 800284c:	08002855 	.word	0x08002855
 8002850:	0800286d 	.word	0x0800286d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e030      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d025      	beq.n	80028b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286a:	e022      	b.n	80028b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002874:	d11f      	bne.n	80028b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800287a:	e01c      	b.n	80028b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d903      	bls.n	800288a <DMA_CheckFifoParam+0xb6>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d003      	beq.n	8002890 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002888:	e018      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
      break;
 800288e:	e015      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00e      	beq.n	80028ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      break;
 80028a0:	e00b      	b.n	80028ba <DMA_CheckFifoParam+0xe6>
      break;
 80028a2:	bf00      	nop
 80028a4:	e00a      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e008      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e006      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;   
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028ba:	bf00      	nop
    }
  } 
  
  return status; 
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e165      	b.n	8002bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	f040 8154 	bne.w	8002bae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d005      	beq.n	800291e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	2b02      	cmp	r3, #2
 800291c:	d130      	bne.n	8002980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 0201 	and.w	r2, r3, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d017      	beq.n	80029bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80ae 	beq.w	8002bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_GPIO_Init+0x300>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a5c      	ldr	r2, [pc, #368]	; (8002bcc <HAL_GPIO_Init+0x300>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b5a      	ldr	r3, [pc, #360]	; (8002bcc <HAL_GPIO_Init+0x300>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6e:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	220f      	movs	r2, #15
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4f      	ldr	r2, [pc, #316]	; (8002bd4 <HAL_GPIO_Init+0x308>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d025      	beq.n	8002ae6 <HAL_GPIO_Init+0x21a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4e      	ldr	r2, [pc, #312]	; (8002bd8 <HAL_GPIO_Init+0x30c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_GPIO_Init+0x216>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4d      	ldr	r2, [pc, #308]	; (8002bdc <HAL_GPIO_Init+0x310>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d019      	beq.n	8002ade <HAL_GPIO_Init+0x212>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4c      	ldr	r2, [pc, #304]	; (8002be0 <HAL_GPIO_Init+0x314>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0x20e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <HAL_GPIO_Init+0x318>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_GPIO_Init+0x20a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4a      	ldr	r2, [pc, #296]	; (8002be8 <HAL_GPIO_Init+0x31c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x206>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_GPIO_Init+0x320>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_GPIO_Init+0x202>
 8002aca:	2306      	movs	r3, #6
 8002acc:	e00c      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ace:	2307      	movs	r3, #7
 8002ad0:	e00a      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	e008      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ada:	2303      	movs	r3, #3
 8002adc:	e004      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_GPIO_Init+0x21c>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f002 0203 	and.w	r2, r2, #3
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	4093      	lsls	r3, r2
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af8:	4935      	ldr	r1, [pc, #212]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b2a:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b30:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b54:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_GPIO_Init+0x324>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	f67f ae96 	bls.w	80028e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	40020c00 	.word	0x40020c00
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40021400 	.word	0x40021400
 8002bec:	40021800 	.word	0x40021800
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	041a      	lsls	r2, r3, #16
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	400b      	ands	r3, r1
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb8:	f7fe fd34 	bl	8001724 <HAL_GetTick>
 8002cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cbe:	e009      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cc0:	f7fe fd30 	bl	8001724 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cce:	d901      	bls.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e01f      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7fe fd1c 	bl	8001724 <HAL_GetTick>
 8002cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cee:	e009      	b.n	8002d04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cf0:	f7fe fd18 	bl	8001724 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfe:	d901      	bls.n	8002d04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e007      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	420e0040 	.word	0x420e0040
 8002d24:	40007000 	.word	0x40007000
 8002d28:	420e0044 	.word	0x420e0044

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fc82 	bl	8001724 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fc7e 	bl	8001724 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f855 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fbe2 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08004808 	.word	0x08004808
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	2000000c 	.word	0x2000000c

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f14:	f7ff fff0 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0a9b      	lsrs	r3, r3, #10
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08004818 	.word	0x08004818

08002f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f3c:	f7ff ffdc 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0b5b      	lsrs	r3, r3, #13
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08004818 	.word	0x08004818

08002f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f64:	b0ae      	sub	sp, #184	; 0xb8
 8002f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f86:	4bcb      	ldr	r3, [pc, #812]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	f200 8206 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x440>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	080033a1 	.word	0x080033a1
 8002fa4:	080033a1 	.word	0x080033a1
 8002fa8:	080033a1 	.word	0x080033a1
 8002fac:	08002fd9 	.word	0x08002fd9
 8002fb0:	080033a1 	.word	0x080033a1
 8002fb4:	080033a1 	.word	0x080033a1
 8002fb8:	080033a1 	.word	0x080033a1
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	080033a1 	.word	0x080033a1
 8002fc4:	080033a1 	.word	0x080033a1
 8002fc8:	080033a1 	.word	0x080033a1
 8002fcc:	080031d1 	.word	0x080031d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4bb9      	ldr	r3, [pc, #740]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002fd6:	e1e7      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd8:	4bb8      	ldr	r3, [pc, #736]	; (80032bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fde:	e1e3      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4bb4      	ldr	r3, [pc, #720]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fec:	4bb1      	ldr	r3, [pc, #708]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d071      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4bae      	ldr	r3, [pc, #696]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003004:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800300c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800301a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003030:	0150      	lsls	r0, r2, #5
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4621      	mov	r1, r4
 8003038:	1a51      	subs	r1, r2, r1
 800303a:	6439      	str	r1, [r7, #64]	; 0x40
 800303c:	4629      	mov	r1, r5
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003050:	4649      	mov	r1, r9
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	4641      	mov	r1, r8
 8003056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305a:	4641      	mov	r1, r8
 800305c:	018a      	lsls	r2, r1, #6
 800305e:	4641      	mov	r1, r8
 8003060:	1a51      	subs	r1, r2, r1
 8003062:	63b9      	str	r1, [r7, #56]	; 0x38
 8003064:	4649      	mov	r1, r9
 8003066:	eb63 0301 	sbc.w	r3, r3, r1
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003078:	4649      	mov	r1, r9
 800307a:	00cb      	lsls	r3, r1, #3
 800307c:	4641      	mov	r1, r8
 800307e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003082:	4641      	mov	r1, r8
 8003084:	00ca      	lsls	r2, r1, #3
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	4603      	mov	r3, r0
 800308c:	4622      	mov	r2, r4
 800308e:	189b      	adds	r3, r3, r2
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
 8003092:	462b      	mov	r3, r5
 8003094:	460a      	mov	r2, r1
 8003096:	eb42 0303 	adc.w	r3, r2, r3
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030a8:	4629      	mov	r1, r5
 80030aa:	024b      	lsls	r3, r1, #9
 80030ac:	4621      	mov	r1, r4
 80030ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030b2:	4621      	mov	r1, r4
 80030b4:	024a      	lsls	r2, r1, #9
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80030cc:	f7fd f89a 	bl	8000204 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030da:	e067      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b75      	ldr	r3, [pc, #468]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f6:	2300      	movs	r3, #0
 80030f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	62b9      	str	r1, [r7, #40]	; 0x28
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003130:	4649      	mov	r1, r9
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4641      	mov	r1, r8
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4641      	mov	r1, r8
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4641      	mov	r1, r8
 8003140:	ebb2 0a01 	subs.w	sl, r2, r1
 8003144:	4649      	mov	r1, r9
 8003146:	eb63 0b01 	sbc.w	fp, r3, r1
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003156:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800315a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800315e:	4692      	mov	sl, r2
 8003160:	469b      	mov	fp, r3
 8003162:	4623      	mov	r3, r4
 8003164:	eb1a 0303 	adds.w	r3, sl, r3
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	462b      	mov	r3, r5
 800316c:	eb4b 0303 	adc.w	r3, fp, r3
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800317e:	4629      	mov	r1, r5
 8003180:	028b      	lsls	r3, r1, #10
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003188:	4621      	mov	r1, r4
 800318a:	028a      	lsls	r2, r1, #10
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003194:	2200      	movs	r2, #0
 8003196:	673b      	str	r3, [r7, #112]	; 0x70
 8003198:	677a      	str	r2, [r7, #116]	; 0x74
 800319a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800319e:	f7fd f831 	bl	8000204 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4613      	mov	r3, r2
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80031be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ce:	e0eb      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031dc:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d06b      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	2200      	movs	r2, #0
 80031f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	663b      	str	r3, [r7, #96]	; 0x60
 80031fc:	2300      	movs	r3, #0
 80031fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003200:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003204:	4622      	mov	r2, r4
 8003206:	462b      	mov	r3, r5
 8003208:	f04f 0000 	mov.w	r0, #0
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	0159      	lsls	r1, r3, #5
 8003212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003216:	0150      	lsls	r0, r2, #5
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4621      	mov	r1, r4
 800321e:	1a51      	subs	r1, r2, r1
 8003220:	61b9      	str	r1, [r7, #24]
 8003222:	4629      	mov	r1, r5
 8003224:	eb63 0301 	sbc.w	r3, r3, r1
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003236:	4659      	mov	r1, fp
 8003238:	018b      	lsls	r3, r1, #6
 800323a:	4651      	mov	r1, sl
 800323c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003240:	4651      	mov	r1, sl
 8003242:	018a      	lsls	r2, r1, #6
 8003244:	4651      	mov	r1, sl
 8003246:	ebb2 0801 	subs.w	r8, r2, r1
 800324a:	4659      	mov	r1, fp
 800324c:	eb63 0901 	sbc.w	r9, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003260:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003264:	4690      	mov	r8, r2
 8003266:	4699      	mov	r9, r3
 8003268:	4623      	mov	r3, r4
 800326a:	eb18 0303 	adds.w	r3, r8, r3
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	462b      	mov	r3, r5
 8003272:	eb49 0303 	adc.w	r3, r9, r3
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003284:	4629      	mov	r1, r5
 8003286:	024b      	lsls	r3, r1, #9
 8003288:	4621      	mov	r1, r4
 800328a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800328e:	4621      	mov	r1, r4
 8003290:	024a      	lsls	r2, r1, #9
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800329a:	2200      	movs	r2, #0
 800329c:	65bb      	str	r3, [r7, #88]	; 0x58
 800329e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032a4:	f7fc ffae 	bl	8000204 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032b2:	e065      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x420>
 80032b4:	40023800 	.word	0x40023800
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	2200      	movs	r2, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	4611      	mov	r1, r2
 80032cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032d0:	653b      	str	r3, [r7, #80]	; 0x50
 80032d2:	2300      	movs	r3, #0
 80032d4:	657b      	str	r3, [r7, #84]	; 0x54
 80032d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	f04f 0000 	mov.w	r0, #0
 80032e2:	f04f 0100 	mov.w	r1, #0
 80032e6:	0159      	lsls	r1, r3, #5
 80032e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ec:	0150      	lsls	r0, r2, #5
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4641      	mov	r1, r8
 80032f4:	1a51      	subs	r1, r2, r1
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	4649      	mov	r1, r9
 80032fa:	eb63 0301 	sbc.w	r3, r3, r1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800330c:	4659      	mov	r1, fp
 800330e:	018b      	lsls	r3, r1, #6
 8003310:	4651      	mov	r1, sl
 8003312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003316:	4651      	mov	r1, sl
 8003318:	018a      	lsls	r2, r1, #6
 800331a:	4651      	mov	r1, sl
 800331c:	1a54      	subs	r4, r2, r1
 800331e:	4659      	mov	r1, fp
 8003320:	eb63 0501 	sbc.w	r5, r3, r1
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	00eb      	lsls	r3, r5, #3
 800332e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003332:	00e2      	lsls	r2, r4, #3
 8003334:	4614      	mov	r4, r2
 8003336:	461d      	mov	r5, r3
 8003338:	4643      	mov	r3, r8
 800333a:	18e3      	adds	r3, r4, r3
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	464b      	mov	r3, r9
 8003340:	eb45 0303 	adc.w	r3, r5, r3
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003352:	4629      	mov	r1, r5
 8003354:	028b      	lsls	r3, r1, #10
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800335c:	4621      	mov	r1, r4
 800335e:	028a      	lsls	r2, r1, #10
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003368:	2200      	movs	r2, #0
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
 800336c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800336e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003372:	f7fc ff47 	bl	8000204 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4613      	mov	r3, r2
 800337c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	0f1b      	lsrs	r3, r3, #28
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800338e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800339e:	e003      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80033a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	37b8      	adds	r7, #184	; 0xb8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	00f42400 	.word	0x00f42400

080033c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e28d      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8083 	beq.w	80034e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033e0:	4b94      	ldr	r3, [pc, #592]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d019      	beq.n	8003420 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033ec:	4b91      	ldr	r3, [pc, #580]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033f8:	4b8e      	ldr	r3, [pc, #568]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003404:	d00c      	beq.n	8003420 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d112      	bne.n	8003438 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341e:	d10b      	bne.n	8003438 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d05b      	beq.n	80034e4 <HAL_RCC_OscConfig+0x124>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d157      	bne.n	80034e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e25a      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0x90>
 8003442:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7b      	ldr	r2, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xcc>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xb4>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xcc>
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6b      	ldr	r2, [pc, #428]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe f946 	bl	8001724 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe f942 	bl	8001724 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e21f      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xdc>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe f932 	bl	8001724 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe f92e 	bl	8001724 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e20b      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x104>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d06f      	beq.n	80035d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034f2:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003506:	2b08      	cmp	r3, #8
 8003508:	d105      	bne.n	8003516 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x186>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1d3      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x278>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe f8db 	bl	8001724 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe f8d7 	bl	8001724 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1b4      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x278>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe f8ba 	bl	8001724 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe f8b6 	bl	8001724 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e193      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_RCC_OscConfig+0x27c>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe f89a 	bl	8001724 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe f896 	bl	8001724 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e173      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_OscConfig+0x274>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x234>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_OscConfig+0x27c>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe f883 	bl	8001724 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe f87f 	bl	8001724 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e15c      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b8a      	ldr	r3, [pc, #552]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b83      	ldr	r3, [pc, #524]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7f      	ldr	r3, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a7e      	ldr	r2, [pc, #504]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b7c      	ldr	r3, [pc, #496]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b79      	ldr	r3, [pc, #484]	; (8003870 <HAL_RCC_OscConfig+0x4b0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x4b0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x4b0>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe f83f 	bl	8001724 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe f83b 	bl	8001724 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e118      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x4b0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x31e>
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a65      	ldr	r2, [pc, #404]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x358>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x340>
 80036e6:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a60      	ldr	r2, [pc, #384]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a5d      	ldr	r2, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x358>
 8003700:	4b5a      	ldr	r3, [pc, #360]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a59      	ldr	r2, [pc, #356]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a56      	ldr	r2, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe f800 	bl	8001724 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fd fffc 	bl	8001724 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0d7      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x368>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd ffea 	bl	8001724 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fd ffe6 	bl	8001724 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0c1      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b40      	ldr	r3, [pc, #256]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	4a3a      	ldr	r2, [pc, #232]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80ad 	beq.w	80038ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d060      	beq.n	8003860 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d145      	bne.n	8003832 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x4b4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd ffba 	bl	8001724 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd ffb6 	bl	8001724 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e093      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	491b      	ldr	r1, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x4b4>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd ff8b 	bl	8001724 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003812:	f7fd ff87 	bl	8001724 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e064      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x452>
 8003830:	e05c      	b.n	80038ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_RCC_OscConfig+0x4b4>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd ff74 	bl	8001724 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fd ff70 	bl	8001724 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e04d      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_OscConfig+0x4ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x480>
 800385e:	e045      	b.n	80038ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e040      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
 800386c:	40023800 	.word	0x40023800
 8003870:	40007000 	.word	0x40007000
 8003874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCC_OscConfig+0x538>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d030      	beq.n	80038e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d129      	bne.n	80038e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d122      	bne.n	80038e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038a8:	4013      	ands	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d119      	bne.n	80038e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d10f      	bne.n	80038e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e041      	b.n	8003992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fdd4 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 faa0 	bl	8003e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04e      	b.n	8003a52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d01d      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d111      	bne.n	8003a40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d010      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	e007      	b.n	8003a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40010400 	.word	0x40010400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40001800 	.word	0x40001800

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9bf 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9b1 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9c2 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f995 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f987 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f998 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f96b 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f95d 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f96e 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f941 	bl	8003e42 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f933 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f944 	bl	8003e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f90d 	bl	8003e1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 faea 	bl	8004200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f909 	bl	8003e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fab4 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0b4      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x186>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d03e      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0xd4>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	f200 8087 	bhi.w	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	f000 8086 	beq.w	8003dfe <HAL_TIM_ConfigClockSource+0x172>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d87f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d01a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xa6>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d87b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d050      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x11a>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d877      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d03c      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0xfa>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d873      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d058      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d86f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d064      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d86b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d060      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d867      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d05a      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	e062      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f000 f9b7 	bl	80040b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	609a      	str	r2, [r3, #8]
      break;
 8003d5e:	e04f      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f000 f9a0 	bl	80040b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d82:	609a      	str	r2, [r3, #8]
      break;
 8003d84:	e03c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f914 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2150      	movs	r1, #80	; 0x50
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f96d 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003da4:	e02c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f000 f933 	bl	800401e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2160      	movs	r1, #96	; 0x60
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f95d 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e01c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 f8f4 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f94d 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003de4:	e00c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f000 f944 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003df6:	e003      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e000      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <TIM_Base_SetConfig+0x114>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d00f      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <TIM_Base_SetConfig+0x118>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <TIM_Base_SetConfig+0x11c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3b      	ldr	r2, [pc, #236]	; (8003fa0 <TIM_Base_SetConfig+0x120>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3a      	ldr	r2, [pc, #232]	; (8003fa4 <TIM_Base_SetConfig+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <TIM_Base_SetConfig+0x114>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d027      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <TIM_Base_SetConfig+0x118>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d023      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <TIM_Base_SetConfig+0x11c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01f      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <TIM_Base_SetConfig+0x120>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <TIM_Base_SetConfig+0x124>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d017      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <TIM_Base_SetConfig+0x128>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <TIM_Base_SetConfig+0x12c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00f      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <TIM_Base_SetConfig+0x130>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0x134>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <TIM_Base_SetConfig+0x138>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <TIM_Base_SetConfig+0x13c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <TIM_Base_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_Base_SetConfig+0xf8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <TIM_Base_SetConfig+0x124>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d103      	bne.n	8003f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	615a      	str	r2, [r3, #20]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	40001800 	.word	0x40001800
 8003fb8:	40001c00 	.word	0x40001c00
 8003fbc:	40002000 	.word	0x40002000

08003fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 030a 	bic.w	r3, r3, #10
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b087      	sub	sp, #28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0210 	bic.w	r2, r3, #16
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	f043 0307 	orr.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e05a      	b.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d01d      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10c      	bne.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800419c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40001800 	.word	0x40001800

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e03f      	b.n	80042a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd f99a 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f829 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800426c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b0c0      	sub	sp, #256	; 0x100
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	68d9      	ldr	r1, [r3, #12]
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	ea40 0301 	orr.w	r3, r0, r1
 80042d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004308:	f021 010c 	bic.w	r1, r1, #12
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004316:	430b      	orrs	r3, r1
 8004318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	6999      	ldr	r1, [r3, #24]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	ea40 0301 	orr.w	r3, r0, r1
 8004336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b8f      	ldr	r3, [pc, #572]	; (800457c <UART_SetConfig+0x2cc>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d005      	beq.n	8004350 <UART_SetConfig+0xa0>
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b8d      	ldr	r3, [pc, #564]	; (8004580 <UART_SetConfig+0x2d0>)
 800434c:	429a      	cmp	r2, r3
 800434e:	d104      	bne.n	800435a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7fe fdf2 	bl	8002f38 <HAL_RCC_GetPCLK2Freq>
 8004354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004358:	e003      	b.n	8004362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435a:	f7fe fdd9 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 800435e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	f040 810c 	bne.w	8004588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800437e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	1891      	adds	r1, r2, r2
 8004388:	65b9      	str	r1, [r7, #88]	; 0x58
 800438a:	415b      	adcs	r3, r3
 800438c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800438e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004392:	4621      	mov	r1, r4
 8004394:	eb12 0801 	adds.w	r8, r2, r1
 8004398:	4629      	mov	r1, r5
 800439a:	eb43 0901 	adc.w	r9, r3, r1
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b2:	4690      	mov	r8, r2
 80043b4:	4699      	mov	r9, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	eb18 0303 	adds.w	r3, r8, r3
 80043bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043c0:	462b      	mov	r3, r5
 80043c2:	eb49 0303 	adc.w	r3, r9, r3
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043de:	460b      	mov	r3, r1
 80043e0:	18db      	adds	r3, r3, r3
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
 80043e4:	4613      	mov	r3, r2
 80043e6:	eb42 0303 	adc.w	r3, r2, r3
 80043ea:	657b      	str	r3, [r7, #84]	; 0x54
 80043ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f4:	f7fb ff06 	bl	8000204 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <UART_SetConfig+0x2d4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004420:	415b      	adcs	r3, r3
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004428:	4641      	mov	r1, r8
 800442a:	eb12 0a01 	adds.w	sl, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb43 0b01 	adc.w	fp, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004448:	4692      	mov	sl, r2
 800444a:	469b      	mov	fp, r3
 800444c:	4643      	mov	r3, r8
 800444e:	eb1a 0303 	adds.w	r3, sl, r3
 8004452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004456:	464b      	mov	r3, r9
 8004458:	eb4b 0303 	adc.w	r3, fp, r3
 800445c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800446c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
 8004482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800448a:	f7fb febb 	bl	8000204 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4611      	mov	r1, r2
 8004494:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <UART_SetConfig+0x2d4>)
 8004496:	fba3 2301 	umull	r2, r3, r3, r1
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2264      	movs	r2, #100	; 0x64
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	1acb      	subs	r3, r1, r3
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <UART_SetConfig+0x2d4>)
 80044ac:	fba3 2302 	umull	r2, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044b8:	441c      	add	r4, r3
 80044ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d4:	415b      	adcs	r3, r3
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6339      	str	r1, [r7, #48]	; 0x30
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004510:	464b      	mov	r3, r9
 8004512:	460a      	mov	r2, r1
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800452c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004530:	460b      	mov	r3, r1
 8004532:	18db      	adds	r3, r3, r3
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
 8004536:	4613      	mov	r3, r2
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004546:	f7fb fe5d 	bl	8000204 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <UART_SetConfig+0x2d4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <UART_SetConfig+0x2d4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 0207 	and.w	r2, r3, #7
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4422      	add	r2, r4
 8004576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004578:	e106      	b.n	8004788 <UART_SetConfig+0x4d8>
 800457a:	bf00      	nop
 800457c:	40011000 	.word	0x40011000
 8004580:	40011400 	.word	0x40011400
 8004584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458c:	2200      	movs	r2, #0
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800459a:	4642      	mov	r2, r8
 800459c:	464b      	mov	r3, r9
 800459e:	1891      	adds	r1, r2, r2
 80045a0:	6239      	str	r1, [r7, #32]
 80045a2:	415b      	adcs	r3, r3
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045aa:	4641      	mov	r1, r8
 80045ac:	1854      	adds	r4, r2, r1
 80045ae:	4649      	mov	r1, r9
 80045b0:	eb43 0501 	adc.w	r5, r3, r1
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	00eb      	lsls	r3, r5, #3
 80045be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c2:	00e2      	lsls	r2, r4, #3
 80045c4:	4614      	mov	r4, r2
 80045c6:	461d      	mov	r5, r3
 80045c8:	4643      	mov	r3, r8
 80045ca:	18e3      	adds	r3, r4, r3
 80045cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045d0:	464b      	mov	r3, r9
 80045d2:	eb45 0303 	adc.w	r3, r5, r3
 80045d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045f6:	4629      	mov	r1, r5
 80045f8:	008b      	lsls	r3, r1, #2
 80045fa:	4621      	mov	r1, r4
 80045fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004600:	4621      	mov	r1, r4
 8004602:	008a      	lsls	r2, r1, #2
 8004604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004608:	f7fb fdfc 	bl	8000204 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b60      	ldr	r3, [pc, #384]	; (8004794 <UART_SetConfig+0x4e4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	61b9      	str	r1, [r7, #24]
 8004634:	415b      	adcs	r3, r3
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800463c:	4641      	mov	r1, r8
 800463e:	1851      	adds	r1, r2, r1
 8004640:	6139      	str	r1, [r7, #16]
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004654:	4659      	mov	r1, fp
 8004656:	00cb      	lsls	r3, r1, #3
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465e:	4651      	mov	r1, sl
 8004660:	00ca      	lsls	r2, r1, #3
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	4603      	mov	r3, r0
 8004668:	4642      	mov	r2, r8
 800466a:	189b      	adds	r3, r3, r2
 800466c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004670:	464b      	mov	r3, r9
 8004672:	460a      	mov	r2, r1
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	67bb      	str	r3, [r7, #120]	; 0x78
 8004686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004694:	4649      	mov	r1, r9
 8004696:	008b      	lsls	r3, r1, #2
 8004698:	4641      	mov	r1, r8
 800469a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469e:	4641      	mov	r1, r8
 80046a0:	008a      	lsls	r2, r1, #2
 80046a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046a6:	f7fb fdad 	bl	8000204 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	4b38      	ldr	r3, [pc, #224]	; (8004794 <UART_SetConfig+0x4e4>)
 80046b2:	fba3 2301 	umull	r2, r3, r3, r1
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2264      	movs	r2, #100	; 0x64
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	1acb      	subs	r3, r1, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a33      	ldr	r2, [pc, #204]	; (8004794 <UART_SetConfig+0x4e4>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d0:	441c      	add	r4, r3
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	673b      	str	r3, [r7, #112]	; 0x70
 80046da:	677a      	str	r2, [r7, #116]	; 0x74
 80046dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	415b      	adcs	r3, r3
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	66bb      	str	r3, [r7, #104]	; 0x68
 8004722:	464b      	mov	r3, r9
 8004724:	460a      	mov	r2, r1
 8004726:	eb42 0303 	adc.w	r3, r2, r3
 800472a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	663b      	str	r3, [r7, #96]	; 0x60
 8004736:	667a      	str	r2, [r7, #100]	; 0x64
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004744:	4649      	mov	r1, r9
 8004746:	008b      	lsls	r3, r1, #2
 8004748:	4641      	mov	r1, r8
 800474a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474e:	4641      	mov	r1, r8
 8004750:	008a      	lsls	r2, r1, #2
 8004752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004756:	f7fb fd55 	bl	8000204 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <UART_SetConfig+0x4e4>)
 8004760:	fba3 1302 	umull	r1, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	2164      	movs	r1, #100	; 0x64
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	3332      	adds	r3, #50	; 0x32
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <UART_SetConfig+0x4e4>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4422      	add	r2, r4
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800478e:	46bd      	mov	sp, r7
 8004790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <memset>:
 8004798:	4402      	add	r2, r0
 800479a:	4603      	mov	r3, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <memset+0xa>
 80047a0:	4770      	bx	lr
 80047a2:	f803 1b01 	strb.w	r1, [r3], #1
 80047a6:	e7f9      	b.n	800479c <memset+0x4>

080047a8 <__libc_init_array>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4d0d      	ldr	r5, [pc, #52]	; (80047e0 <__libc_init_array+0x38>)
 80047ac:	4c0d      	ldr	r4, [pc, #52]	; (80047e4 <__libc_init_array+0x3c>)
 80047ae:	1b64      	subs	r4, r4, r5
 80047b0:	10a4      	asrs	r4, r4, #2
 80047b2:	2600      	movs	r6, #0
 80047b4:	42a6      	cmp	r6, r4
 80047b6:	d109      	bne.n	80047cc <__libc_init_array+0x24>
 80047b8:	4d0b      	ldr	r5, [pc, #44]	; (80047e8 <__libc_init_array+0x40>)
 80047ba:	4c0c      	ldr	r4, [pc, #48]	; (80047ec <__libc_init_array+0x44>)
 80047bc:	f000 f818 	bl	80047f0 <_init>
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	2600      	movs	r6, #0
 80047c6:	42a6      	cmp	r6, r4
 80047c8:	d105      	bne.n	80047d6 <__libc_init_array+0x2e>
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d0:	4798      	blx	r3
 80047d2:	3601      	adds	r6, #1
 80047d4:	e7ee      	b.n	80047b4 <__libc_init_array+0xc>
 80047d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047da:	4798      	blx	r3
 80047dc:	3601      	adds	r6, #1
 80047de:	e7f2      	b.n	80047c6 <__libc_init_array+0x1e>
 80047e0:	08004830 	.word	0x08004830
 80047e4:	08004830 	.word	0x08004830
 80047e8:	08004830 	.word	0x08004830
 80047ec:	08004834 	.word	0x08004834

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

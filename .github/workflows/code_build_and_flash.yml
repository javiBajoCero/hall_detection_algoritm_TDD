# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains one job:
  tester_building_and_flashing:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # build the target code project, makefile 
      # makefile previously installed "sudo apt install make" (it comes with raspbian already i think)
      # crosscompiling toolachain also installed with "sudo apt-get install gcc-arm-none-eabi"
      - name: build target code with makefile 
        run: |
          cd target_code_to_be_tested/hall_detection_algoritm
          make
          ls
          
      #flashes firmware to the disrovery board attached to the self-hosted runner
      #previously instaled openocd "sudo apt-get install openocd"
      - name: flash target binaries into target nucleo board
        run: |
          cd target_code_to_be_tested/hall_detection_algoritm
          sudo openocd


      # 
      - name: TEST1 static code analysis
        run: |
         sudo apt-get update -y
         sudo apt-get install cppcheck -y
         cppcheck --enable=all target_code_to_be_tested/hall_detection_algoritm --xml 2> TESTS/TEST1_cppcheck_static_analysis/test_results/cppcheck-result.xml
         cd ..
         wget https://github.com/danmar/cppcheck/tree/main/htmlreport
         cppcheck-htmlreport --source-dir=hall_detection_algoritm_TDD/. --title=htmlREPORTcppcheck --file=hall_detection_algoritm_TDD/TESTS/TEST1_cppcheck_static_analysis/test_results/cppcheck-result.xml --report-dir=hall_detection_algoritm_TDD/TESTS/TEST1_cppcheck_static_analysis/test_results/
        
      # build the tester code project, makefile 
      # makefile previously installed "sudo apt install make" (it comes with raspbian already i think)
      # crosscompiling toolachain also installed with "sudo apt-get install gcc-arm-none-eabi"
      - name: TEST2 building tester code with makefile
        run: |
          cd TESTS/TEST2_HIL_hall_signals_scrambled_49_cases/tester_jig_code/hall_error_emulator_nucleo-G431RB
          make
          ls

      #flashes firmware to the disrovery board attached to the self-hosted runner
      #previously instaled openocd "sudo apt-get install openocd"
      - name: TEST2 flash tester binaries into tester nucleo board
        run: |
          cd TESTS/TEST2_HIL_hall_signals_scrambled_49_cases/tester_jig_code/hall_error_emulator_nucleo-G431RB
          sudo openocd

      #takes control of the emulator (tester board) , runs tests and parses results
      - name: TEST2 run python script
        run: |
          cd TESTS/TEST2_HIL_hall_signals_scrambled_49_cases/python_test_script
          ls
          python tests.py

      #        previosuly git client installed with  sudo apt-get install git -y
      # and Set your username: git config --global user.name "FIRST_NAME LAST_NAME"
      # Set your email address: git config --global user.email "MY_NAME@example.com"
      
      - name: commmit and push test results back to the same repo
        run: |
         git config --global user.email ${{ secrets.mailsecreto }}
         git config --global user.name ${{ secrets.usersecreto }}
         git config --global credential.helper cache
         git add .
         git commit -m "report autogenerated in $(date)"
         git push




